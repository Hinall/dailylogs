25/5/24
	        @ApiIgnore
			@RequestMapping(value = "/get_files", method = RequestMethod.POST)
	    public ResponseEntity<?> getFile(@RequestBody String jsonInput) {
	  		  JSONObject jsonObject = new JSONObject(jsonInput);
	        String fileName = jsonObject.getString("images");
	        String directoryPath = jsonObject.getString("directorypath");
	        String[] fileNameArr = fileName.split(",");
	        File dir = new File(directoryPath);
	        Map<String, byte[]> filesContent = new HashMap<>();

	        try {
	            for (String name : fileNameArr) {
	                Path path = Paths.get(dir + File.separator + name);
	                byte[] fileBytes = Files.readAllBytes(path);
	                filesContent.put(path.getFileName().toString(), fileBytes);
	            }
	            return ResponseEntity.ok(filesContent);
	        } catch (IOException e) {
	            e.printStackTrace();
	            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("File not found");
	        }
	    }
	

	  @ApiIgnore
		@RequestMapping(value = "/delete_files", method = RequestMethod.POST)
	    public ResponseEntity<?> deleteSpecifiedFiles(@RequestBody String jsonInput) {
		  JSONObject jsonObject = new JSONObject(jsonInput);
	        String fileNames = jsonObject.getString("images");
	        String uploadDir = jsonObject.getString("directorypath");
	        String[] fileNameArr = fileNames.split(",");
	        List<String> deletedFiles = new ArrayList<>();
	        List<String> notFoundFiles = new ArrayList<>();
	        for (String fileName : fileNameArr) {
	            Path path = Paths.get(uploadDir, fileName);
	            try {
	                if (Files.exists(path)) {
	                    Files.delete(path);
	                    deletedFiles.add(fileName);
	                } else {
	                    notFoundFiles.add(fileName);
	                }
	            } catch (IOException e) {
	                e.printStackTrace();
	                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Failed to delete files");
	            }
	        }

	        Map<String, List<String>> response = new HashMap<>();
	        response.put("deletedFiles", deletedFiles);
	        response.put("notFoundFiles", notFoundFiles);

	        return ResponseEntity.ok(response);
	    }
29-05-24
        @ApiIgnore
			@RequestMapping(path = "/get_files/{imagetype}/{imagename}", method = RequestMethod.GET)
	    public ResponseEntity<?> getFile(@PathVariable("imagetype") String imageType,
	    		@PathVariable("imagename") String imageName) throws IOException {

	        	byte[] fileContent = null;
	        	Path path = Paths.get("D:/Amnex/digital_twin-Angular/digital_twin_frontend/src/app/demo/project-management/images", imageType,imageName);
	        	System.out.println("Image " +path.toString());
	            if (Files.exists(path)) {
	            	fileContent = Files.readAllBytes(path);
	          
	                System.out.println("Image " +path.toString());
	            } else {
	                throw new IOException("File not found: " + imageName);
	            }
	            HttpHeaders headers = new HttpHeaders();
                headers.setContentType(MediaType.parseMediaType("image/png"));
                headers.add("Content-Disposition", "inline;filename=" + imageName);
                headers.setCacheControl("must-revalidate, post-check=0, pre-check=0");
                return new ResponseEntity<byte[]>(fileContent, headers, HttpStatus.OK);
	    }
30april
   <div class="container mt-5">
            <ngb-carousel (slide)="slideActivate($event)">
                <ng-template ngbSlide>
                    <div class="picsum-img-wrapper">
                        <img src="http://localhost:8090/digitaltwin/dashboard/get_files/hh.png" alt="Angular Carousel 1"
                            class="d-block w-100" />
                    </div>
                    <div class="carousel-caption">
                        <h3>Title Goes Here</h3>
                        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>
                    </div>
                </ng-template>
                <ng-template ngbSlide>
                    <div class="picsum-img-wrapper">
                        <img src="http://localhost:8090/digitaltwin/dashboard/get_files/ss.png"
                            alt="Angular Carousel 2" />
                    </div>
                    <div class="carousel-caption">
                        <h3>Title Goes Here</h3>
                        <p>Consectetur tortor volutpat pretium.</p>
                    </div>
                </ng-template>
            </ngb-carousel>
        </div>
	31april
//save
	    private void saveFile(MultipartFile file, String directory) throws IOException {
	        String filename = file.getOriginalFilename();
	        File dir = new File(directory);
	        if (!dir.exists()) {
	            dir.mkdirs();
	        }
	        Path filePath = Paths.get(directory, filename);
	        Files.delete(filePath);
	    }
//	delete    
	    private void deleteFile(String filename, String directory) throws IOException {
	   
	        File dir = new File(directory);
	        if (!dir.exists()) {
	            dir.mkdirs();
	        }
	        Path filePath = Paths.get(directory, filename);
	        Files.delete(filePath);
	    }  
//		fetch   
	    private ResponseEntity<byte[]> fetchFile(String filename, String directory) throws IOException {
	   
	    	Path path = Paths.get(directory);
            if (Files.exists(path)) {
            	return ResponseEntity.ok(Files.readAllBytes(path));
            } else {
                throw new IOException("File not found: " + filename);
            }
           
	    } 
       @DeleteMapping("/delete_files/{foldername}/{filename}")
	        public ResponseEntity<?> deleteSpecifiedFiles(
	                @PathVariable("filename") String fileName,
	                @PathVariable("foldername") String folderName) {

	            String dir;
	            if ("images".equals(folderName)) {
	                dir = "D:/Amnex/digital_twin-Angular/digital_twin_frontend/src/app/demo/project-management/images";
	            } else {
	                dir = "D:/Amnex/digital_twin-Angular/digital_twin_frontend/src/app/demo/project-management/documents";
	            }

	            try {
	                deleteFile(fileName, dir);
	                return ResponseEntity.status(HttpStatus.OK).body("File deleted successfully.");
	            } catch (IOException e) {
	                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error while deleting file: " + e.getMessage());
	            }
	        }
//	    	delete    
	 	   
	        private void deleteFile(String fileName, String dir) throws IOException {
	            Path path = Paths.get(dir, fileName);
	            Files.deleteIfExists(path);
	        }

---------------------------------------------------------------------
	        @ApiIgnore
			@RequestMapping(path = "/get_files/{foldername}/{filename}", method = RequestMethod.GET)
	    public ResponseEntity<?> getFile(
	    		@PathVariable("filename") String imageName,@PathVariable("foldername") String foldername) throws IOException {
	        	String dir="";
	        	if(foldername=="images") {
	        		dir="D:/Amnex/digital_twin-Angular/digital_twin_frontend/src/app/demo/project-management/images";
	        	}
	        	else {
	        		dir="D:/Amnex/digital_twin-Angular/digital_twin_frontend/src/app/demo/project-management/documents";

	        	}
	        	try {
	        		 byte[] fileContent = fetchFile(imageName, dir);
	                 ByteArrayResource resource = new ByteArrayResource(fileContent);

	                 HttpHeaders headers = new HttpHeaders();
	                 headers.add(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" + imageName + "\"");
	                 headers.add(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_OCTET_STREAM_VALUE);

	                 return ResponseEntity.ok()
	                         .headers(headers)
	                         .contentLength(fileContent.length)
	                         .body(resource);
	        	
	        } catch (IOException e) {
	            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error while fetching file: " + e.getMessage());
	        }        	
	    }
//			fetch   
		    private byte[] fetchFile(String filename, String directory) throws IOException {
		   
		    	Path path = Paths.get(directory);
	            if (Files.exists(path)) {
	            	return Files.readAllBytes(path);
	            } else {
	                throw new IOException("File not found: " + filename);
	            }
	           
		    }
-------------------------------------------------------------------------------
	
	  @RequestMapping(value = "/upload_files", method = RequestMethod.POST, consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
	    public ResponseEntity<?> addfile(
	            @RequestParam(value = "images", required = false) MultipartFile[] images,
	            @RequestParam(value = "documents", required = false) MultipartFile[] documents,
	            @RequestParam(value = "jsonData", required = true) String folderName,
	            HttpServletRequest httpServletRequest,
	            HttpServletResponse httpServletResponse) {

	        String imageDirectory = "D:/Amnex/digital_twin-Angular/digital_twin_frontend/src/app/demo/project-management/images";
	        String documentDirectory = "D:/Amnex/digital_twin-Angular/digital_twin_frontend/src/app/demo/project-management/documents";

	        try {
	            // Process uploaded images
	            if (images != null) {
	                for (MultipartFile file : images) {
	                    saveFile(file, imageDirectory);
	                }
	            }

	            // Process uploaded documents
	            if (documents != null) {
	                for (MultipartFile file : documents) {
	                    saveFile(file, documentDirectory);
	                }
	            }

	        } catch (IOException e) {
	            e.printStackTrace();
	            return ResponseEntity.status(HttpServletResponse.SC_INTERNAL_SERVER_ERROR)
	                    .body("Error occurred while uploading files: " + e.getMessage());
	        }

	        return ResponseEntity.ok("Files uploaded successfully.");
	    }
//save
	    private void saveFile(MultipartFile file, String directory) throws IOException {
	        String filename = file.getOriginalFilename();
	        File dir = new File(directory);
	        if (!dir.exists()) {
	            dir.mkdirs();
	        }
	        Path filePath = Paths.get(directory, filename);
	        Files.delete(filePath);
	    }


<mat-tab-group>
    <mat-tab md-colors="{color:'#76ee59'}" label="Projects">

        <div class="row">
            <kendo-grid [kendoGridBinding]="projectData" [style.height.%]="100" [pageSize]="10" filterable="menu"
                [skip]="0" [pageable]="true" [sortable]="true">
                <ng-template kendoGridToolbarTemplate>
                    <div class="export-template">
                        <button class=" btn btn-dark export-new excel" (click)="exportExcel(excelexport)">Export
                            toExcel</button>
                    </div>
                    <div class="export-template">
                        <button class="export-new excel btn btn-dark" (click)="openEditDialog('add',0)">Add new
                            project</button>
                    </div>
                </ng-template>
                <ng-container *ngFor="let data of grid_fields">
                    <kendo-grid-column *ngFor="let data of grid_fields" field="{{data.fields}}" title="{{data.title}}"
                        [hidden]="data.hide" [width]="250"></kendo-grid-column>
                </ng-container>
                <kendo-grid-column field="Action" title="Action" [width]="200" [sticky]="true" [columnMenu]="false">
                    <ng-template kendoGridCellTemplate let-dataItem>
                        <div class="d-flex gap-2">
                            <button kendoButton size="small" class="d-flex align-items-center btn btn-dark"
                                rounded="small" fillMode="outline" themeColor="base"
                                (click)="openEditDialog('edit',dataItem.project_id)">
                                Edit
                            </button>
                            <button class="d-flex align-items-center  btn btn-dark"
                                (click)="delete(dataItem.project_id)">
                                delete
                            </button>
                        </div>
                    </ng-template>
                </kendo-grid-column>
                <!-- Excel -->
                <kendo-excelexport fileName="Reports.xlsx" [data]="projectData" #excelexport>
                    <ng-container *ngFor="let data of grid_fields">
                        <kendo-excelexport-column field="{{data.fields}}" title="{{data.title}}">
                        </kendo-excelexport-column>
                    </ng-container>
                </kendo-excelexport>
            </kendo-grid>
        </div>

        <!-- project form dialog -->
        <kendo-dialog class="custom-dialog handler-dialog" title="form" *ngIf="editDialog" [minWidth]="250"
            [width]="1024" (close)="closeEditDialog()">
            <h1>{{btnName}}</h1>

            <form [formGroup]="projectForm" (ngSubmit)="onSubmit(btnSubmit)" style="height: 600px; overflow-y: auto;"
                enctype="multipart/form-data">
                <div>
                    <div class="form-group">
                        <label for="first-name"> Project Name</label>
                        <input type="text" id="username" class="form-control" formControlName="project_name">
                        <div *ngIf="projectForm.get('project_name').invalid && (projectForm.get('project_name').dirty ||projectForm.get('project_name').touched)"
                            class="alert alert-danger">
                            <div *ngIf="projectForm.get('project_name').errors?.['required']">
                                project name is required.
                            </div>
                        </div>
                    </div>
                </div>
                <div>
                    <div class="form-group">
                        <label for="first-name">Location Name</label>
                        <input type="text" id="location_name" class="form-control" formControlName="location_name">
                        <div *ngIf="projectForm.get('location_name').invalid && (projectForm.get('location_name').dirty ||projectForm.get('location_name').touched)"
                            class="alert alert-danger">
                            <div *ngIf="projectForm.get('location_name').errors?.['required']">
                                location name is required.
                            </div>
                        </div>
                    </div>
                </div>

                <div>
                    <div class="form-group">
                        <label for="first-name">contractor_name</label>
                        <input type="text" id="contractor_name" class="form-control" formControlName="contractor_name">
                        <div *ngIf="projectForm.get('contractor_name').invalid && (projectForm.get('contractor_name').dirty ||projectForm.get('contractor_name').touched)"
                            class="alert alert-danger">
                            <div *ngIf="projectForm.get('contractor_name').errors?.['required']">
                                contractor_name is required.
                            </div>
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <label for="contractor_number">contractor_number</label>
                    <input type="text" id="" class="form-control" formControlName="contractor_number">

                    <div *ngIf="projectForm.get('contractor_number').invalid && (projectForm.get('contractor_number').dirty || projectForm.get('contractor_number').touched)"
                        class="alert alert-danger">
                        <div *ngIf="projectForm.get('contractor_number').errors?.['required']">
                            contactno is required.
                        </div>
                        <div *ngIf="projectForm.get('contractor_number').errors?.['pattern']">Invalid contact
                            number (should be a
                            10-digit number)</div>
                    </div>
                </div>

                <br />

                <div class="form-group">
                    <label for="contractor_email">Email: </label>
                    <input type="text" formControlName="contractor_email" class="form-control" autocomplete="noac">
                    <div *ngIf="projectForm.get('contractor_email').invalid && (projectForm.get('contractor_email').dirty || projectForm.get('contractor_email').touched)"
                        class="alert alert-danger">
                        <div *ngIf="projectForm.get('contractor_email').errors['required']">Email is
                            required
                        </div>

                        <div *ngIf="projectForm.get('contractor_email').errors['email']">Please enter a
                            valid email address</div>
                    </div>
                </div>
                <br>
                <div *ngIf="isAdd">


                </div>
                <br>
                <div style="display: flex; justify-content: space-between;">
                    <div class="form-group" style="flex: 1; margin-right: 10px;">
                        <label>Start Date</label>
                        <mat-form-field style="width: 100%;">
                            <input matInput [matDatepicker]="startPicker" formControlName="start_date">
                            <mat-datepicker-toggle matSuffix [for]="startPicker"></mat-datepicker-toggle>
                            <mat-datepicker #startPicker></mat-datepicker>
                        </mat-form-field>
                        <div *ngIf="projectForm.get('start_date').invalid && (projectForm.get('start_date').dirty || projectForm.get('start_date').touched)"
                            class="alert alert-danger">
                            <div *ngIf="projectForm.get('start_date').errors?.['required']">
                                start_date is required.
                            </div>
                        </div>
                    </div>
                    <div class="form-group" style="flex: 1; margin-left: 10px;">
                        <label>End Date</label>
                        <mat-form-field style="width: 100%;">
                            <input matInput [matDatepicker]="endPicker" formControlName="end_date">
                            <mat-datepicker-toggle matSuffix [for]="endPicker"></mat-datepicker-toggle>
                            <mat-datepicker #endPicker></mat-datepicker>
                        </mat-form-field>
                        <div *ngIf="projectForm.get('end_date').invalid && (projectForm.get('end_date').dirty || projectForm.get('end_date').touched)"
                            class="alert alert-danger">
                            <div *ngIf="projectForm.get('end_date').errors?.['required']">
                                End date is required.
                            </div>
                        </div>
                    </div>
                </div>

                <br>




                <br>
                <div>
                    <div class="form-group">
                        <label for="first-name">total cost</label>
                        <input type="text" id="total_cost" class="form-control" formControlName="total_cost">
                        <div *ngIf="projectForm.get('total_cost').invalid && (projectForm.get('total_cost').dirty ||projectForm.get('total_cost').touched)"
                            class="alert alert-danger">
                            <div *ngIf="projectForm.get('total_cost').errors?.['required']">
                                total_cost is required.
                            </div>
                        </div>
                    </div>
                </div>


                <!--  -->
                <button class="btn btn-dark" type="submit">{{btnSubmit}}</button>
                <button class="btn btn-dark" (click)="closeEditDialog()">close</button>
            </form>

            {{this.projectForm.value|json}}
        </kendo-dialog>




    </mat-tab>

    <mat-tab label="Milestones">
        <div class="form-group">
            <label style="color: #48c1f1; font-size: larger;"> select project:</label>
            <select style="border-color: #48c1f1; " id="project_id" (change)="loadMilestoneOnChange($event)"
                class="form-control">
                <option value="">none</option>
                <option class="form-control" *ngFor="let p of projects" [value]="p.project_id">{{ p.project_name }}
                </option>
            </select>
        </div>


        <!-- grid -->
        <div class="row">

            <kendo-grid [kendoGridBinding]="milestoneData" [style.height.%]="100" [pageSize]="10" filterable="menu"
                [skip]="0" [pageable]="true" [sortable]="true">

                <ng-template kendoGridToolbarTemplate let-dataItem>
                    <div class="export-template">
                        <button class=" btn btn-dark export-new excel" (click)="exportExcel(excelexport)">Export to
                            Excel</button>
                    </div>

                    <div class="export-template">
                        <button class="export-new excel btn btn-dark" (click)="openEditDialogMilestone('add','0')">Add
                            new
                            Milestone</button>
                    </div>
                </ng-template>
                <ng-container>
                    <!-- Container element to handle both *ngFor and *ngIf -->
                    <ng-container *ngFor="let data of grid_fields_milestone">
                        <kendo-grid-column *ngIf="data.fields !== 'image' && data.fields !== 'document'"
                            [field]="data.fields" [title]="data.title" [hidden]="data.hide" [width]="250">
                        </kendo-grid-column>
                    </ng-container>

                    <!-- Image Column -->
                    <kendo-grid-column field="image" title="Image" [hidden]="false" [width]="150">
                        <ng-template kendoGridCellTemplate let-dataItem>
                            {{dataItem.image}}
                            <button kendoButton size="small" class="btn btn-dark"
                                (click)="fetchImageDocs(dataItem.milestone_id , 'image')">
                                View Image
                            </button>
                        </ng-template>
                    </kendo-grid-column>

                    <!-- Document Column -->
                    <kendo-grid-column field="document" title="Document" [hidden]="false" [width]="150">
                        <ng-template kendoGridCellTemplate let-dataItem>
                            {{dataItem.document}}
                            <button kendoButton size="small" class="btn btn-dark"
                                (click)="fetchImageDocs(dataItem.milestone_id , 'document')">
                                View Document
                            </button>
                        </ng-template>
                    </kendo-grid-column>

                    <!-- Action Button Column -->
                    <kendo-grid-column field="Action" title="Action" [width]="150" [sticky]="true" [columnMenu]="false">
                        <ng-template kendoGridCellTemplate let-dataItem>
                            <div class="d-flex gap-2">
                                <button kendoButton size="small" class="d-flex align-items-center btn btn-dark"
                                    rounded="small" fillMode="outline" themeColor="base"
                                    (click)="openEditDialogMilestone('edit', dataItem.milestone_id)">
                                    Edit
                                </button>
                                <button class="d-flex align-items-center btn btn-dark"
                                    (click)="deleteMilestone(dataItem.milestone_id)">
                                    Delete
                                </button>
                            </div>
                        </ng-template>
                    </kendo-grid-column>
                </ng-container>


                <kendo-excelexport fileName="Reports.xlsx" [data]="milestoneData" #excelexport>
                    <ng-container *ngFor="let data of grid_fields_milestone">
                        <kendo-excelexport-column field="{{data.fields}}" title="{{data.title}}">
                        </kendo-excelexport-column>
                    </ng-container>
                </kendo-excelexport>
            </kendo-grid>
        </div>

    </mat-tab>


</mat-tab-group>
<kendo-dialog class="custom-dialog handler-dialog" title="form" *ngIf="editDialogMilestone" [minWidth]="250" [width]="1024" (close)="closeEditDialog()">
    <h1>{{btnNameMilestone}}</h1>

    <form [formGroup]="milestoneForm" (ngSubmit)="onSubmitMilestone(btnSubmitMilestone)" style="height: 600px; overflow-y: auto;">
        <div>
            <div class="form-group">
                <label for="first-name"> Milestone Name</label>
                <input type="text" class="form-control" formControlName="milestone_name">
                <div *ngIf="milestoneForm.get('milestone_name').invalid && (milestoneForm.get('milestone_name').dirty || milestoneForm.get('milestone_name').touched)" class="alert alert-danger">
                    <div *ngIf="milestoneForm.get('milestone_name').errors?.['required']">
                        Milestone is required.
                    </div>
                </div>
            </div>
        </div>

        <div class="form-group">
            <label for="description">Description</label>
            <input type="text" id="description" class="form-control" formControlName="description">
            <div *ngIf="milestoneForm.get('description').invalid && (milestoneForm.get('description').dirty || milestoneForm.get('description').touched)" class="alert alert-danger">
                <div *ngIf="milestoneForm.get('description').errors?.['required']">
                    Description is required.
                </div>
            </div>
        </div>

        <div class="form-group">
            <label for="status">Is Approved: </label>
            <select formControlName="is_approved" class="form-control">
                <option value="true">TRUE</option>
                <option value="false">FALSE</option>
            </select>
        </div>

        <div class="form-group">
            <label>Milestone Status:</label>
            <select class="form-control" formControlName="milestone_status">
                <option value="">Select</option>
                <option *ngFor="let s of status_list" [value]="s.status_id">{{ s.status_name }}</option>
            </select>
            <div *ngIf="milestoneForm.get('milestone_status').invalid && (milestoneForm.get('milestone_status').dirty || milestoneForm.get('milestone_status').touched)" class="alert alert-danger">
                <div *ngIf="milestoneForm.get('milestone_status').errors?.['required']">Milestone status is required.</div>
            </div>
        </div>

        <div class="form-group">
            <label>Remarks</label>
            <input type="text" class="form-control" formControlName="remarks">
            <div *ngIf="milestoneForm.get('remarks').invalid && (milestoneForm.get('remarks').dirty || milestoneForm.get('remarks').touched)" class="alert alert-danger">
                <div *ngIf="milestoneForm.get('remarks').errors?.['required']">
                    Remark is required.
                </div>
            </div>
        </div>

        <div style="display: flex; justify-content: space-between;">
            <div class="form-group" style="flex: 1; margin-right: 10px;">
                <label>Image</label>
            
                <input id="imageInput" type="file" multiple="multiple" accept="image/png,image/jpeg" (change)="onImageChange($event)" formControlName="image">
                <p *ngIf="isimgVisible">{{ milestoneForm.get('image').value  }}</p>
                <div *ngIf="milestoneForm.get('image').invalid && (milestoneForm.get('image').dirty || milestoneForm.get('image').touched)" class="alert alert-danger">
                    <div *ngIf="milestoneForm.get('image').errors?.['required']">
                        Image is required.
                    </div>
                </div>
            </div>
            <div class="form-group" style="flex: 1; margin-left: 10px;">
                <label>Document</label>
       
                <input id="docInput" class="hidden" title="sg" type="file" multiple="multiple" (change)="onDocumentChange($event)" formControlName="document">
                <p *ngIf="isdocVisible">{{ milestoneForm.get('document').value }}</p>
                <div *ngIf="milestoneForm.get('document').invalid && (milestoneForm.get('document').dirty || milestoneForm.get('document').touched)" class="alert alert-danger">
                    <div *ngIf="milestoneForm.get('document').errors?.['required']">
                        Document is required.
                    </div>
                </div>
            </div>
        </div>

        <br>
        <div style="display: flex; justify-content: space-between;">
            <div class="form-group" style="flex: 1; margin-right: 10px;">
                <label>Start Date</label>
                <mat-form-field style="width: 100%;">
                    <input matInput [matDatepicker]="mstartPicker" formControlName="start_date">
                    <mat-datepicker-toggle matSuffix [for]="mstartPicker"></mat-datepicker-toggle>
                    <mat-datepicker #mstartPicker></mat-datepicker>
                </mat-form-field>
                <div *ngIf="milestoneForm.get('start_date').invalid && (milestoneForm.get('start_date').dirty || milestoneForm.get('start_date').touched)" class="alert alert-danger">
                    <div *ngIf="milestoneForm.get('start_date').errors?.['required']">
                        Start date is required.
                    </div>
                </div>
            </div>
            <div class="form-group" style="flex: 1; margin-left: 10px;">
                <label>End Date</label>
                <mat-form-field style="width: 100%;">
                    <input matInput [matDatepicker]="mendPicker" formControlName="end_date">
                    <mat-datepicker-toggle matSuffix [for]="mendPicker"></mat-datepicker-toggle>
                    <mat-datepicker #mendPicker></mat-datepicker>
                </mat-form-field>
                <div *ngIf="milestoneForm.get('end_date').invalid && (milestoneForm.get('end_date').dirty || milestoneForm.get('end_date').touched)" class="alert alert-danger">
                    <div *ngIf="milestoneForm.get('end_date').errors?.['required']">
                        End date is required.
                    </div>
                </div>
            </div>
        </div>

     
        <button class="btn btn-dark" type="submit">{{btnSubmitMilestone}}</button>
        <button class="btn btn-dark" type="button" (click)="closeEditDialog()">Close</button>
    </form>


    <pre>{{milestoneForm.value | json}}</pre>
    <pre>{{milestoneForm.valid | json}}</pre>
</kendo-dialog>
<div class="container mt-5">
    <ngb-carousel *ngIf="fetchedDocuments && fetchedDocuments.length" (slide)="slideActivate($event)">
      <ng-template ngbSlide *ngFor="let item of fetchedDocuments">
        <div class="carousel-item-wrapper">
          <div class="picsum-img-wrapper">
            <img [src]="'D:/Amnex/digital_twin-Angular/digital_twin_frontend/src/app/demo/project-management/images' + item" class="d-block w-100 carousel-image" alt="{{item}}" />
            <p>{{ item }}</p>
          </div>
          <div class="carousel-caption">
            <h3>Title Goes Here</h3>
            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>
          </div>
        </div>
      </ng-template>
    </ngb-carousel>
  </div>
  <div class="container mt-5">
    <ngb-carousel *ngIf="fetchedImages && fetchedImages.length" (slide)="slideActivate($event)">
      <ng-template ngbSlide *ngFor="let item of fetchedImages">
        <div class="carousel-item-wrapper">
          <div class="picsum-img-wrapper">
            <img [src]="'D:/Amnex/digital_twin-Angular/digital_twin_frontend/src/app/demo/project-management/documents/' + item" class="d-block w-100 carousel-image" alt="{{item}}" />
            <p>{{ item }}</p>
          </div>
          <div class="carousel-caption">
            <h3>Title Goes Here</h3>
            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>
          </div>
        </div>
      </ng-template>
    </ngb-carousel>
  </div>



----------------------------
9:15
<mat-tab-group>
    <mat-tab md-colors="{color:'#76ee59'}" label="Projects">

        <div class="row">
            <kendo-grid [kendoGridBinding]="projectData" [style.height.%]="100" [pageSize]="10" filterable="menu"
                [skip]="0" [pageable]="true" [sortable]="true">
                <ng-template kendoGridToolbarTemplate>
                    <div class="export-template">
                        <button class=" btn btn-dark export-new excel" (click)="exportExcel(excelexport)">Export
                            toExcel</button>
                    </div>
                    <div class="export-template">
                        <button class="export-new excel btn btn-dark" (click)="openEditDialog('add',0)">Add new
                            project</button>
                    </div>
                </ng-template>
                <ng-container *ngFor="let data of grid_fields">
                    <kendo-grid-column *ngFor="let data of grid_fields" field="{{data.fields}}" title="{{data.title}}"
                        [hidden]="data.hide" [width]="250"></kendo-grid-column>
                </ng-container>
                <kendo-grid-column field="Action" title="Action" [width]="200" [sticky]="true" [columnMenu]="false">
                    <ng-template kendoGridCellTemplate let-dataItem>
                        <div class="d-flex gap-2">
                            <button kendoButton size="small" class="d-flex align-items-center btn btn-dark"
                                rounded="small" fillMode="outline" themeColor="base"
                                (click)="openEditDialog('edit',dataItem.project_id)">
                                Edit
                            </button>
                            <button class="d-flex align-items-center  btn btn-dark"
                                (click)="delete(dataItem.project_id)">
                                delete
                            </button>
                        </div>
                    </ng-template>
                </kendo-grid-column>
                <!-- Excel -->
                <kendo-excelexport fileName="Reports.xlsx" [data]="projectData" #excelexport>
                    <ng-container *ngFor="let data of grid_fields">
                        <kendo-excelexport-column field="{{data.fields}}" title="{{data.title}}">
                        </kendo-excelexport-column>
                    </ng-container>
                </kendo-excelexport>
            </kendo-grid>
        </div>

        <!-- project form dialog -->
        <kendo-dialog class="custom-dialog handler-dialog" title="form" *ngIf="editDialog" [minWidth]="250"
            [width]="1024" (close)="closeEditDialog()">
            <h1>{{btnName}}</h1>

            <form [formGroup]="projectForm" (ngSubmit)="onSubmit(btnSubmit)" style="height: 600px; overflow-y: auto;"
                enctype="multipart/form-data">
                <div>
                    <div class="form-group">
                        <label for="first-name"> Project Name</label>
                        <input type="text" id="username" class="form-control" formControlName="project_name">
                        <div *ngIf="projectForm.get('project_name').invalid && (projectForm.get('project_name').dirty ||projectForm.get('project_name').touched)"
                            class="alert alert-danger">
                            <div *ngIf="projectForm.get('project_name').errors?.['required']">
                                project name is required.
                            </div>
                        </div>
                    </div>
                </div>
                <div>
                    <div class="form-group">
                        <label for="first-name">Location Name</label>
                        <input type="text" id="location_name" class="form-control" formControlName="location_name">
                        <div *ngIf="projectForm.get('location_name').invalid && (projectForm.get('location_name').dirty ||projectForm.get('location_name').touched)"
                            class="alert alert-danger">
                            <div *ngIf="projectForm.get('location_name').errors?.['required']">
                                location name is required.
                            </div>
                        </div>
                    </div>
                </div>

                <div>
                    <div class="form-group">
                        <label for="first-name">contractor_name</label>
                        <input type="text" id="contractor_name" class="form-control" formControlName="contractor_name">
                        <div *ngIf="projectForm.get('contractor_name').invalid && (projectForm.get('contractor_name').dirty ||projectForm.get('contractor_name').touched)"
                            class="alert alert-danger">
                            <div *ngIf="projectForm.get('contractor_name').errors?.['required']">
                                contractor_name is required.
                            </div>
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <label for="contractor_number">contractor_number</label>
                    <input type="text" id="" class="form-control" formControlName="contractor_number">

                    <div *ngIf="projectForm.get('contractor_number').invalid && (projectForm.get('contractor_number').dirty || projectForm.get('contractor_number').touched)"
                        class="alert alert-danger">
                        <div *ngIf="projectForm.get('contractor_number').errors?.['required']">
                            contactno is required.
                        </div>
                        <div *ngIf="projectForm.get('contractor_number').errors?.['pattern']">Invalid contact
                            number (should be a
                            10-digit number)</div>
                    </div>
                </div>

                <br />

                <div class="form-group">
                    <label for="contractor_email">Email: </label>
                    <input type="text" formControlName="contractor_email" class="form-control" autocomplete="noac">
                    <div *ngIf="projectForm.get('contractor_email').invalid && (projectForm.get('contractor_email').dirty || projectForm.get('contractor_email').touched)"
                        class="alert alert-danger">
                        <div *ngIf="projectForm.get('contractor_email').errors['required']">Email is
                            required
                        </div>

                        <div *ngIf="projectForm.get('contractor_email').errors['email']">Please enter a
                            valid email address</div>
                    </div>
                </div>
                <br>
                <div *ngIf="isAdd">


                </div>
                <br>
                <div style="display: flex; justify-content: space-between;">
                    <div class="form-group" style="flex: 1; margin-right: 10px;">
                        <label>Start Date</label>
                        <mat-form-field style="width: 100%;">
                            <input matInput [matDatepicker]="startPicker" formControlName="start_date">
                            <mat-datepicker-toggle matSuffix [for]="startPicker"></mat-datepicker-toggle>
                            <mat-datepicker #startPicker></mat-datepicker>
                        </mat-form-field>
                        <div *ngIf="projectForm.get('start_date').invalid && (projectForm.get('start_date').dirty || projectForm.get('start_date').touched)"
                            class="alert alert-danger">
                            <div *ngIf="projectForm.get('start_date').errors?.['required']">
                                start_date is required.
                            </div>
                        </div>
                    </div>
                    <div class="form-group" style="flex: 1; margin-left: 10px;">
                        <label>End Date</label>
                        <mat-form-field style="width: 100%;">
                            <input matInput [matDatepicker]="endPicker" formControlName="end_date">
                            <mat-datepicker-toggle matSuffix [for]="endPicker"></mat-datepicker-toggle>
                            <mat-datepicker #endPicker></mat-datepicker>
                        </mat-form-field>
                        <div *ngIf="projectForm.get('end_date').invalid && (projectForm.get('end_date').dirty || projectForm.get('end_date').touched)"
                            class="alert alert-danger">
                            <div *ngIf="projectForm.get('end_date').errors?.['required']">
                                End date is required.
                            </div>
                        </div>
                    </div>
                </div>

                <br>




                <br>
                <div>
                    <div class="form-group">
                        <label for="first-name">total cost</label>
                        <input type="text" id="total_cost" class="form-control" formControlName="total_cost">
                        <div *ngIf="projectForm.get('total_cost').invalid && (projectForm.get('total_cost').dirty ||projectForm.get('total_cost').touched)"
                            class="alert alert-danger">
                            <div *ngIf="projectForm.get('total_cost').errors?.['required']">
                                total_cost is required.
                            </div>
                        </div>
                    </div>
                </div>


                <!--  -->
                <button class="btn btn-dark" type="submit">{{btnSubmit}}</button>
                <button class="btn btn-dark" (click)="closeEditDialog()">close</button>
            </form>

            {{this.projectForm.value|json}}
        </kendo-dialog>




    </mat-tab>

    <mat-tab label="Milestones">
        <div class="form-group">
            <label style="color: #48c1f1; font-size: larger;"> select project:</label>
            <select style="border-color: #48c1f1; " id="project_id" (change)="loadMilestoneOnChange($event)"
                class="form-control">
                <option value="">none</option>
                <option class="form-control" *ngFor="let p of projects" [value]="p.project_id">{{ p.project_name }}
                </option>
            </select>
        </div>


        <!-- grid -->
        <div class="row">

            <!-- <kendo-grid [kendoGridBinding]="milestoneData" [style.height.%]="100" [pageSize]="10" filterable="menu" [skip]="0" [pageable]="true" [sortable]="true">
  
        <ng-template kendoGridToolbarTemplate>
          <div class="export-template">
              <button type="button" kendoGridExcelCommand svg="file-excel" class="export-new excel" (click)="exportExcel(excelexport)">Export to Excel</button>
          </div>
        </ng-template>      
        <ng-container *ngFor="let data of grid_fields_milestone">
            <kendo-grid-column field="{{data.fields}}" title="{{data.title}}" [hidden]="data.hide" [width]="250"></kendo-grid-column>
        </ng-container>        
        
        <kendo-grid-column field="Action" title="Action" [width]="200" [columnMenu]="true">
          <ng-template kendoGridCellTemplate let-dataItem>
            <div class="d-flex gap-2">
              <button kendoButton size="small" class="d-flex align-items-center" size="small" rounded="small" fillMode="outline"
                themeColor="base">
                Delete
              </button>
              <button kendoButton size="small" class="d-flex align-items-center" id="Edit" size="small" rounded="small" fillMode="outline"
              themeColor="base">
              Edit
            </button>
            </div>
          </ng-template>
        </kendo-grid-column>
      
      </kendo-grid> -->




            <kendo-grid [kendoGridBinding]="milestoneData" [style.height.%]="100" [pageSize]="10" filterable="menu"
                [skip]="0" [pageable]="true" [sortable]="true">

                <ng-template kendoGridToolbarTemplate let-dataItem>
                    <div class="export-template">
                        <button class=" btn btn-dark export-new excel" (click)="exportExcel(excelexport)">Export to
                            Excel</button>
                    </div>

                    <div class="export-template">
                        <button class="export-new excel btn btn-dark" (click)="openEditDialogMilestone('add','0')">Add
                            new
                            Milestone</button>
                    </div>
                </ng-template>
                <ng-container>
                    <!-- Container element to handle both *ngFor and *ngIf -->
                    <ng-container *ngFor="let data of grid_fields_milestone">
                        <kendo-grid-column *ngIf="data.fields !== 'image' && data.fields !== 'document'"
                            [field]="data.fields" [title]="data.title" [hidden]="data.hide" [width]="250">
                        </kendo-grid-column>
                    </ng-container>

                    <!-- Image Column -->
                    <kendo-grid-column field="image" title="Image" [hidden]="false" [width]="150">
                        <ng-template kendoGridCellTemplate let-dataItem>
                            {{dataItem.image}}
                            <button kendoButton size="small" class="btn btn-dark"
                                (click)="fetchImageDocs(dataItem.milestone_id , 'image')">
                                View Image
                            </button>
                        </ng-template>
                    </kendo-grid-column>

                    <!-- Document Column -->
                    <kendo-grid-column field="document" title="Document" [hidden]="false" [width]="150">
                        <ng-template kendoGridCellTemplate let-dataItem>
                            {{dataItem.document}}
                            <button kendoButton size="small" class="btn btn-dark"
                                (click)="fetchImageDocs(dataItem.milestone_id , 'document')">
                                View Document
                            </button>
                        </ng-template>
                    </kendo-grid-column>

                    <!-- Action Button Column -->
                    <kendo-grid-column field="Action" title="Action" [width]="150" [sticky]="true" [columnMenu]="false">
                        <ng-template kendoGridCellTemplate let-dataItem>
                            <div class="d-flex gap-2">
                                <button kendoButton size="small" class="d-flex align-items-center btn btn-dark"
                                    rounded="small" fillMode="outline" themeColor="base"
                                    (click)="openEditDialogMilestone('edit', dataItem.milestone_id)">
                                    Edit
                                </button>
                                <button class="d-flex align-items-center btn btn-dark"
                                    (click)="deleteMilestone(dataItem.milestone_id)">
                                    Delete
                                </button>
                            </div>
                        </ng-template>
                    </kendo-grid-column>
                </ng-container>


                <kendo-excelexport fileName="Reports.xlsx" [data]="milestoneData" #excelexport>
                    <ng-container *ngFor="let data of grid_fields_milestone">
                        <kendo-excelexport-column field="{{data.fields}}" title="{{data.title}}">
                        </kendo-excelexport-column>
                    </ng-container>
                </kendo-excelexport>
            </kendo-grid>
        </div>

    </mat-tab>


</mat-tab-group>

<kendo-dialog class="custom-dialog handler-dialog" title="form" *ngIf="editDialogMilestone" [minWidth]="250"
    [width]="1024" (close)="closeEditDialog()">
    <h1>{{btnNameMilestone}}</h1>

    <form [formGroup]="milestoneForm" (ngSubmit)="onSubmitMilestone(btnSubmitMilestone)"
        style="height: 600px; overflow-y: auto;">
        <div>
            <div class="form-group">
                <label for="first-name"> Milestone Name</label>
                <input type="text" class="form-control" formControlName="milestone_name">
                <div *ngIf="milestoneForm.get('milestone_name').invalid && (milestoneForm.get('milestone_name').dirty ||milestoneForm.get('milestone_name').touched)"
                    class="alert alert-danger">
                    <div *ngIf="milestoneForm.get('milestone_name').errors?.['required']">
                        milestone is required.
                    </div>
                </div>
            </div>
        </div>

        <div class="form-group">
            <label for="description">Description</label>
            <input type="text" id="description" class="form-control" formControlName="description">
            <div *ngIf="milestoneForm.get('description').invalid && (milestoneForm.get('description').dirty ||milestoneForm.get('description').touched)"
                class="alert alert-danger">
                <div *ngIf="milestoneForm.get('description').errors?.['required']">
                    Description is required.
                </div>
            </div>
        </div>

        <div class="form-group">
            <label for="status">Is Approved: </label>
            <select formControlName="is_approved" class="form-control">
                <option value="true">TRUE</option>
                <option value="false">FALSE</option>
            </select>

            <!-- <div *ngIf="userForm.get('status').invalid && (userForm.get('status').dirty || userForm.get('status').touched)"
              class="alert alert-danger">
              <div *ngIf="userForm.get('status').errors['required']">Status is required</div>
            </div> -->
        </div>

        <div class="form-group">
            <label>Milestone status:</label>
            <select class="form-control" formControlName="milestone_status">
                <option value="">Select</option>
                <option *ngFor="let s of status_list" [value]="s.status_id">{{ s.status_name }}</option>
            </select>
            <!-- <div
              *ngIf="userForm.get('role_id').invalid && (userForm.get('role_id').dirty || userForm.get('role_id').touched)"
              class="alert alert-danger">
              <div *ngIf="userForm.get('role_id').errors['required']">role id is required</div>
            </div> -->
        </div>

        <div>
            <div class="form-group">
                <label>Remarks</label>
                <input type="text" class="form-control" formControlName="remarks">
                <!-- <div *ngIf="milestoneForm.get('remarks').invalid && (milestoneForm.get('remarks').dirty ||milestoneForm.get('remarks').touched)"
                    class="alert alert-danger">
                    <div *ngIf="milestoneForm.get('remarks').errors?.['required']">
                        Remark is required.
                    </div>
                </div> -->
            </div>
        </div>

        <div style="display: flex; justify-content: space-between;">
            <div class="form-group" style="flex: 1; margin-right: 10px;">
                <label>Image</label>
                <input id="imageInput" type="file" multiple="multiple" accept="image/png,image/jpeg" (change)="onImageChange($event)">
                <p *ngIf="isimgVisible">{{ milestoneForm.get('image').value  }}</p>
                <!-- <div *ngIf="milestoneForm.get('image').invalid && (milestoneForm.get('image').dirty ||milestoneForm.get('image').touched)"
                    class="alert alert-danger">
                    <div *ngIf="milestoneForm.get('image').errors?.['required']">
                        Image is required.
                    </div>
                </div> -->
            </div>
            <div class="form-group" style="flex: 1; margin-left: 10px;">
                <label>Document</label>
                <!-- <input type="text" class="form-control" formControlName="document"> -->
                <input id="docInput" type="file" multiple="multiple" (change)="onDocumentChange($event)">
                <p *ngIf="isdocVisible">{{ milestoneForm.get('document').value }}</p>
                <!-- <div *ngIf="milestoneForm.get('document').invalid && (milestoneForm.get('document').dirty ||milestoneForm.get('document').touched)"
                    class="alert alert-danger">
                    <div *ngIf="milestoneForm.get('document').errors?.['required']">
                        Document is required.
                    </div>
                </div> -->
            </div>
        </div>

        <br>
        <div *ngIf="isAdd">

        </div>
        <br>
        <div style="display: flex; justify-content: space-between;">
            <div class="form-group" style="flex: 1; margin-right: 10px;">
                <label>Start Date</label>

                <mat-form-field style="width: 100%;">
                    <input matInput [matDatepicker]="mstartPicker" formControlName="start_date">
                    <mat-datepicker-toggle matSuffix [for]="mstartPicker"></mat-datepicker-toggle>
                    <mat-datepicker #mstartPicker></mat-datepicker>
                </mat-form-field>
                <!-- <div *ngIf="milestoneForm.get('start_date').invalid && (milestoneForm.get('start_date').dirty || milestoneForm.get('start_date').touched)"
                   class="alert alert-danger">
                <div *ngIf="milestoneForm.get('start_date').errors?.['required']">
                  Start date is required.
                </div>
              </div> -->
            </div>
            <div class="form-group" style="flex: 1; margin-left: 10px;">
                <label>End Date</label>
                <mat-form-field style="width: 100%;">
                    <input matInput [matDatepicker]="mendPicker" formControlName="end_date">
                    <mat-datepicker-toggle matSuffix [for]="mendPicker"></mat-datepicker-toggle>
                    <mat-datepicker #mendPicker></mat-datepicker>
                </mat-form-field>
                <!-- <div *ngIf="milestoneForm.get('end_date').invalid && (milestoneForm.get('end_date').dirty || milestoneForm.get('end_date').touched)"
                   class="alert alert-danger">
                <div *ngIf="milestoneForm.get('end_date').errors?.['required']">
                  End date is required.
                </div> -->
            </div>
        </div>

        <!--  -->
        <button class="btn btn-dark" type="submit">{{btnSubmitMilestone}}</button>
        <button class="btn btn-dark" (click)="closeEditDialog()">close</button>
    </form>
    {{this.milestoneForm.value|json}}
</kendo-dialog>
<!-- image popup dialog -->
<div>
    <kendo-dialog class="custom-dialog handler-dialog" title="Images" *ngIf="ImageDialog" [minWidth]="250"
        [width]="1024" (close)="closeEditDialog()">

        Image Carousel

        
        <div class="container mt-5"  >
            <div>
                <ngb-carousel  (slide)="slideActivate($event)">
                    <ng-template *ngFor="let item of fetchedImages" ngbSlide>
                        <div class="picsum-img-wrapper">
                            <img src="http://localhost:8090/digitaltwin/dashboard/get_files/images/{{item}}" class="d-block w-100" />
                            <p>{{item}}</p>
                        </div>
                        <div class="carousel-caption">
                            <h3>Title Goes Here</h3>
                            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>
                        </div>
                    </ng-template>
        
                </ngb-carousel>
            </div>
        </div>

        <kendo-dialog-actions>
            <button kendoButton (click)="closeEditDialog()">Close</button>
        </kendo-dialog-actions>
    </kendo-dialog>
</div>

<!-- document popup dialog -->

<div>
    <kendo-dialog class="custom-dialog handler-dialog" *ngIf="documentDialog" title="document" [minWidth]="250"
        [width]="1024" (close)="closeEditDialog()">
        <div class="container mt-5"  >
            <div>
                <ngb-carousel  (slide)="slideActivate($event)">
                    <ng-template *ngFor="let item of fetchedDocuments" ngbSlide>
                        <div class="picsum-img-wrapper">
                            <img src="http://localhost:8090/digitaltwin/dashboard/get_files/d/{{item}}" class="d-block w-100" />
                            <p>{{item}}</p>
                        </div>
                        <div class="carousel-caption">
                            <h3>Title Goes Here</h3>
                            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>
                        </div>
                    </ng-template>
        
                </ngb-carousel>
            </div>
        </div>
       


        
         

        <kendo-dialog-actions>
            <button kendoButton (click)="closeEditDialog()">Close</button>
        </kendo-dialog-actions>
    </kendo-dialog>
</div>

<!-- <img src="http://localhost:8090/digitaltwin/dashboard/get_files/hh.png"> -->

==========================================================================
3-6-24
CREATE TABLE public.tbl_web_announcement
(
    announcement_id serial NOT NULL ,
    announcement_title text,
    announcement_description text,
    created_datetime timestamp with time zone,
    latitude double precision,
    longitude double precision,
    address text,
    announcement_datetime timestamp with time zone,
    role_id integer,
    CONSTRAINT tbl_web_announcement_pkey PRIMARY KEY (announcement_id),
    CONSTRAINT role_id_fk FOREIGN KEY (role_id)
        REFERENCES public.tbl_web_role_master (role_id)
)
✔


CREATE OR REPLACE FUNCTION public.fn_web_crud_announcement_management(
	userjson text)
    RETURNS TABLE(data text) 
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
    ROWS 1000

AS $BODY$
DECLARE
	_title text;
	_description text;
	_latitude double precision;
	_longitude double precision;
	_address text;
	_role_id integer;
	_announcement_datetime timestamp with time zone;
			
	sql_query text;
	userJsonObject JSON;
	_flag TEXT;
	_filter TEXT DEFAULT '';
	_CREATE_FLAG TEXT DEFAULT 'create';
	_DELETE_FLAG TEXT DEFAULT 'delete';
	_UPDATE_FLAG TEXT DEFAULT 'update';
	_FETCH_FLAG TEXT DEFAULT 'fetch';

BEGIN

	 raise notice '%',userjson;
	userJsonObject := cast(userjson AS JSON) :: JSON;
	
	_title:= userJsonObject ->>'title';
	_description := userJsonObject ->>'description';
	_latitude := userJsonObject ->>'latitude';
	_longitude := userJsonObject ->>'longitude';
	_address := userJsonObject ->>'address';
	_role_id := userJsonObject ->>'role_id';
	_announcement_datetime := userJsonObject ->>'announcement_datetime';
	_flag := userJsonObject ->> 'flag';	

	
    raise notice '%',_title;
    raise notice '%',_latitude;
    raise notice '%',_role_id;

	IF (_flag = _CREATE_FLAG)
	THEN
	 
	 	IF EXISTS (SELECT announcement_id FROM public.tbl_web_announcement WHERE (announcement_title = ''|| _announcement_title ||'' OR announcement_datetime = ''|| _announcement_datetime||'')  ) 
		THEN	
        	raise notice 'announcement for same date and title is already exists';
			sql_query :=  'SELECT json_build_object(''responseCode'',201,''responseMessage'',''announcement for same date and title is already exists.'')::text as data;';
		ELSE
			INSERT INTO public.tbl_web_announcement(
	         announcement_title, announcement_description, announcement_datetime ,latitude, longitude, address, role_id, created_datetime)
	        VALUES ( ?, ?, ?, ?, ?, ?, ?, now());
			sql_query := 'SELECT json_build_object(''responseCode'',200,''responseMessage'',''Announcement created successfully created successfully'')::text as data;';			
	END IF;
		
	ELSEIF (_flag = _UPDATE_FLAG)
	THEN
		IF EXISTS (SELECT user_id FROM public.tbl_user_master WHERE user_id = _user_id) 
		THEN	
			IF EXISTS (SELECT user_id FROM public.tbl_user_master WHERE user_id != _user_id AND (contact_no = ''|| _user_contact_no ||'' OR email_id = ''|| _user_email ||'')) THEN
				sql_query :=  'SELECT json_build_object(''responseCode'',201,''responseMessage'',''User name or email id is already Exists.'')::text as data;';
			ELSE
				UPDATE public.tbl_user_master
				SET user_name = _user_name, 
				--password = _user_password, 
				-- name = _name, 
				contact_no = _user_contact_no, 
				email_id = _user_email, 
				status = _status, 
				role_id = _role_id, 
				--is_delete = false, 
				modified_on=now()
				WHERE user_id = _user_id RETURNING user_id INTO _inserted_user_id;	
				
				UPDATE tbl_ward_assign_master set status = FALSE where fkuserid = _inserted_user_id;
				FOR _ward_json IN SELECT * FROM json_array_elements((userJsonObject ->> 'ward_nos')::json)
					LOOP
						IF _ward_json ->> 'ward_no' IS NOT NULL THEN
							_ward_no := _ward_json ->> 'ward_no';
							
							INSERT INTO tbl_ward_assign_master (fkuserid,wardno,status,created_datetime) 
								values (_inserted_user_id,_ward_no,TRUE,now());

						END IF;
				END LOOP;
				
				
				sql_query := 'SELECT json_build_object(''responseCode'',200,''responseMessage'',''User details updated successfully'')::text as data;';
			END IF;	
			
		ELSE
			sql_query :=  'SELECT json_build_object(''responseCode'',201,''responseMessage'',''User is not available.'')::text as data;';
		END IF;
		
	ELSEIF(_flag = _UPDATE_STATUS_FLAG) --- FOR UPDATE STATUS OF USER select * from tbl_user_master
	THEN
		IF EXISTS (SELECT user_id FROM public.tbl_user_master WHERE user_id = _user_id)
		THEN
			UPDATE public.tbl_user_master
			SET status = _status
			WHERE user_id = _user_id;
			sql_query :=  'SELECT json_build_object(''responseCode'',200,''responseMessage'',''User Status Update successfully.'')::text as data;';
		ELSE
			sql_query :=  'SELECT json_build_object(''responseCode'',201,''responseMessage'',''User is not available.'')::text as data;';
		
	END IF;
	ELSEIF (_flag = _DELETE_FLAG) ---- FOR DELETE USER
	THEN

		IF EXISTS (SELECT user_id FROM public.tbl_user_master WHERE user_id = _user_id) 
		THEN	

			UPDATE public.tbl_user_master
			SET status = _status,
			is_delete = true
			WHERE user_id = _user_id;
			sql_query :=  'SELECT json_build_object(''responseCode'',200,''responseMessage'',''User deleted successfully.'')::text as data;';
		ELSE
			sql_query :=  'SELECT json_build_object(''responseCode'',201,''responseMessage'',''User is not available.'')::text as data;';
		END IF;
	
	ELSEIF (_flag = _FETCH_FLAG) ---- FOR FETCH USER
	THEN
		--_filter := ' AND tum.user_id != ' || _user_id ;
		
		sql_query := 'SELECT json_build_object(''responseCode'',200,''data'',COALESCE(to_json(array_agg(data1)), 
		''[]''),''responseMessage'',''ok'')::text as data
		FROM (
			SELECT  
			tum.user_id,
			tum.user_name,
			tum.name,
			tum.contact_no,
			tum.email_id,
			(SELECT role_name FROM tbl_role_master WHERE role_id = tum.role_id::INTEGER) AS role_name,
			tum.status,
			tum.role_id,
			
			(array_to_json(array( select json_build_object(''ward_no'',wam.wardno)							
				FROM public.tbl_ward_assign_master AS wam
				LEFT JOIN public.tbl_user_master um ON
				wam.fkuserid::integer = tum.user_id::integer
				WHERE um.user_id::integer = wam.fkuserid::integer and wam.status is TRUE
			))) AS ward_data
			 
			-- (array_to_json(array( select json_build_object(''ward_no'',wam.wardno)							
			--	FROM public.tbl_user_master AS tum
			--	LEFT JOIN public.tbl_ward_assign_master AS wam ON
			--	wam.fkuserid::integer = tum.user_id::integer
			--	WHERE wam.fkuserid::integer = tum.user_id::integer and wam.status is TRUE
			--))) AS ward_data
			 
			from tbl_user_master tum  WHERE is_delete is false
			--'||_filter||'
			)data1;';																								   
	END IF;
		
	RETURN QUERY EXECUTE sql_query;

	EXCEPTION WHEN OTHERS 
	THEN
		DECLARE p_errormessage VARCHAR(4000);
		DECLARE p_errorstate VARCHAR(4000);
		DECLARE p_errorline VARCHAR(4000);

		BEGIN									
			p_errormessage:= SQLERRM;
			p_errorstate:= SQLSTATE;
			GET STACKED DIAGNOSTICS p_errorline = PG_EXCEPTION_CONTEXT;
				
			INSERT INTO tbl_error_log(error_name,error_callstack,error_method,created_on)		
			SELECT p_errorline,p_errormessage||':fn_web_crud_surveyor_management',p_errorstate,timezone('Asia/Kolkata'::text, now());
			
			sql_query := 'SELECT json_build_object(''responseCode'',201,''data'',''failed'', ''responseMessage'', '''||p_errormessage||''')::text as data';
	END;
	RETURN QUERY EXECUTE sql_query;
END;
$BODY$;

ALTER FUNCTION public.fn_web_crud_surveyor_management(text)
    OWNER TO postgres;
✔


CREATE OR REPLACE FUNCTION public.fn_web_crud_announcement(
	jsondata text)
    RETURNS TABLE(data text) 
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
    ROWS 1000

AS $BODY$
DECLARE		
		
			-- 03-06-24
		
			-- SELECT public.fn_add_announcements('{"title":"Announcement 1","description":"Announcement description","user_id":1,"latitude":"22.723228", "longitude":"75.875230","address":"Test 123","department_id":1,"announcement_datetime":"2019-12-27 12:12:12"}');
			
			json_data json;
			_title text;
			_description text;
			_user_id integer;
			_latitude double precision;
			_longitude double precision;
			_address text;
			_role_id integer;
			_announcement_datetime timestamp with time zone;		
			sql_query TEXT;
	BEGIN         		
			json_data := cast(jsondata as json) :: json;
			_title := json_data ->> 'announcement_title';
			_description := json_data ->> 'announcement_description';
			_user_id := json_data ->> 'user_id';
			_latitude := json_data ->> 'latitude';
			_longitude := json_data ->> 'longitude';
			_address := json_data ->> 'address';
			_department_id := json_data ->> 'department_id';
			_announcement_datetime := json_data ->> 'announcement_datetime';
			
			INSERT INTO public.tbl_announcement
			(announcement_title, announcement_description, created_datetime, user_id, latitude, longitude, address, department_id, announcement_datetime)
			VALUES
			(_title, _description, now(), _user_id, _latitude, _longitude, _address, _department_id, _announcement_datetime)
			RETURNING announcement_id INTO _id;
			
			IF _id != 0
			THEN
				sql_query := 'SELECT json_build_object(''responseCode'', 200, ''responseMessage'',''Announcement added successfully.'') :: text';
			ELSE
				sql_query := 'SELECT json_build_object(''responseCode'', 204, ''responseMessage'',''Error while data insertion'') :: text';
			END IF;
			RETURN QUERY EXECUTE sql_query;	


------------✨		THEN	
			IF EXISTS (SELECT announcement_id FROM public.tbl_web_announcement WHERE announcement_id = _announcement_id  ))
			THEN
				UPDATE public.tbl_web_announcement
				SET announcement_title  = _announcement_title   	,         
				announcement_description= _announcement_description	,
				created_datetime        = _created_datetime			,		
                latitude                = _latitude					,
                longitude 				= _longitude				,
                address 				= _address					,
                announcement_datetime	= _announcement_datetime	,
                role_id 				= _role_id

				sql_query := 'SELECT json_build_object(''responseCode'',200,''responseMessage'',''announcement updated successfully'')::text as data;';
			ELSE
			sql_query :=  'SELECT json_build_object(''responseCode'',201,''responseMessage'',''announcement is not available.'')::text as data;';
			END IF;	
------------✨	

CREATE OR REPLACE FUNCTION public.fn_web_crud_announcement_management(
	userjson text)
    RETURNS TABLE(data text) 
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
    ROWS 1000

AS $BODY$
DECLARE
	_announcement_title text;
	_announcement_description text;
	_latitude double precision;
	_longitude double precision;
	_address text;
	_role_id integer;
	_announcement_datetime timestamp with time zone;
	_announcement_id int;
			
	sql_query text;
	userJsonObject JSON;
	_flag TEXT;
	_filter TEXT DEFAULT '';
	_CREATE_FLAG TEXT DEFAULT 'create';
	_DELETE_FLAG TEXT DEFAULT 'delete';
	_UPDATE_FLAG TEXT DEFAULT 'update';
	_FETCH_FLAG TEXT DEFAULT 'fetch';

BEGIN
-- 	select * from tbl_web_announcement
	raise notice '%',userjson;
	userJsonObject := cast(userjson AS JSON) :: JSON;
    
	_announcement_title := userJsonObject ->> 'announcement_title';
    RAISE NOTICE 'announcement_title: %', _announcement_title;

    _announcement_description := userJsonObject ->> 'announcement_description';
    RAISE NOTICE 'announcement_description: %', _announcement_description;

    _latitude := userJsonObject ->> 'latitude';
    RAISE NOTICE 'latitude: %', _latitude;

    _longitude := userJsonObject ->> 'longitude';
    RAISE NOTICE 'longitude: %', _longitude;

    _address := userJsonObject ->> 'address';
    RAISE NOTICE 'address: %', _address;

    _role_id := (userJsonObject ->> 'role_id')::INT;
    RAISE NOTICE 'role_id: %', _role_id;

    _announcement_datetime := userJsonObject ->> 'announcement_datetime';
    RAISE NOTICE 'announcement_datetime: %', _announcement_datetime;

    _flag := userJsonObject ->> 'flag';
    RAISE NOTICE 'flag: %', _flag;

    _announcement_id := (userJsonObject ->> 'announcement_id')::INT;
    RAISE NOTICE 'announcement_id: %', _announcement_id;
	
	IF (_flag = _CREATE_FLAG)-- insert
	THEN
	 	IF EXISTS (SELECT announcement_id FROM public.tbl_web_announcement WHERE (announcement_title = ''|| _announcement_title ||'' OR announcement_datetime = ''|| _announcement_datetime||'')  ) 
		THEN	
        	raise notice 'announcement for same date and title is already exists';
			sql_query :=  'SELECT json_build_object(''responseCode'',201,''responseMessage'',''announcement for same date and title is already exists.'')::text as data;';
		ELSE
			INSERT INTO public.tbl_web_announcement(
	         			announcement_title, announcement_description, announcement_datetime , latitude,  longitude,  address,  role_id, created_datetime)
	        VALUES (_announcement_title,   _announcement_description, _announcement_datetime ,_latitude, _longitude, _address, _role_id, now());
			sql_query := 'SELECT json_build_object(''responseCode'',200,''responseMessage'',''Announcement created successfully created successfully'')::text as data;';			
			raise notice 'announcement inserted';
		END IF;
	ELSEIF (_flag = _UPDATE_FLAG)
	THEN	
			IF EXISTS (SELECT announcement_id FROM public.tbl_web_announcement WHERE announcement_id = _announcement_id  )
			THEN
				UPDATE public.tbl_web_announcement
				SET announcement_title  = _announcement_title   	,         
				announcement_description= _announcement_description	,
				created_datetime        = _created_datetime			,		
                latitude                = _latitude					,
                longitude 				= _longitude				,
                address 				= _address					,
                announcement_datetime	= _announcement_datetime	,
                role_id 				= _role_id;

				sql_query := 'SELECT json_build_object(''responseCode'',200,''responseMessage'',''announcement updated successfully'')::text as data;';
				raise notice 'announcement updated';
			ELSE
			sql_query :=  'SELECT json_build_object(''responseCode'',201,''responseMessage'',''announcement is not available.'')::text as data;';
			raise notice 'announcement not updated';
			END IF;
	ELSEIF (_flag = _DELETE_FLAG)--delete
	THEN	
			IF EXISTS (SELECT announcement_id FROM public.tbl_web_announcement WHERE announcement_id = _announcement_id ) THEN
				DELETE FROM public.tbl_web_announcement 
				WHERE announcement_id = _announcement_id;
							sql_query :=  'SELECT json_build_object(''responseCode'',200,''responseMessage'',''announcement deleted successfully.'')::text as data;';
							raise notice 'announcement delete';
			ELSE
							sql_query :=  'SELECT json_build_object(''responseCode'',201,''responseMessage'',''announcement is not available.'')::text as data;';
							raise notice 'announcement noot updated';
			END IF;		
	ELSEIF (_flag = _FETCH_FLAG) ---- FOR FETCH by id
	THEN
		sql_query := 'SELECT json_build_object(''responseCode'',200,''data'',COALESCE(to_json(array_agg(data1)), 
		''[]''),''responseMessage'',''ok'')::text as data
		FROM (
			SELECT  
			    announcement_title,  
				announcement_description,
				created_datetime,        
				latitude ,               
				longitude 	,			
				address ,				
				announcement_datetime	,
				role_id 				
			    from tbl_web_announcement  WHERE announcement_id = _announcement_id
		     )data1;';
		raise notice 'announcement fetch by id';	 
			
	ELSEIF (_flag = _FETCH_FLAG) ---- FOR FETCH all data 
	THEN
		sql_query := 'SELECT json_build_object(''responseCode'',200,''data'',COALESCE(to_json(array_agg(data1)), 
		''[]''),''responseMessage'',''ok'')::text as data
		FROM (SELECT 
			    announcement_title,  
				announcement_description,
				created_datetime,        
				latitude ,               
				longitude 	,			
				address ,				
				announcement_datetime	,
				role_id 				
			    from tbl_web_announcement )data1;';  
		   raise notice 'announcement fetch all';	 
	END IF;
		
	RETURN QUERY EXECUTE sql_query;
		raise notice 'locha hai';
	EXCEPTION WHEN OTHERS 
	THEN
		DECLARE p_errormessage VARCHAR(4000);
		DECLARE p_errorstate VARCHAR(4000);
		DECLARE p_errorline VARCHAR(4000);

		BEGIN									
			p_errormessage:= SQLERRM;
			p_errorstate:= SQLSTATE;
			GET STACKED DIAGNOSTICS p_errorline = PG_EXCEPTION_CONTEXT;
				
			INSERT INTO tbl_error_log(error_name,error_callstack,error_method,created_on)		
			SELECT p_errorline,p_errormessage||':fn_web_crud_announcement_management',p_errorstate,timezone('Asia/Kolkata'::text, now());
			
			sql_query := 'SELECT json_build_object(''responseCode'',201,''data'',''failed'', ''responseMessage'', '''||p_errormessage||''')::text as data';
	END;
	RETURN QUERY EXECUTE sql_query;
END;
$BODY$;

--------------
select fn_web_crud_announcement_management('{
										   "flag":"create",
										   "announcement_title":"meeting", 
										   "announcement_description":"meeting1", 
										   "announcement_datetime":"3-6-2024" , 
										   "latitude":"22.723228",  
										   "longitude":"75.875230",  
										   "address":"test",  
										   "role_id":"2"}')
-- 										   select * from tbl_web_role_master
-- select * from tbl_web_announcement
SELECT * FROM tbl_error_log ORDER BY created_on DESC LIMIT 10


✔ CREATED SP
✔TESTING FOR INSERT


CREATE OR REPLACE FUNCTION public.fn_web_crud_announcement_management(
	userjson text)
    RETURNS TABLE(data text) 
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
    ROWS 1000

AS $BODY$
DECLARE
	_announcement_title text;
	_announcement_description text;
	_latitude double precision;
	_longitude double precision;
	_address text;
	_role_id integer;
	_announcement_datetime timestamp with time zone;
	_announcement_id int;
			
	sql_query text;
	userJsonObject JSON;
	_flag TEXT;
	_filter TEXT DEFAULT '';
	_CREATE_FLAG TEXT DEFAULT 'create';
	_DELETE_FLAG TEXT DEFAULT 'delete';
	_UPDATE_FLAG TEXT DEFAULT 'update';
	_FETCH_FLAG TEXT DEFAULT 'fetch';
	_FETCHID_FLAG TEXT DEFAULT 'fetch_id';

BEGIN
-- 	select * from tbl_web_announcement
--  select fn_web_crud_announcement_management('{"flag":"create","announcement_title":"meeting2","announcement_description":"meeting2","announcement_datetime":"2222-02-02","latitude":"22.723228","longitude":"75.875230","address":"test","role_id":"2"}')
--  select fn_web_crud_announcement_management('{"flag":"update","announcement_id":"1","announcement_title":"meetingupdate","announcement_description":"meetingupd","announcement_datetime":"2222-02-02","latitude":"22.723228","longitude":"75.875230","address":"test","role_id":"2"}')
--  select fn_web_crud_announcement_management('{"flag":"fetch_id","announcement_id":"1"}')
--  select fn_web_crud_announcement_management('{"flag":"fetch"}')
--  select fn_web_crud_announcement_management('{"flag":"delete","announcement_id":"1"}')

	raise notice '%',userjson;
	userJsonObject := cast(userjson AS JSON) ;
    
	_announcement_title := userJsonObject ->> 'announcement_title';
    RAISE NOTICE 'announcement_title: %', _announcement_title;

    _announcement_description := userJsonObject ->> 'announcement_description';
    RAISE NOTICE 'announcement_description: %', _announcement_description;

    _latitude := userJsonObject ->> 'latitude';
    RAISE NOTICE 'latitude: %', _latitude;

    _longitude := userJsonObject ->> 'longitude';
    RAISE NOTICE 'longitude: %', _longitude;

    _address := userJsonObject ->> 'address';
    RAISE NOTICE 'address: %', _address;

    _role_id := (userJsonObject ->> 'role_id')::INT;
    RAISE NOTICE 'role_id: %', _role_id;

    _announcement_datetime :=  to_timestamp(userJsonObject ->> 'announcement_datetime', 'YYYY-MM-DD');
    RAISE NOTICE 'announcement_datetime: %', _announcement_datetime;

    _flag := userJsonObject ->> 'flag';
    RAISE NOTICE 'flag: %', _flag;

    _announcement_id := (userJsonObject ->> 'announcement_id')::INT;
    RAISE NOTICE 'announcement_id: %', _announcement_id;
	
	IF (_flag = _CREATE_FLAG)-- insert
	THEN
	RAISE NOTICE 'ss';
	 	IF EXISTS (SELECT announcement_id FROM public.tbl_web_announcement WHERE (announcement_title = ''|| _announcement_title ||'' AND announcement_datetime = _announcement_datetime)  ) 
		THEN	
        	raise notice 'announcement for same date and title is already exists';
			sql_query :=  'SELECT json_build_object(''responseCode'',201,''responseMessage'',''announcement for same date and title is already exists.'')::text as data;';
		ELSE
		RAISE NOTICE 'ss _>';
			INSERT INTO public.tbl_web_announcement(
	         			announcement_title, announcement_description, announcement_datetime , latitude,  longitude,  address,  role_id, created_datetime)
	        VALUES (_announcement_title,   _announcement_description, _announcement_datetime ,_latitude, _longitude, _address, _role_id, now());
			sql_query := 'SELECT json_build_object(''responseCode'',200,''responseMessage'',''Announcement created successfully created successfully'')::text as data;';			
			raise notice 'announcement inserted';
		END IF;
	ELSEIF (_flag = _UPDATE_FLAG)
	THEN	
			IF EXISTS (SELECT announcement_id FROM public.tbl_web_announcement WHERE announcement_id = _announcement_id  )
			THEN
				UPDATE public.tbl_web_announcement
				SET announcement_title  = _announcement_title   	,         
				announcement_description= _announcement_description	,
                latitude                = _latitude					,
                longitude 				= _longitude				,
                address 				= _address					,
                announcement_datetime	= _announcement_datetime	,
                role_id 				= _role_id;

				sql_query := 'SELECT json_build_object(''responseCode'',200,''responseMessage'',''announcement updated successfully'')::text as data;';
				raise notice 'announcement updated';
			ELSE
			sql_query :=  'SELECT json_build_object(''responseCode'',201,''responseMessage'',''announcement is not available.'')::text as data;';
			raise notice 'announcement not updated';
			END IF;
	ELSEIF (_flag = _DELETE_FLAG)--delete
	THEN	
			IF EXISTS (SELECT announcement_id FROM public.tbl_web_announcement WHERE announcement_id = _announcement_id ) THEN
				DELETE FROM public.tbl_web_announcement 
				WHERE announcement_id = _announcement_id;
							sql_query :=  'SELECT json_build_object(''responseCode'',200,''responseMessage'',''announcement deleted successfully.'')::text as data;';
							raise notice 'announcement delete';
			ELSE
							sql_query :=  'SELECT json_build_object(''responseCode'',201,''responseMessage'',''announcement is not available.'')::text as data;';
							raise notice 'announcement noot updated';
			END IF;		
	ELSEIF (_flag = _FETCHID_FLAG) ---- FOR FETCH by id
	THEN
		sql_query := 'SELECT json_build_object(''responseCode'',200,''data'',COALESCE(to_json(array_agg(data1)), 
		''[]''),''responseMessage'',''ok'')::text as data
		FROM (
			SELECT  
			    announcement_title,  
				announcement_description,
				created_datetime,        
				latitude ,               
				longitude 	,			
				address ,				
				announcement_datetime	,
				role_id 				
			    from tbl_web_announcement  WHERE announcement_id ='''|| _announcement_id||'''
		     )data1;';
		raise notice 'announcement fetch by id';	 
			
	ELSEIF (_flag = _FETCH_FLAG) ---- FOR FETCH all data 
	THEN
		sql_query := 'SELECT json_build_object(''responseCode'',200,''data'',COALESCE(to_json(array_agg(data1)), 
		''[]''),''responseMessage'',''ok'')::text as data
		FROM (SELECT 
			    announcement_title,  
				announcement_description,
				created_datetime,        
				latitude ,               
				longitude 	,			
				address ,				
				announcement_datetime	,
				role_id 				
			    from tbl_web_announcement )data1;';  
		   raise notice 'announcement fetch all';	 
	END IF;
		
	RETURN QUERY EXECUTE sql_query;
		raise notice 'locha hai';
	EXCEPTION WHEN OTHERS 
	THEN
		DECLARE p_errormessage VARCHAR(4000);
		DECLARE p_errorstate VARCHAR(4000);
		DECLARE p_errorline VARCHAR(4000);

		BEGIN									
			p_errormessage:= SQLERRM;
			p_errorstate:= SQLSTATE;
			GET STACKED DIAGNOSTICS p_errorline = PG_EXCEPTION_CONTEXT;
				
			INSERT INTO tbl_error_log(error_name,error_callstack,error_method,created_on)		
			SELECT p_errorline,p_errormessage||':fn_web_crud_announcement_management',p_errorstate,timezone('Asia/Kolkata'::text, now());
			
			sql_query := 'SELECT json_build_object(''responseCode'',201,''data'',''failed'', ''responseMessage'', '''||p_errormessage||''')::text as data';
	END;
	RETURN QUERY EXECUTE sql_query;
END;
$BODY$;


-- 	select * from tbl_web_announcement
--  select fn_web_crud_announcement_management('{"flag":"create","announcement_title":"meeting2","announcement_description":"meeting2","announcement_datetime":"2222-02-02","latitude":"22.723228","longitude":"75.875230","address":"test","role_id":"2"}')
--  select fn_web_crud_announcement_management('{"flag":"update","announcement_id":"1","announcement_title":"meetingupdate","announcement_description":"meetingupd","announcement_datetime":"2222-02-02","latitude":"22.723228","longitude":"75.875230","address":"test","role_id":"2"}')
--  select fn_web_crud_announcement_management('{"flag":"fetch_id","announcement_id":"1"}')
--  select fn_web_crud_announcement_management('{"flag":"fetch"}')
--  select fn_web_crud_announcement_management('{"flag":"delete","announcement_id":"1"}')
✔all test done
	@ApiIgnore
	@RequestMapping(value = "/announcment_management", method = RequestMethod.POST)
	public ResponseEntity<?> getAnnouncementDetails(@RequestBody String json, HttpServletRequest request ) {
		try {
			String result = dashService.getAnnouncementDetails(json);
			return ResponseEntity.ok(result);
		} catch (Exception e) {
			e.printStackTrace();
			return ResponseEntity.ok(CustomMessages.getMessage(CustomMessages.RESPONSE_MESSAGE_500));
		}
------
	@ApiIgnore
	@RequestMapping(value = "/announcment_management", method = RequestMethod.POST)
	public ResponseEntity<?> getAnnouncementDetails(@RequestBody String json, HttpServletRequest request ) {
		try {
			String result = dashService.getAnnouncementDetails(json);
			return ResponseEntity.ok(result);
		} catch (Exception e) {
			e.printStackTrace();
			return ResponseEntity.ok(CustomMessages.getMessage(CustomMessages.RESPONSE_MESSAGE_500));
		}
	
	✔API CREATED 
========================================5-6--24
✔modified fetchid field


CREATE OR REPLACE FUNCTION public.fn_web_crud_announcement_management(
	userjson text)
    RETURNS TABLE(data text) 
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
    ROWS 1000

AS $BODY$
DECLARE
	_announcement_title text;
	_announcement_description text;
	_latitude double precision;
	_longitude double precision;
	_address text;
	_role_id integer;
	_announcement_datetime timestamp with time zone;
	_announcement_id int;
			
	sql_query text;
	userJsonObject JSON;
	_flag TEXT;
	_filter TEXT DEFAULT '';
	_CREATE_FLAG TEXT DEFAULT 'create';
	_DELETE_FLAG TEXT DEFAULT 'delete';
	_UPDATE_FLAG TEXT DEFAULT 'update';
	_FETCH_FLAG TEXT DEFAULT 'fetch';
	_FETCHID_FLAG TEXT DEFAULT 'fetch_id';

BEGIN
-- 	select * from tbl_web_announcement
--  select fn_web_crud_announcement_management('{"flag":"create","announcement_title":"meeting2","announcement_description":"meeting2","announcement_datetime":"2222-02-02","latitude":"22.723228","longitude":"75.875230","address":"test","role_id":"2"}')
--  select fn_web_crud_announcement_management('{"flag":"update","announcement_id":"1","announcement_title":"meetingupdate","announcement_description":"meetingupd","announcement_datetime":"2222-02-02","latitude":"22.723228","longitude":"75.875230","address":"test","role_id":"2"}')
--  select fn_web_crud_announcement_management('{"flag":"fetch_id","announcement_id":"1"}')
--  select fn_web_crud_announcement_management('{"flag":"fetch"}')
--  select fn_web_crud_announcement_management('{"flag":"delete","announcement_id":"1"}')

	raise notice '%',userjson;
	userJsonObject := cast(userjson AS JSON) ;
    
	_announcement_title := userJsonObject ->> 'announcement_title';
    RAISE NOTICE 'announcement_title: %', _announcement_title;

    _announcement_description := userJsonObject ->> 'announcement_description';
    RAISE NOTICE 'announcement_description: %', _announcement_description;

    _latitude := userJsonObject ->> 'latitude';
    RAISE NOTICE 'latitude: %', _latitude;

    _longitude := userJsonObject ->> 'longitude';
    RAISE NOTICE 'longitude: %', _longitude;

    _address := userJsonObject ->> 'address';
    RAISE NOTICE 'address: %', _address;

    _role_id := (userJsonObject ->> 'role_id')::INT;
    RAISE NOTICE 'role_id: %', _role_id;

    _announcement_datetime :=  to_timestamp(userJsonObject ->> 'announcement_datetime', 'YYYY-MM-DD');
    RAISE NOTICE 'announcement_datetime: %', _announcement_datetime;

    _flag := userJsonObject ->> 'flag';
    RAISE NOTICE 'flag: %', _flag;

    _announcement_id := (userJsonObject ->> 'announcement_id')::INT;
    RAISE NOTICE 'announcement_id: %', _announcement_id;
	
	IF (_flag = _CREATE_FLAG)-- insert
	THEN
	RAISE NOTICE 'ss';
	 	IF EXISTS (SELECT announcement_id FROM public.tbl_web_announcement WHERE (announcement_title = ''|| _announcement_title ||'' AND announcement_datetime = _announcement_datetime)  ) 
		THEN	
        	raise notice 'announcement for same date and title is already exists';
			sql_query :=  'SELECT json_build_object(''responseCode'',201,''responseMessage'',''announcement for same date and title is already exists.'')::text as data;';
		ELSE
		RAISE NOTICE 'ss _>';
			INSERT INTO public.tbl_web_announcement(
	         			announcement_title, announcement_description, announcement_datetime , latitude,  longitude,  address,  role_id, created_datetime)
	        VALUES (_announcement_title,   _announcement_description, _announcement_datetime ,_latitude, _longitude, _address, _role_id, now());
			sql_query := 'SELECT json_build_object(''responseCode'',200,''responseMessage'',''Announcement created successfully created successfully'')::text as data;';			
			raise notice 'announcement inserted';
		END IF;
	ELSEIF (_flag = _UPDATE_FLAG)
	THEN	
			IF EXISTS (SELECT announcement_id FROM public.tbl_web_announcement WHERE announcement_id = _announcement_id  )
			THEN
				UPDATE public.tbl_web_announcement
				SET announcement_title  = _announcement_title   	,         
				announcement_description= _announcement_description	,
                latitude                = _latitude					,
                longitude 				= _longitude				,
                address 				= _address					,
                announcement_datetime	= _announcement_datetime	,
                role_id 				= _role_id;

				sql_query := 'SELECT json_build_object(''responseCode'',200,''responseMessage'',''announcement updated successfully'')::text as data;';
				raise notice 'announcement updated';
			ELSE
			sql_query :=  'SELECT json_build_object(''responseCode'',201,''responseMessage'',''announcement is not available.'')::text as data;';
			raise notice 'announcement not updated';
			END IF;
	ELSEIF (_flag = _DELETE_FLAG)--delete
	THEN	
			IF EXISTS (SELECT announcement_id FROM public.tbl_web_announcement WHERE announcement_id = _announcement_id ) THEN
				DELETE FROM public.tbl_web_announcement 
				WHERE announcement_id = _announcement_id;
							sql_query :=  'SELECT json_build_object(''responseCode'',200,''responseMessage'',''announcement deleted successfully.'')::text as data;';
							raise notice 'announcement delete';
			ELSE
							sql_query :=  'SELECT json_build_object(''responseCode'',201,''responseMessage'',''announcement is not available.'')::text as data;';
							raise notice 'announcement noot updated';
			END IF;		
	ELSEIF (_flag = _FETCHID_FLAG) ---- FOR FETCH by id
	THEN
		sql_query := 'SELECT json_build_object(''responseCode'',200,''data'',COALESCE(to_json(array_agg(data1)), 
		''[]''),''responseMessage'',''ok'')::text as data
		FROM (
			SELECT  
			    announcement_title,  
				announcement_description,
				created_datetime,        
				latitude ,               
				longitude 	,			
				address ,				
				announcement_datetime	,
				role_id ,
				(SELECT role_name FROM tbl_web_role_master WHERE tbl_web_role_master.role_id = tbl_web_announcement.role_id) as role_name
			    from tbl_web_announcement  WHERE announcement_id ='''|| _announcement_id||'''
		     )data1;';
		raise notice 'announcement fetch by id';	 
			
	ELSEIF (_flag = _FETCH_FLAG) ---- FOR FETCH all data 
	THEN
		sql_query := 'SELECT json_build_object(''responseCode'',200,''data'',COALESCE(to_json(array_agg(data1)), 
		''[]''),''responseMessage'',''ok'')::text as data
		FROM (SELECT 
				announcement_id	,
			    announcement_title,  
				announcement_description,
				created_datetime,        
				latitude ,               
				longitude 	,			
				address ,				
				announcement_datetime	,
				role_id ,
				(SELECT role_name FROM tbl_web_role_master WHERE tbl_web_role_master.role_id = tbl_web_announcement.role_id) as role_name
			    from tbl_web_announcement )data1;';  
		   raise notice 'announcement fetch all';	 
	END IF;
		
	RETURN QUERY EXECUTE sql_query;
		raise notice 'locha hai';
	EXCEPTION WHEN OTHERS 
	THEN
		DECLARE p_errormessage VARCHAR(4000);
		DECLARE p_errorstate VARCHAR(4000);
		DECLARE p_errorline VARCHAR(4000);

		BEGIN									
			p_errormessage:= SQLERRM;
			p_errorstate:= SQLSTATE;
			GET STACKED DIAGNOSTICS p_errorline = PG_EXCEPTION_CONTEXT;
				
			INSERT INTO tbl_error_log(error_name,error_callstack,error_method,created_on)		
			SELECT p_errorline,p_errormessage||':fn_web_crud_announcement_management',p_errorstate,timezone('Asia/Kolkata'::text, now());
			
			sql_query := 'SELECT json_build_object(''responseCode'',201,''data'',''failed'', ''responseMessage'', '''||p_errormessage||''')::text as data';
	END;
	RETURN QUERY EXECUTE sql_query;
END;
$BODY$;



































=============================================================13/6/24
-- FUNCTION: public.fn_web_search_layer(text)

-- DROP FUNCTION public.fn_web_search_layer(text);

CREATE OR REPLACE FUNCTION public.fn_web_search_layer(
	userjson text)
    RETURNS TABLE(data text) 
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
    ROWS 1000

AS $BODY$
DECLARE
	_keyword text;
	_table_name text;
exists_flag BOOLEAN;
			
	sql_query text;
	userJsonObject JSON;
		--select * from public."metro_station_old" limit 10
BEGIN	-- select from fn_web_search_layer('{"keyword":"mint","table_name":"metro_station_old"}')
		-- SELECT * from tbl_parent_layer_master 
	-- 		-- SELECT * from tbl_web_layer_master 
		-- SELECT * from tbl_error_log order by created_on desc limit 10
		
-- 		SELECT json_build_object('responseCode', 200, 'data', COALESCE(to_json(array_agg(data1)), '[]'), 'responseMessage', 'ok')::text as data
--                            FROM (
--                                SELECT distinct ward,name,uid,layer,prabhag,height_m,zone,survey_status,geom FROM public.bridge_old WHERE name ILIKE  '%f%'
--                            ) data1;

	raise notice '%',userjson;
   	userJsonObject=jsonb_strip_nulls(CAST(userjson AS JSONB));
    RAISE NOTICE 'announcement_title: %', userJsonObject;
	_keyword := userJsonObject ->> 'keyword';
    RAISE NOTICE 'announcement_title: %', _keyword;
	_table_name:= userJsonObject ->> 'table_name';
    RAISE NOTICE 'announcement_title: %', _table_name;
	
	

    EXECUTE format('
        SELECT EXISTS (
            SELECT 1 FROM %I WHERE REPLACE(REPLACE(name, '' '', ''''), ''_'', '''') ILIKE %L
        )', _table_name, '%' || REPLACE(REPLACE(_keyword, ' ', ''), '_', '') || '%') INTO exists_flag;

 
    IF exists_flag THEN
        sql_query := format('
            SELECT json_build_object(
                ''responseCode'', 200, 
                ''data'', COALESCE(to_json(array_agg(data1)), ''[]''), 
                ''responseMessage'', ''ok''
            )::text as data
            FROM (
                SELECT DISTINCT 
                    gid,
                    name,
                    geom
                FROM %I
                WHERE REPLACE(REPLACE(name, '' '', ''''), ''_'', '''') ILIKE %L
            ) data1;', 
            _table_name, '%' || REPLACE(REPLACE(_keyword, ' ', ''), '_', '') || '%'
        );

        RAISE NOTICE 'Query: %', sql_query;
        RAISE NOTICE 'Rows exist in table % matching the keyword %.', _table_name, _keyword;
        RETURN QUERY EXECUTE sql_query;
    ELSE
        sql_query := '
            SELECT json_build_object(
                ''responseCode'', 201, 
                ''responseMessage'', ''layer name does not exist.''
            )::text as data;
        ';

        RAISE NOTICE 'No rows found in table % matching the keyword %.', _table_name, _keyword;
        RETURN QUERY EXECUTE sql_query;
    END IF;

	RAISE NOTICE 'qq-> %' , sql_query;
    -- Execute the query
  
    -- Execute the query

	EXCEPTION WHEN OTHERS 
	THEN
		DECLARE p_errormessage VARCHAR(4000);
		DECLARE p_errorstate VARCHAR(4000);
		DECLARE p_errorline VARCHAR(4000);

		BEGIN									
			p_errormessage:= SQLERRM;
			p_errorstate:= SQLSTATE;
			GET STACKED DIAGNOSTICS p_errorline = PG_EXCEPTION_CONTEXT;
				
			INSERT INTO tbl_error_log(error_name,error_callstack,error_method,created_on)		
			SELECT p_errorline,p_errormessage||':fn_web_search_layer',p_errorstate,timezone('Asia/Kolkata'::text, now());
			
			sql_query := 'SELECT json_build_object(''responseCode'',201,''data'',''failed'', ''responseMessage'', '''||p_errormessage||''')::text as data';
	END;
	RETURN QUERY EXECUTE sql_query;
END;
$BODY$;

ALTER FUNCTION public.fn_web_search_layer(text)
    OWNER TO postgres;

````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
		@ApiIgnore
	@RequestMapping(value = "/search_layer", method = RequestMethod.POST)
	public ResponseEntity<?> searchLayer(@RequestBody String json, HttpServletRequest request ) {
		try {
			String result = dashService.searchLayer(json);
			return ResponseEntity.ok(result);
		} catch (Exception e) {
			e.printStackTrace();
			return ResponseEntity.ok(CustomMessages.getMessage(CustomMessages.RESPONSE_MESSAGE_500));
		}
	}
````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
	@Override
	public String searchLayer(String json) {
		String result;
		try {
			result = jdbcTemplate.queryForObject(SPUtility.FN_WEB_SEARCH_LAYER, new Object[] { json },
					String.class);
			return result;
		} catch (Exception e) {
			LoggerUtil.setError(this.getClass(), "Error in getDrawFeatureData ");
			e.printStackTrace();
			return null;
		}
	}
✔seach api

________________________________________________________________________________________________________________________________________________________________________________
14/6/24

-- FUNCTION: public.fn_web_get_point_layer_data()

-- DROP FUNCTION public.fn_web_get_point_layer_data();

CREATE OR REPLACE FUNCTION public.fn_web_get_point_layer_data(
	)
    RETURNS TABLE(data text) 
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
    ROWS 1000

AS $BODY$
DECLARE-- SELECT fn_web_get_point_layer_data();
			-- SELECT * from public.tbl_web_layer_master
			-- SELECT * from tbl_error_log order by created_on desc limit 10
			-- select * from ward_boundary
			
		sql_query text;
		
	BEGIN
			

			raise notice 'cs%', sql_query;
			sql_query := 'SELECT json_build_object(''responseCode'', 200, ''data'', COALESCE(to_json(array_agg(data1)), ''[]''), ''responseMessage'', ''ok'')::text as data
             FROM (
                 SELECT
                     id,
                     layer_name,
                     table_name,
                     status,
                     service_url
                 FROM tbl_web_layer_master
                 WHERE status IS TRUE
                   AND geometry_type = ''Point''
                 ORDER BY layer_name
             ) data1;';

		    raise notice '%', sql_query;
		RETURN QUERY EXECUTE sql_query;							 
			EXCEPTION WHEN OTHERS 
			THEN
				DECLARE p_errormessage VARCHAR(4000);
				DECLARE p_errorstate VARCHAR(4000);
				DECLARE p_errorline VARCHAR(4000);

				BEGIN									
					p_errormessage:= SQLERRM;
					p_errorstate:= SQLSTATE;
					GET STACKED DIAGNOSTICS p_errorline = PG_EXCEPTION_CONTEXT;

					INSERT INTO public.tbl_error_log(error_name,error_callstack,error_method,created_on)		
					SELECT p_errorline,p_errormessage||':fn_web_get_point_layer_data',p_errorstate,timezone('Asia/Kolkata'::text, now());

				END;
				sql_query := 'SELECT json_build_object(''responseCode'',201,''responseMessage'',''failed'')::text as data';
				RETURN QUERY EXECUTE sql_query;
	END;
$BODY$;

ALTER FUNCTION public.fn_web_get_point_layer_data()
    OWNER TO postgres;
`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
	@ApiIgnore
	@RequestMapping(value = "/get_point_layers", method = RequestMethod.GET)
	public ResponseEntity<?> getPointLayer( HttpServletRequest request ) {
		try {
			String result = dashService.getPointLayer();
			return ResponseEntity.ok(result);
		} catch (Exception e) {
			e.printStackTrace();
			return ResponseEntity.ok(CustomMessages.getMessage(CustomMessages.RESPONSE_MESSAGE_500));
		}
	}
```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
	@Override
	public String getPointLayer( ) {
		String result;
		try {
			result = jdbcTemplate.queryForObject(SPUtility.FN_WEB_GET_POINT_LAYER, new Object[] {  },
					String.class);
			return result;
		} catch (Exception e) {
			LoggerUtil.setError(this.getClass(), "Error in getDrawFeatureData ");
			e.printStackTrace();
			return null;
		}
	}
	


✔get point layer api done



































________________________________________________________________________________________________________________________________________________________________________________
<div style="display:flex; justify-content: start;">
  <kendo-dropdownlist rounded="full"
  [data]="listItems"
  [(ngModel)]="selectedValue" 
>select</kendo-dropdownlist>
<div ></div>
<kendo-autocomplete #autocomplete [data]="searchResultNames"  (change)="onsearchchange($event)">
</kendo-autocomplete>

</div>
✔added kendo auto complete search bar

```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
 getSearchResultNames(): any[] {
    return this.searchResult.map(result => result.name);
  }
  onsearchchange(event: any) {
    const searchKeyword = event.target.value;
     this.searchResultNames = []; 
    if (searchKeyword !== '') {
      this.searchResult = []; 
     
      this.loading = true;
  
      console.log(this.layerData);
      this.layerData.forEach(element => {
        if (element.layer_name === this.selectedValue) {
          
            
            const formData = {
              "keyword":searchKeyword,
              "table_name": element.table_name
            };
            console.log('formdata',formData)
            this.commonService.searchChildlayer(JSON.stringify(formData)).subscribe(
              (data: any) => {
               
                if (data.responseCode === 200) {
                  const result = data.data;
                  result.forEach(row=> {
                    console.log("row",row);
                    this.searchResult.push({name:row.name,geom:row.geom});
                    console.log("search array",this.searchResult);
                    this.searchResultNames.push(row.name);
                  });
                 
                }
                this.loading = false; // Reset loading state
              },
              (error) => {
                console.error("API Error:", error);
                this.toastr.error('Something went wrong while fetching roles.');
                this.loading = false; // Reset loading state
              }
            );
         
      
        }
      });
      console.log(this.searchResult);
    }

✔integrated ui with api

🤔issue with getting data and loading into search bar -exploring alternatives

__________________________________________________________________________________________________________________________________________________________________________________________________________

18/6/24
// angular import
import { Component, OnInit } from '@angular/core';

// project import
import { SharedModule } from 'src/app/theme/shared/shared.module';
import { MapController } from '../utils/mapController';
import { DropDownsModule } from "@progress/kendo-angular-dropdowns";
import { InputsModule } from "@progress/kendo-angular-inputs";

import * as Cesium from 'cesium';
import { CommonsService } from 'src/app/services/commons.service';
import { ToastrService } from 'ngx-toastr';

declare const AmCharts: any;

@Component({
  selector: 'app-dashboard',
  standalone: true,
  imports: [SharedModule, DropDownsModule, InputsModule],
  templateUrl: './dashboard.component.html',
  styleUrls: ['./dashboard.component.scss'],
  providers: [MapController]
})
export default class DashboardComponent implements OnInit {
  foods = { "values": [1, 2, 3, 4] };
  //public mapConroller: any;
  public viewer: any;
  selectedValue: any;
  public listItems:Array<string> [];
  searchList: Array<string> = [];
  currentLayerName: any;
  layerData: any;
  searchResult: { name: any, geom: any }[] = [];
  loading: boolean;
  searchResultNames: any[] = [];
  layerName: any;
  constructor(private mapConroller: MapController, private commonService: CommonsService, private toastr: ToastrService) {
    //this.mapConroller = mapConroller1;
  }

  ngOnInit() {
    this.mapConroller.initMap();

    this.mapConroller.temp_data_new();
    this.loadDropdown();
  }
  loadDropdown() {
    this.commonService.getLayerData().subscribe(
      (data: any) => {
        console.log("load layers", data);
        if (data.responseCode === 200) {
          this.layerData = data.data;
          this.listItems = this.layerData.map(element => element.layer_name);
          console.log('Loaded layer names:', this.listItems);
        } else {
          console.error("Error fetching layers:", data.responseMessage);
          this.toastr.error('Error fetching layers');
        }
      },
      (error) => {
        console.error("API Error:", error);
        this.toastr.error('Something went wrong while fetching layers.');
      }
    );
  }
  
  onselect(parentlayer) {

    if (parentlayer!='') {
console.log(this.selectedValue);

    }
  }
  getSearchResultNames(): any[] {
    return this.searchResult.map(result => result.name);
  }
  onsearchchange(event: any) {
    const searchKeyword = event.target.value;
     this.searchResultNames = []; 
    if (searchKeyword !== '') {
      this.searchResult = []; 
     
      this.loading = true;
  
      console.log(this.layerData);
      this.layerData.forEach(element => {
        if (element.layer_name === this.selectedValue) {
          
            
            const formData = {
              "keyword":searchKeyword,
              "table_name": element.table_name
            };
            console.log('formdata',formData)
            this.commonService.searchChildlayer(JSON.stringify(formData)).subscribe(
              (data: any) => {
               
                if (data.responseCode === 200) {
                  const result = data.data;
                  result.forEach(row=> {
                    console.log("row",row);
                    this.searchResult.push({name:row.name,geom:row.geom});
                    console.log("search array",this.searchResult);
                    this.searchResultNames.push(row.name);
                  });
                 
                }
                this.loading = false; // Reset loading state
              },
              (error) => {
                console.error("API Error:", error);
                this.toastr.error('Something went wrong while fetching roles.');
                this.loading = false; // Reset loading state
              }
            );
         
      
        }
      });
      console.log(this.searchResult);
    }



  }
}

```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
<div style="display:flex; justify-content: start;">
  


  <kendo-dropdownlist rounded="full"
  [data]="listItems"
  [(ngModel)]="selectedValue" 
>select</kendo-dropdownlist>

<kendo-autocomplete
  #autocomplete
  [data]="searchResultNames"
  (filterChange)="onSearchInputChange($event)"
  [filterable]="true"

  (valueChange)="onValueChange($event)"
  [(value)]="selectedOption"
 
></kendo-autocomplete>
</div>


<div id="cesiumContainer"></div>

++++// angular import
import { Component, OnInit, ViewChild, OnDestroy } from '@angular/core';

// project import
import { SharedModule } from 'src/app/theme/shared/shared.module';
import { MapController } from '../utils/mapController';
import { DropDownsModule } from "@progress/kendo-angular-dropdowns";
import { InputsModule } from "@progress/kendo-angular-inputs";

import * as Cesium from 'cesium';
import { CommonsService } from 'src/app/services/commons.service';
import { ToastrService } from 'ngx-toastr';
import { debounceTime, distinctUntilChanged, switchMap, tap } from 'rxjs/operators';
import { AutoCompleteComponent } from '@progress/kendo-angular-dropdowns';
import { Subject, forkJoin, of } from 'rxjs';
import {  Subscription } from 'rxjs';

declare const AmCharts: any;

@Component({
  selector: 'app-dashboard',
  standalone: true,
  imports: [SharedModule, DropDownsModule, InputsModule],
  templateUrl: './dashboard.component.html',
  styleUrls: ['./dashboard.component.scss'],
  providers: [MapController]
})
export default class DashboardComponent implements OnInit, OnDestroy {
  foods = { "values": [1, 2, 3, 4] };
  //public mapConroller: any;
  public viewer: any;
  selectedValue: any;
  public listItems: Array<string> = [];
  searchList: Array<string> = [];
  currentLayerName: any;
  layerData: any;
  searchResult: { name: any, geom: any }[] = [];
  loading: boolean;
  searchResultNames: any[] = [];
  layerName: any;
  
  // searchInput = new Subject<string>();
  private searchInput = new Subject<any>()
  subscription: Subscription = this.searchInput.pipe(debounceTime(1200), distinctUntilChanged(), tap(value => console.log("debounced value: " + value))).subscribe();
  @ViewChild('autocomplete', { static: true }) autocomplete: AutoCompleteComponent;
  selectedGeom: any;
  selectedName: any;
  selectedOption:any;
  
  constructor(
    private mapController: MapController, 
    private commonService: CommonsService, 
    private toastr: ToastrService
  ) {
    
  }

  ngOnInit() {
    this.mapController.initMap();
    this.mapController.temp_data_new();
    this.loadDropdown();
    this.searchInput.pipe(
      debounceTime(300),
      distinctUntilChanged(),
      switchMap((searchTerm: string) => of(this.performSearch(searchTerm)))
    ).subscribe();
  }
  
  ngOnDestroy() {
    this.searchInput.complete();
  }
  
  loadDropdown() {
    this.commonService.getLayerData().subscribe(
      (data: any) => {
        console.log("load layers", data);
        if (data.responseCode === 200) {
          this.layerData = data.data;
          this.listItems = this.layerData.map(element => element.layer_name);
          console.log('Loaded layer names:', this.listItems);
        } else {
          console.error("Error fetching layers:", data.responseMessage);
          this.toastr.error('Error fetching layers');
        }
      },
      (error) => {
        console.error("API Error:", error);
        this.toastr.error('Something went wrong while fetching layers.');
      }
    );
  }
  
  onSearchInputChange(eventValue: any) {
    
    this.searchInput.next(eventValue)

    console.log("logging search value", eventValue);
    console.log("selectedOption", this.selectedOption);

    this.performSearch(eventValue);
 
    
  }
  onValueChange(event: string) {
    const selectedItem = this.searchResult.find(item => item.name === event);
    if (selectedItem) {
      this.selectedValue = selectedItem;
      alert(`Selected: ${selectedItem.name}`);
    }
  }
  onSelectionChange() {
    // alert(this.selectedOption);
    // const selectedItem = this.searchResult.find(item => item.name === event);
    // if (selectedItem) {
    //   this.selectedValue = selectedItem;
    // }
  }

  performSearch(searchTerm: string) {
    const matchingLayers = this.layerData.filter(element => element.layer_name === this.selectedValue);
    this.searchResult = [];
    this.searchResultNames = [];
    this.loading = true; 
    const searchObservables = matchingLayers.map(element => {
      const formData = {
        keyword: searchTerm,
        table_name: element.table_name
      };
      return this.commonService.searchChildlayer(JSON.stringify(formData));
    });
    // ForkJoin to wait for all observables to complete
    forkJoin(searchObservables).subscribe(
      (results: any[]) => {
        results.forEach(data => {
          if (data.responseCode === 200) {
            const result = data.data;
            console.log('search result',result)
            result.forEach(row => {
              this.searchResult.push({ name: row.name, geom: row.geom });
              console.log('searchResult result',this.searchResult)
              this.searchResultNames.push(row.name);

              console.log('searchResultNames result', this.searchResultNames)
            });
          } else {
            console.error("API Error:", data); // Log API error
            this.toastr.error('name not found');
          }
        });
        this.loading = false; // Reset loading state
      },
      error => {
        console.error("API Error:", error);
        this.toastr.error('Something went wrong while fetching data.');
        this.loading = false; // Reset loading state
      }
    );
  }

  
}
✔debouncing done




































____________________________________________________________________________________________________________________________________________________________________________________
19/6/24

moving search from dashboard


<!-- <div appCesium></div> -->
<div style="display:flex; justify-content: start;">
  


  <kendo-dropdownlist rounded="full"
  [data]="listItems"
  [(ngModel)]="selectedValue" 
>select</kendo-dropdownlist>

<kendo-autocomplete
  #autocomplete
  [data]="searchResultNames"
  (filterChange)="onSearchInputChange($event)"
  [filterable]="true"

  (valueChange)="onValueChange($event)"
  [(value)]="selectedOption"
 
></kendo-autocomplete>
</div>
<div id="map"></div>

<div class="SubCursorBar">
  <div class="content">
    <div class="DisabledContent" is-disabled="false">
      <div class="CursorBarControl" is-disabled="false" is-selected="true" title="Pan">
        
        <mat-button-toggle-group name="ingredients" aria-label="Ingredients">
          <mat-button-toggle (click)="gotoFtn()"  title="Go-To"><i class="fas fa-map-marker-alt fa-2x"></i></mat-button-toggle>
          <mat-button-toggle (click)="addLineStringMeasurement()"  title="LineString"><mat-icon>timeline</mat-icon></mat-button-toggle>
          <mat-button-toggle (click)="addPolygonMeasurement()" title="Polygon" ><i class="fas fa-draw-polygon fa-2x"></i></mat-button-toggle>
            <mat-button-toggle (click)="featureInfo()" title="Info"><mat-icon>info</mat-icon></mat-button-toggle>
            <mat-button-toggle title="Take Screenshot" (click)="takeSS()"><i class="fas fa-camera-retro fa-2x"></i></mat-button-toggle>
            <mat-button-toggle (click)="clearDrawnFeature()" title="Erase"><i class="fas fa-eraser fa-2x"></i></mat-button-toggle>
       
        </mat-button-toggle-group>
      </div>
    </div>
    </div>
</div>

<button type="button" (click)="togglePanel()">Layer</button>
<div class="row" [@widthGrow]="state">
  <div class="col-sm-12">

    <div class="layer-popup resize-popup" id="layers">
      <div class="layers" id="layersheader">
        <div class="layer-title-main w-100 align-items-center">
          <h3 class="layer-title me-auto">
            <label id="total_layer_cnt" style="color: aliceblue;" data-translate="_layer_popup">Layer</label>
          </h3> 

          <a class="layer-close side-layer-resize ms-2 me-2" href="javascript:void(0);">
            <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1"
              id="Layer_1" x="0px" y="0px" width="16" height="16" viewBox="0 0 50 50" enable-background="new 0 0 50 50"
              xml:space="preserve">
              <g>
                <g>

                  <polyline fill-rule="evenodd" clip-rule="evenodd" fill="none" stroke="#FFFFFF" stroke-width="3.5"
                    stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="22.9256"
                    points="    47.5,1.832 22.191,27.15 22.191,16.419   " />

                  <line fill-rule="evenodd" clip-rule="evenodd" fill="none" stroke="#FFFFFF" stroke-width="3.5"
                    stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="22.9256" x1="22.191" y1="27.15"
                    x2="32.919" y2="27.15" />
                </g>

                <polyline fill-rule="evenodd" clip-rule="evenodd" fill="none" stroke="#FFFFFF" stroke-width="3.5"
                  stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="22.9256"
                  points="   44.878,18.451 44.878,48.168 2.5,48.168 2.5,5.802 31.722,5.802  " />
              </g>
            </svg>
          </a>

        </div>
        <div class="layer-content" id="layer_master">
          <div class="accordion" id="accordionExample">
            <div *ngFor="let parentLayer of data.data">
              <div class='accordion-item'>
                <h2 class='accordion-header'>
                  <button class='accordion-button collapsed' type='button'
                    (click)="toggleCollapse(parentLayer.parent_layer_id)">
                    {{ parentLayer.parent_layer_name }}
                  </button>
                </h2>
                <div [id]="'panelsStayOpen-collapse' + parentLayer.parent_layer_id" class='accordion-collapse collapse'>
                  <div class='accordion-body'>
                    <div *ngFor="let childLayer of parentLayer.child_layer">
                      <div class="form-check">
                        <input class="form-check-input" name="child_layer_name" (change)="showHideData($event)"
                        [attr.layer_id]="childLayer.layer_id"
                          [attr.mobile_service_url]="childLayer.mobile_service_url"
                          [attr.parent_layer]="childLayer.parent_layer" [attr.defination]="childLayer.defination"
                          [attr.layer_name]="childLayer.layer_name"
                          [attr.combined_service]="childLayer.is_combined_service"
                          [attr.service-url]="childLayer.service_url" [attr.dataid]="childLayer.geometry_type"
                          data-id="Image" type="checkbox" [attr.value]="childLayer.layer_id"
                          [attr.Id]="'flexCheckDefault' + childLayer.layer_id"
                          [attr.layer_name]="childLayer.layer_name">
                        <label class="form-check-label">{{ childLayer.layer_name }}</label>
                      </div>
                    </div>  
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

      </div>
    </div>

  </div>
</div>

=================================================
import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';
import { SharedModule } from 'src/app/theme/shared/shared.module';
import { RouterOutlet } from '@angular/router';
import { CommonModule } from '@angular/common'; import { NgModule } from '@angular/core';
import { trigger, transition, style, animate, state } from '@angular/animations';
import * as glob from '../../../environments/environment';
import { HttpHeaders, HttpClient } from '@angular/common/http';
import { CommonsService } from 'src/app/services/commons.service';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatIconModule } from '@angular/material/icon';
import axios from 'axios';
import html2canvas from 'html2canvas';
// search 
import { ToastrService } from 'ngx-toastr';
import { debounceTime, distinctUntilChanged, switchMap, tap } from 'rxjs/operators';
import { AutoCompleteComponent } from '@progress/kendo-angular-dropdowns';
import { Subject, forkJoin, of } from 'rxjs';
import {  Subscription } from 'rxjs';
import { DropDownsModule } from "@progress/kendo-angular-dropdowns";
import { InputsModule } from "@progress/kendo-angular-inputs";


@Component({
  selector: 'app-map',
  standalone: true,
  imports: [SharedModule, MatButtonToggleModule, MatIconModule,SharedModule, DropDownsModule, InputsModule],
  templateUrl: './2d.component.html',
  styleUrls: ['./2d.component.scss'],
  animations: [
    trigger('widthGrow', [
      state('closed', style({
        height: 0,
      })),
      state('open', style({
        height: 500
      })),
      transition('* => *', animate(900))
    ]),
  ]
})

export default class _2D {
  
  data: any;
  ol: any = window['ol'];
  state = "closed";
  osm: any;
  map: any;
  table_name: any
  mobile_service_url: any
  current_layer: any;
  layer_id: any
  Measuredraw: any = null;
  GoToVectorLayer: any = null;
  location_mark : any;
  view: any;
  clickHandler: any;

  curr_layer_source_arr: any[] = [];
  curr_layer_source: any =  null;
  goto_click = false;
  info_click = false;

  projection = this.ol.proj.get('EPSG:3857');
  projectionExtent = this.projection.getExtent();
  size = this.ol.extent.getWidth(this.projectionExtent) / 256;
  resolutions = new Array(25);
  matrixIds = new Array(25);
  map_layers: any[] = [];
  vector_arr: any[] = [];
  drawsource: any;

  drawvector: any;
  // search
  selectedValue: any;
  public listItems: Array<string> = [];
  searchList: Array<string> = [];
  currentLayerName: any;
  layerData: any;
  searchResult: { name: any, geom: any }[] = [];
  loading: boolean;
  searchResultNames: any[] = [];
  layerName: any;
  
 


  container: any = document.getElementById('popup') as HTMLElement;
  content: any = document.getElementById('popup-content') as HTMLElement;
  closer: any = document.getElementById('popup-closer') as HTMLElement;
  calculated_measurement: any = "";

  overlay = new this.ol.Overlay({
    element: this.container,
    autoPan: {
      animation: {
        duration: 250,
      },
    },
  });

  gridarr: any[] = [];
  gridInfoKeys: any;

   // searchInput = new Subject<string>();
   private searchInput = new Subject<any>()
   subscription: Subscription = this.searchInput.pipe(debounceTime(1200), distinctUntilChanged(), tap(value => console.log("debounced value: " + value))).subscribe();
   @ViewChild('autocomplete', { static: true }) autocomplete: AutoCompleteComponent;
   selectedGeom: any;
   selectedName: any;
   selectedOption:any;
 
   source = new this.ol.source.Vector();
 
   vector = new this.ol.layer.Vector({
     source: this.source,
     style: new this.ol.style.Style({        
       stroke: new this.ol.style.Stroke({
         color: '#0e97fa',
         width:4
       })
     })
   });

  private baseUrl1 = glob.environment.baseUrl;
  constructor(private http: HttpClient, private commonService: CommonsService,  private toastr: ToastrService) {

   }

  ngOnInit(): void {

    this.get_layer_panel_data("2D", "");

    this.osm = new this.ol.layer.Tile({
      source: new this.ol.source.OSM()
    });

    this.view = new this.ol.View({
      projection: 'EPSG:3857',
      center: this.ol.proj.fromLonLat([72.893189, 19.076986]),
      zoom: 12,
    });

    this.map = new this.ol.Map({
      layers: [this.osm],
      target: 'map',
      view: this.view
    });

    this.map.addLayer(this.vector);		

    for (let z = 0; z < 25; ++z) {
      this.resolutions[z] = this.size / Math.pow(2, z);
      this.matrixIds[z] = z;
    }
    this.map.addOverlay(this.overlay);
    //this.map.addLayer(this.drawvector);
// search
this.loadDropdown();
this.searchInput.pipe(
  debounceTime(300),
  distinctUntilChanged(),
  switchMap((searchTerm: string) => of(this.performSearch(searchTerm)))
).subscribe();

  }
  ngOnDestroy() {
    this.searchInput.complete();
  }


  toggleCollapse(parentLayerId: number) {
    const collapseId = 'panelsStayOpen-collapse' + parentLayerId;
    const collapseElement = document.getElementById(collapseId);
    if (collapseElement) {
      collapseElement.classList.toggle('show');
    }
  }

  togglePanel() {
    (this.state == "closed") ? this.state = "open" : this.state = "closed";
  }


  get_layer_panel_data(pageName, stateId) {
    this.data = [];
    var formData = {
      flag: "fetch_all",
      layer_type: "2D"
    }


    this.commonService.getLayerAndImagePanel(formData).subscribe((data: any) => {
      this.data = data;
      console.log(this.data);
    });


  }
  url: any;
  layer_name: any;
  all_layer = new Array();

  showHideData(event) {
    this.url = event.target.getAttribute("service-url");
    this.layer_name = event.target.getAttribute("layer_name");
    this.layer_id = event.target.getAttribute("layer_id");

    const flag_status =           event.target.getAttribute("dataid");
    const service_url =           event.target.getAttribute("service-url");
    const mobile_service_url =    event.target.getAttribute("mobile_service_url");
    const is_combined_service =   event.target.getAttribute("combined_service");
    const is_info_popup =         event.target.getAttribute("is_info_popup");
    const is_attribute_info =     event.target.getAttribute("is_attribute_info");
    const layer_name =            event.target.getAttribute("layer_name");
    const defination =            event.target.getAttribute("defination");
    const parent_layer =          event.target.getAttribute("parent_layer");
    const table_name =            event.target.getAttribute("value");


    if (event.target.checked == true) {


      let curr_layer_source = new this.ol.source.TileWMS({
        url: service_url,
                    params: { 'LAYERS': "MIDC:" + table_name , 'TILED': true },
                    serverType: 'geoserver',
                    transition: 0, 
        })
      
      this.curr_layer_source_arr.push(curr_layer_source);
      
      let current_layer:any = new this.ol.layer.Tile({
        source: curr_layer_source
      })

            this.map.addLayer(current_layer);
            this.map_layers[table_name] = current_layer;


    }
    else {

      this.map.removeLayer(this.map_layers[table_name]);
      if (this.all_layer.includes(this.layer_name)) {
        delete this.all_layer[this.layer_id];
      }
    }
  }


  /** GOTO STARTS */


  gotoFtn() {

    if (this.GoToVectorLayer != null) {
      this.map.removeLayer(this.GoToVectorLayer);
    }


    if(this.goto_click == true){
      this.goto_click = false;
    }
    else{
      this.goto_click = true;
    }
    
    this.info_click = false;

    this.clickHandler = (evt) => {



      if (!this.goto_click) {
        return;
      }
      else {
        if (this.GoToVectorLayer != null) {
          this.map.removeLayer(this.GoToVectorLayer);
        }

        console.info(evt.pixel);
        console.info(this.map.getPixelFromCoordinate(evt.coordinate));
        console.info(this.ol.proj.fromLonLat(evt.coordinate));

        var know_your_coordinate = this.ol.proj.fromLonLat(evt.coordinate, 'EPSG:4326', 'EPSG:3857');

        console.log(know_your_coordinate);
        const iconFeature = new this.ol.Feature({
          geometry: new this.ol.geom.Point(know_your_coordinate)
        });

        const vectorSource = new this.ol.source.Vector({
          features: [iconFeature],
        });

        this.GoToVectorLayer = new this.ol.layer.Vector({
          source: vectorSource,
          //style: location_mark,
        });
        this.map.addLayer(this.GoToVectorLayer);


        this.view.animate({
          projection: 'EPSG: 4326',
          center: [know_your_coordinate[0], know_your_coordinate[1]],
          duration: 2000,
          zoom: 20
        });
      }

    }

    this.map.on('click', this.clickHandler);

  }

  /** INFO STARTS */

  featureInfo() {

    this.info_click = true;
    this.goto_click = false;

    if (!this.info_click) {
      return;
    }
    else {



      this.clickHandler = (evt) => {

        var clickedFeatures = [];
        this.map.forEachFeatureAtPixel(evt.pixel, function (feature) {
          clickedFeatures.push(feature);
        });

        for (let k = 0; k < this.curr_layer_source_arr.length; k++) {
          const viewResolution = /** @type {number} */ (this.view.getResolution());
          const url = this.curr_layer_source_arr[k].getFeatureInfoUrl(evt.coordinate, viewResolution, 'EPSG:3857', { 'INFO_FORMAT': 'application/json' });
          if (url) {

            axios.get(url)
              .then(response => {

                if(response.data.features[0].properties != null || response.data.features[0].properties != ""){

                  this.gridInfoKeys = Object.keys(response.data.features[0].properties);


                    this.gridarr = response.data.features[0].properties;

                }

                var id = document.querySelectorAll('#tbl_info');
                id.forEach(e => e.remove());

                var content = '<table id="property_tbl" class="table table-striped ng-tns-c3968409143-0" style="display: block;"><tbody _ngcontent-ng-c3968409143="" class="ng-tns-c3968409143-0">';

                for (var i = 0; i < this.gridInfoKeys.length; i++) {

                  if (this.gridInfoKeys[i] != 'orientation') {
                    
                    this.gridInfoKeys[i].replace("/_/g" , " ");

                    content += '<tr><th>' + this.gridInfoKeys[i] + '</th>' + '<td>' + this.gridarr[this.gridInfoKeys[i]] + '</td></tr>';
                    
                  }

                }

                this.addPropertyInfoPopup(content , evt.coordinate);

                console.log(response);
              })
              .catch(error => {

                console.error(error);
              });
          }
        }

      }
    }

    this.map.on('click', this.clickHandler);

  }


  /** INFO ENDS */


  takeSS(){

    var captureElement: any = document.querySelector("#map");

    html2canvas(captureElement , {allowTaint: false, useCORS: true,}).then((canvas) => {
   
      const imageData = canvas.toDataURL("image/png");

      const link = document.createElement("a");
      link.setAttribute("download", "Map.png");
      link.setAttribute("href", imageData);
      link.click();
    });
  
  }

  /** GOTO ENDS */

  addDrawInteraction(geometryType) {   

    this.drawsource = new this.ol.source.Vector({ wrapX: false });

    this.drawvector = new this.ol.layer.Vector({
      source: this.drawsource,
      style: new this.ol.style.Style({        
        stroke: new this.ol.style.Stroke({
          color: '#0e97fa',
          width:4
        })
      })
    });


    this.Measuredraw = new this.ol.interaction.Draw({
      source: this.drawsource,
      //type: geometryType,
      type: /** @type {ol.geom.GeometryType} */ (geometryType)
    });
    this.map.addInteraction(this.Measuredraw);
    this.map.addLayer(this.drawvector);
    
    this.vector_arr.push(this.drawvector);
    var measurementFormatted;
    this.Measuredraw.on('drawstart', function (event) {
      

      event.feature.on('change', function (event) {
        var measurement = geometryType === 'Polygon' ? event.target.getGeometry().getArea() : event.target.getGeometry().getLength();

        measurementFormatted = measurement > 1000 ? (measurement / 1000).toFixed(2) + 'km' : measurement.toFixed(2) + 'm';

        console.log(measurementFormatted);

      });
    });

    this.Measuredraw.on('drawend', (event) => {
      const geometry = event.feature.getGeometry();
      const coordinate = geometry.getLastCoordinate();

      if (measurementFormatted) {
        this.addPopupOverlay(measurementFormatted, coordinate);
      }

    });
  }

  clearDrawnFeature(){

    if (this.Measuredraw != null) {
      this.map.removeInteraction(this.Measuredraw);
      this.Measuredraw = null; 
    }
  
    var id = document.querySelectorAll('#ol-popup');
    id.forEach(e => e.remove());

    var id = document.querySelectorAll('#tbl_info');
    id.forEach(e => e.remove());
   
    console.log(this.vector_arr);

    for (var i = 0; i < this.vector_arr.length; i++) {      
      this.map.removeLayer(this.vector_arr[i]); 
    }
  

    this.vector_arr = [];
  
    this.map.removeLayer(this.GoToVectorLayer);

  }

  addPopupOverlay(content: string, coordinate: any): void {
    
    const popupElement = document.createElement('div');
    popupElement.id = 'ol-popup';
    popupElement.innerHTML = content;

    const popupOverlay = new this.ol.Overlay({
      element: popupElement,
      position: coordinate,
      positioning: 'bottom-center',
      stopEvent: true,
    });

    this.map.addOverlay(popupOverlay);

    document.getElementById('ol-popup').setAttribute('style' , 'background-color: white;    border-radius: 10px;     border: 1px solid black;      padding: 5px 10px !important;')

  }
  
  addLineStringMeasurement(): void {
    if(this.Measuredraw != null){
      this.map.removeInteraction(this.Measuredraw);
    }
    
    this.addDrawInteraction('LineString');
  }

  addPolygonMeasurement(): void {
   
    if(this.Measuredraw != null){
      this.map.removeInteraction(this.Measuredraw);
    }
    this.addDrawInteraction('Polygon');
  }

  addPropertyInfoPopup(content , coordinate){

    const popupElement = document.createElement('div');
    popupElement.id = 'tbl_info';
    popupElement.innerHTML = content;

    const popupOverlay = new this.ol.Overlay({
      element: popupElement,
      position: coordinate,
      positioning: 'bottom-center',
      stopEvent: true,
    });

    this.map.addOverlay(popupOverlay);


    document.getElementById('tbl_info').setAttribute('style' , 'background-color: white;    border-radius: 10px;     border: 1px solid black;      padding: 5px 10px !important;');


  }
  // search
  loadDropdown() {
    this.commonService.getLayerData().subscribe(
      (data: any) => {
        console.log("load layers", data);
        if (data.responseCode === 200) {
          this.layerData = data.data;
          this.listItems = this.layerData.map(element => element.layer_name);
          console.log('Loaded layer names:', this.listItems);
        } else {
          console.error("Error fetching layers:", data.responseMessage);
          this.toastr.error('Error fetching layers');
        }
      },
      (error) => {
        console.error("API Error:", error);
        this.toastr.error('Something went wrong while fetching layers.');
      }
    );
  }
  
  onSearchInputChange(eventValue: any) {
    
    this.searchInput.next(eventValue)

    console.log("logging search value", eventValue);
    console.log("selectedOption", this.selectedOption);

    this.performSearch(eventValue);
 
    
  }
  onValueChange(event: string) {
    const selectedItem = this.searchResult.find(item => item.name === event);
    if (selectedItem) {
      this.selectedValue = selectedItem;
      this.selectedName=this.selectedValue.name;
      this.selectedGeom=this.selectedValue.geom;
      alert(`Selected: ${selectedItem.name}`);
    }
  }
  onSelectionChange() {
    // alert(this.selectedOption);
    // const selectedItem = this.searchResult.find(item => item.name === event);
    // if (selectedItem) {
    //   this.selectedValue = selectedItem;
    // }
  }

  performSearch(searchTerm: string) {
    const matchingLayers = this.layerData.filter(element => element.layer_name === this.selectedValue);
    this.searchResult = [];
    this.searchResultNames = [];
    this.loading = true; 
    const searchObservables = matchingLayers.map(element => {
      const formData = {
        keyword: searchTerm,
        table_name: element.table_name
      };
      return this.commonService.searchChildlayer(JSON.stringify(formData));
    });
    // ForkJoin to wait for all observables to complete
    forkJoin(searchObservables).subscribe(
      (results: any[]) => {
        results.forEach(data => {
          if (data.responseCode === 200) {
            const result = data.data;
            console.log('search result',result)
            result.forEach(row => {
              this.searchResult.push({ name: row.name, geom: row.geom });
              console.log('searchResult result',this.searchResult)
              this.searchResultNames.push(row.name);

              console.log('searchResultNames result', this.searchResultNames)
            });
          } else {
            console.error("API Error:", data); // Log API error
            this.toastr.error('name not found');
          }
        });
        this.loading = false; // Reset loading state
      },
      error => {
        console.error("API Error:", error);
        this.toastr.error('Something went wrong while fetching data.');
        this.loading = false; // Reset loading state
      }
    );
  }


}
✔ search working good.
✔getting name and geom on selecting name

====================================
CREATE OR REPLACE FUNCTION public.get_coords(input_geom geometry)
    RETURNS text 
    LANGUAGE plpgsql
AS $$
DECLARE
    result_json text;
	--select get_coords
BEGIN
    SELECT 
        json_build_object(
            'responseCode', 200,
            'data', COALESCE(to_json(array_agg(data1)), '[]'),
            'responseMessage', 'ok'
        )::text
    INTO
        result_json
    FROM (
        SELECT 
            ST_X(ST_Transform(ST_Centroid((ST_Dump(input_geom)).geom), 4326))::numeric AS long,
            ST_Y(ST_Transform(ST_Centroid((ST_Dump(input_geom)).geom), 4326))::numeric AS lat
    ) AS data1;

    RETURN result_json;
END;
$$;
✔get coords

@Override
	public String registerNewUser(String json) {
		String result = "";
		try {
			result = jdbcTemplate.queryForObject(SPUtility.FN_WEB_CRUD_USER_MANAGEMENT, new Object[] { json },
					String.class);
			if (result != null && !result.isEmpty()) {
				return result;
			} else {
				return null;
			}
		} catch (Exception e) {
			LoggerUtil.setError(this.getClass(), "Error in UserDaoImpl ::  removeUserToken()");
			e.printStackTrace();
		}
		return null;
	}

	@ApiOperation(value = "User Login API which validates the and authenticates valid users through web")
	@RequestMapping(value = "/weblogin", method = RequestMethod.POST, produces = "application/json", consumes = "application/json")
	public ResponseEntity<?> loginWebUser(@RequestBody String json) throws JSONException {

		String username = "";
		String password = "";
		try {
			JSONObject obj = new JSONObject(json);

			username = obj.getString("user_name").toString(); // pass json key as Username
			password = obj.getString("password").toString();
			System.out.println("username " + username + "  password " + password);

			// validation for checking weather its empty or not
			if ((username.equalsIgnoreCase(" ") || username.equalsIgnoreCase(""))
					&& (password.equalsIgnoreCase(" ") || password.equalsIgnoreCase(""))) {
				return ResponseEntity
						.ok(CustomMessages.getMessage(CustomMessages.RESPONSE_MESSAGE_NULL_MOBORUNAME_PASS));

			} else if (username.equalsIgnoreCase(" ") || username.equalsIgnoreCase("")) {

				return ResponseEntity
						.ok(CustomMessages.getMessage(CustomMessages.RESPONSE_MESSAGE_NULL_MOBILE_OR_UNAME));

			} else if (password.equalsIgnoreCase(" ") || password.equalsIgnoreCase("")) {
				return ResponseEntity.ok(CustomMessages.getMessage(CustomMessages.RESPONSE_MESSAGE_NULL_PASSWORD));

			}

			else {
//				String decryptedPassword = CryptoHelper.decrypt(password);
				System.out.println("Authentication..........");
				Authentication authentication = authenticationManager
						.authenticate(new UsernamePasswordAuthenticationToken(username, password));

				SecurityContextHolder.getContext().setAuthentication(authentication);

				String jwt = jwtProvider.generateJwtToken(authentication);

				// Get User all Details
				UserProfileModel userProfileModel = getwebUserDetails(username);

				userService.addWebUserToken(username, jwt);

				UserDetails userDetails = (UserDetails) authentication.getPrincipal();

				// Send Response with token and user_name
				JSONArray arr = new JSONArray();

				JSONObject jwtResponse = new JSONObject(
						new JwtResponse("Bearer " + jwt, userDetails.getAuthorities(), username));
				jwtResponse.put("user_id", userProfileModel.getUser_id());
				jwtResponse.put("name", userProfileModel.getName());
				jwtResponse.put("user_name", userProfileModel.getUser_name());
				jwtResponse.put("email_id", userProfileModel.getEmail_id());
				jwtResponse.put("role_id", userProfileModel.getRole_id());
				jwtResponse.put("role_name", userProfileModel.getRole_name());
				jwtResponse.put("modules", userProfileModel.getModules());
				arr.put(jwtResponse);

				JSONObject responseObj = new JSONObject();
				responseObj.put("responseCode", 200);
				responseObj.put("data", arr);
				responseObj.put("responseMessage", "Login Successful.");

				return ResponseEntity.ok(responseObj.toString());
			}

		} catch (Exception e) {
			System.out.println("ERROR while login ::: " + e);
			return ResponseEntity
					.ok(CustomMessages.getMessage(CustomMessages.RESPONSE_MESSAGE_FOR_USERNAME_OR_PASSWORD_INCORRECT));
		}

	}

---------------------------------------------------------------------------------------------------------------------->>26/6/24
<div class="bg-light dark:bg-transparent min-vh-100 d-flex flex-row align-items-center">
  <c-container>
    <c-row class="justify-content-center">
      <c-col lg="7" md="9" xl="6">
        <c-card class="mx-4">
          <c-card-body class="p-4">
            <form cForm  [formGroup]="registerForm" (ngSubmit)="onSubmit()" >
              <h1>Register</h1>
              <p class="text-body-secondary">Create your account</p>
              <c-input-group class="mb-3">
                <span cInputGroupText>
                  <svg cIcon name="cilUser"></svg>
                </span>
                <input  class="form-control" formControlName="username"  autoComplete="name" cFormControl placeholder="Username" />
              </c-input-group>
              <c-input-group class="mb-3">
                <span cInputGroupText>&#64;</span>
                <input  class="form-control" formControlName="email"  autoComplete="email" cFormControl placeholder="Email" />
              </c-input-group>
              <c-input-group class="mb-3">
                <span cInputGroupText>
                  <svg cIcon name="cilLockLocked"></svg>
                </span>
                <input  class="form-control" formControlName="password"  autoComplete="new-password" cFormControl placeholder="Password" type="password" />
              </c-input-group>
              <c-input-group class="mb-4">
                <span cInputGroupText>
                  <svg cIcon name="cilLockLocked"></svg>
                </span>
                <input  class="form-control" formControlName="role"  autoComplete="new-password" cFormControl placeholder="role"  />
              </c-input-group>
              <div class="d-grid">
                <button cButton type="submit"color="success">Create Account</button>
              </div>
            </form>
          </c-card-body>
        </c-card>
      </c-col>
    </c-row>
  </c-container>
</div>
import { Component, OnInit } from '@angular/core';
import { IconDirective } from '@coreui/icons-angular';
import { ContainerComponent, RowComponent, ColComponent, TextColorDirective, CardComponent, CardBodyComponent, FormDirective, InputGroupComponent, InputGroupTextDirective, FormControlDirective, ButtonDirective } from '@coreui/angular';
import { RouterModule, Router } from '@angular/router';
import { ReactiveFormsModule, FormBuilder, FormGroup, Validators } from '@angular/forms';
import { UserService } from 'src/services/user.service';
// import {User }  from 'src/models/user'
import { HttpClientModule,HttpClient } from '@angular/common/http';
@Component({
    selector: 'app-register',
    templateUrl: './register.component.html',
    styleUrls: ['./register.component.scss'],
    standalone: true,
    imports: [HttpClientModule,ReactiveFormsModule,RouterModule,ContainerComponent, RowComponent, ColComponent, TextColorDirective, CardComponent, CardBodyComponent, FormDirective, InputGroupComponent, InputGroupTextDirective, IconDirective, FormControlDirective, ButtonDirective],
    providers:[HttpClient,UserService]
})
export class RegisterComponent implements OnInit{
  registerForm: FormGroup;
  constructor(private fb: FormBuilder,private service:UserService,private router: Router) {
    this.registerForm = this.fb.group({
      username: ['', Validators.required],
      email: ['', [Validators.required, Validators.email]],
      password: ['', Validators.required],
      role: [[]]
    });
  }
  ngOnInit(): void {
   
  }

  onSubmit() {
    if (this.registerForm.valid) {
      console.log(this.registerForm.value);
      // let user = new User(
      //   this.registerForm.value['username'],
      //   this.registerForm.value['email'],
      //   this.registerForm.value['password'],
      //   this.registerForm.value['role']
      // );
      let formdata = {
        username: this.registerForm.get('username')?.value,
        email: this.registerForm.get('email')?.value,
        password: this.registerForm.get('password')?.value,
        role: ['user']// Assuming 'user' role by default
      };
      this.service.signUp(formdata).subscribe((data: any) => {
        alert(data.message);
        this.router.navigate(['/login']);
    
      });
    } else {
      console.log('Form is invalid');
    }
  }

}
............................................................

<div class="bg-light dark:bg-transparent min-vh-100 d-flex flex-row align-items-center">
  <c-container breakpoint="md">
    <c-row class="justify-content-center">
      <c-col lg="10" xl="8">
        <c-card-group>
          <c-card class="p-4">
            <c-card-body>
              <form cForm [formGroup]="loginForm" (ngSubmit)="onSubmit()">
                <h1>Login</h1>
                <p class="text-body-secondary">Sign In to your account</p>
                <c-input-group class="mb-3">
                  <span cInputGroupText>
                    <svg cIcon name="cilUser"></svg>
                  </span>
                  <input  class="form-control" formControlName="username" autoComplete="username" cFormControl placeholder="Username" />
                </c-input-group>
                <c-input-group class="mb-4">
                  <span cInputGroupText>
                    <svg cIcon name="cilLockLocked"></svg>
                  </span>
                  <input  class="form-control" formControlName="password"
                    autoComplete="current-password"
                    cFormControl
                    placeholder="Password"
                    type="password"
                  />
                </c-input-group>
                <c-row>
                  <c-col xs="6">
                    <button type="submit" cButton class="px-4" color="primary">
                      Login
                    </button>
                  </c-col>
                  <c-col class="text-right" xs="6">
                    <button cButton class="px-0" color="link">
                      Forgot password?
                    </button>
                  </c-col>
                </c-row>
              </form>
            </c-card-body>
          </c-card>
          <c-card [ngStyle]="{'minWidth.%': 44}" class="text-white bg-primary py-5">
            <c-card-body class="text-center">
              <div>
                <h2>Sign up</h2>
                <p>
                  create new account
                </p>
                <button  [active]="true" cButton class="mt-3" color="primary" >
                  Register Now!
                </button>
              </div>
            </c-card-body>
          </c-card>
        </c-card-group>
      </c-col>
    </c-row>
  </c-container>
</div>
import { Component } from '@angular/core';
import { NgStyle } from '@angular/common';
import { IconDirective } from '@coreui/icons-angular';
import { ContainerComponent, RowComponent, ColComponent, CardGroupComponent, TextColorDirective, CardComponent, CardBodyComponent, FormDirective, InputGroupComponent, InputGroupTextDirective, FormControlDirective, ButtonDirective } from '@coreui/angular';
import { RouterModule, Router } from '@angular/router';
import { FormGroup, Validators, FormBuilder, ReactiveFormsModule } from '@angular/forms';
import { HttpClient, HttpClientModule } from '@angular/common/http';
import { UserService } from 'src/services/user.service';

@Component({
    selector: 'app-login',
    templateUrl: './login.component.html',
    styleUrls: ['./login.component.scss'],
    standalone: true,
    providers:[HttpClient,UserService],
    imports: [HttpClientModule,ReactiveFormsModule,RouterModule,RouterModule,ContainerComponent, RowComponent, ColComponent, CardGroupComponent, TextColorDirective, CardComponent, CardBodyComponent, FormDirective, InputGroupComponent, InputGroupTextDirective, IconDirective, FormControlDirective, ButtonDirective, NgStyle]
})
export class LoginComponent {
  loginForm: FormGroup;
  constructor(private fb: FormBuilder,private service:UserService,private router: Router) {
    this.loginForm = this.fb.group({
      username: ['', Validators.required],
      password: ['', Validators.required],
    });
  }
  ngOnInit(): void {
   
  }

  onSubmit() {
    if (this.loginForm.valid) {
      console.log(this.loginForm.value);
   
      let formdata = {
        username: this.loginForm.get('username')?.value,
        password: this.loginForm.get('password')?.value,
      };
      this.service.signIn(formdata).subscribe((data: any) => {
        
        this.router.navigate(['/dashboard']);
        localStorage.setItem('isLoggedIn', "true");
        localStorage.setItem('id', data.id);
        localStorage.setItem('username', data.username);
        localStorage.setItem('email', data.email);
        localStorage.setItem('roles', data.roles);
        localStorage.setItem('tokenType', data.tokenType);
        localStorage.setItem('accessToken', data.accessToken);
      
        // this.authorizationCheckService.modules = data.data[0].modules;
        alert('Login Success');
    
      });
    } else {
      console.log('Form is invalid');
    }
  }

}






































import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Router } from '@angular/router';
import { HttpClientModule } from '@angular/common/http'; // Import HttpClientModule
import * as env from 'src/environments/environment'
@Injectable({
  providedIn: 'root'
})
export class UserService {
  private  url =  env.environment.baseUrl;  
  headers = new HttpHeaders().set('Content-Type','application/json');
  constructor(private http:HttpClient,private router:Router) { }
  signUp(jsonData :any)
  {   
      // http://localhost:8080/adminPanel/api/auth/signup
    return this.http.post( 'http://localhost:8080/adminPanel/api/auth/signup', jsonData);  
      
  }
  signIn(jsonData :any)
  {   
      // http://localhost:8080/adminPanel/api/auth/signin
    return this.http.post(  'http://localhost:8080/adminPanel/api/auth/signin', jsonData);  
      
  }logout() {
   
    
    localStorage.clear();

    // Navigate to the login page or another appropriate page
    this.router.navigate(['/login']);
  }

  

}



































import { Injectable } from '@angular/core';
import { Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';
@Injectable({
  providedIn: 'root'
})
export class AuthorizeService implements CanActivate {

 
  constructor(private router: Router) { }
  public modules = [];

  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {
      //If token data exist, user may login to application

      // if (this.modules.length == 0) {
      //     this.modules = localStorage.getItem('modules').split(',');
      // }
      
      // let redirectedURL = state.url.replace('/', '');
      // && this.modules.includes(redirectedURL)
      const token = localStorage.getItem('accessToken');
      if (token) {
        return true;
      } else {
        alert('unauthorize');
        localStorage.clear();
        this.router.navigate(['/login']);
        return false;
      }
    }}


































import { Routes } from '@angular/router';
import { DefaultLayoutComponent } from './layout';
import { HttpClientModule,HttpClient } from '@angular/common/http';
// import { authGuard } from '../auth/auth.guard';
 import { AuthorizeService } from '../services/authorize.service';


export const routes: Routes = [
  {
    path: '',
    redirectTo: 'login',
    pathMatch: 'full'
  },
  {
    path: '',
    component: DefaultLayoutComponent,
    canActivate: [AuthorizeService],
    data: {
      title: 'Home'
    },
    children: [
      {
        path: 'dashboard',
        loadChildren: () => import('./views/dashboard/routes').then((m) => m.routes),
        canActivate: [AuthorizeService],
      },
      {
        path: 'user-management',
        loadComponent: () => import('../components/user-management/user-management.component').then(m => m.UserManagementComponent),
        canActivate: [AuthorizeService],
        pathMatch: 'full'
      },
      {
        path: 'theme',
        loadChildren: () => import('./views/theme/routes').then((m) => m.routes)
      },
      {
        path: 'base',
        loadChildren: () => import('./views/base/routes').then((m) => m.routes)
      },
      {
        path: 'buttons',
        loadChildren: () => import('./views/buttons/routes').then((m) => m.routes)
      },
      {
        path: 'forms',
        loadChildren: () => import('./views/forms/routes').then((m) => m.routes)
      },
      {
        path: 'icons',
        loadChildren: () => import('./views/icons/routes').then((m) => m.routes)
      },
      {
        path: 'notifications',
        loadChildren: () => import('./views/notifications/routes').then((m) => m.routes)
      },
      {
        path: 'widgets',
        loadChildren: () => import('./views/widgets/routes').then((m) => m.routes)
      },
      {
        path: 'charts',
        loadChildren: () => import('./views/charts/routes').then((m) => m.routes)
      },
      {
        path: 'pages',
        loadChildren: () => import('./views/pages/routes').then((m) => m.routes)
      }
    ]
  },
  {
    path: '404',
    loadComponent: () => import('./views/pages/page404/page404.component').then(m => m.Page404Component),
    data: {
      title: 'Page 404'
    }
  },
  {
    path: '500',
    loadComponent: () => import('./views/pages/page500/page500.component').then(m => m.Page500Component),
    data: {
      title: 'Page 500'
    }
  },
  {
    path: 'login',
    loadComponent: () => import('./views/pages/login/login.component').then(m => m.LoginComponent),
    data: {
      title: 'Login Page'
    }
  },
  {
    path: 'register',
    loadComponent: () => import('./views/pages/register/register.component').then(m => m.RegisterComponent),
    data: {
      title: 'Register Page'
    }
  },
  { path: '**', redirectTo: 'dashboard' }
];



































import { Routes } from '@angular/router';
import { DefaultLayoutComponent } from './layout';
import { HttpClientModule,HttpClient } from '@angular/common/http';
// import { authGuard } from '../auth/auth.guard';
 import { AuthorizeService } from '../services/authorize.service';


export const routes: Routes = [
  {
    path: '',
    redirectTo: 'login',
    pathMatch: 'full'
  },
  {
    path: '',
    component: DefaultLayoutComponent,
    canActivate: [AuthorizeService],
    data: {
      title: 'Home'
    },
    children: [
      {
        path: 'dashboard',
        loadChildren: () => import('./views/dashboard/routes').then((m) => m.routes),
        canActivate: [AuthorizeService],
      },
      {
        path: 'user-management',
        loadComponent: () => import('../components/user-management/user-management.component').then(m => m.UserManagementComponent),
        canActivate: [AuthorizeService],
        pathMatch: 'full'
      },
      {
        path: 'theme',
        loadChildren: () => import('./views/theme/routes').then((m) => m.routes)
      },
      {
        path: 'base',
        loadChildren: () => import('./views/base/routes').then((m) => m.routes)
      },
      {
        path: 'buttons',
        loadChildren: () => import('./views/buttons/routes').then((m) => m.routes)
      },
      {
        path: 'forms',
        loadChildren: () => import('./views/forms/routes').then((m) => m.routes)
      },
      {
        path: 'icons',
        loadChildren: () => import('./views/icons/routes').then((m) => m.routes)
      },
      {
        path: 'notifications',
        loadChildren: () => import('./views/notifications/routes').then((m) => m.routes)
      },
      {
        path: 'widgets',
        loadChildren: () => import('./views/widgets/routes').then((m) => m.routes)
      },
      {
        path: 'charts',
        loadChildren: () => import('./views/charts/routes').then((m) => m.routes)
      },
      {
        path: 'pages',
        loadChildren: () => import('./views/pages/routes').then((m) => m.routes)
      }
    ]
  },
  {
    path: '404',
    loadComponent: () => import('./views/pages/page404/page404.component').then(m => m.Page404Component),
    data: {
      title: 'Page 404'
    }
  },
  {
    path: '500',
    loadComponent: () => import('./views/pages/page500/page500.component').then(m => m.Page500Component),
    data: {
      title: 'Page 500'
    }
  },
  {
    path: 'login',
    loadComponent: () => import('./views/pages/login/login.component').then(m => m.LoginComponent),
    data: {
      title: 'Login Page'
    }
  },
  {
    path: 'register',
    loadComponent: () => import('./views/pages/register/register.component').then(m => m.RegisterComponent),
    data: {
      title: 'Register Page'
    }
  },
  { path: '**', redirectTo: 'dashboard' }
];





















































































































































































// This file can be replaced during build by using the `fileReplacements` array.
// `ng build` replaces `environment.ts` with `environment.prod.ts`.
// The list of file replacements can be found in `angular.json`.


import packageInfo from '../../package.json';

export const environment = {
  appVersion: packageInfo.version,
  production: false,

//   KENDO_UI_LICENSE: 'eyJhbGciOiJSUzI1NiIsInR5cCI6IkxJQyJ9.eyJwcm9kdWN0cyI6W3sidHJpYWwiOmZhbHNlLCJjb2RlIjoiS0VORE9VSVJFQUNUIiwibGljZW5zZUV4cGlyYXRpb25EYXRlIjoxNzM5ODYxMDkzfSx7InRyaWFsIjpmYWxzZSwiY29kZSI6IktFTkRPVUlDT01QTEVURSIsImxpY2Vuc2VFeHBpcmF0aW9uRGF0ZSI6MTczOTg2MTA5M30seyJ0cmlhbCI6ZmFsc2UsImNvZGUiOiJLRU5ET1VJVlVFIiwibGljZW5zZUV4cGlyYXRpb25EYXRlIjoxNzM5ODYxMDkzfSx7InRyaWFsIjpmYWxzZSwiY29kZSI6IktFTkRPVUlBTkdVTEFSIiwibGljZW5zZUV4cGlyYXRpb25EYXRlIjoxNzM5ODYxMDkzfV0sImludGVncml0eSI6Iko4cDBhblZXVzE5XC9UYnViN3pESnJvam1Zblk9IiwibGljZW5zZUhvbGRlciI6ImFydmluZEBhbW5leC5jb20iLCJpYXQiOjE3MDkxOTA2MjYsImF1ZCI6Im1hdWxpa0BhbW5leC5jb20iLCJ1c2VySWQiOiJkZTk4NWU5OS1kOTE4LTQ3YmMtODA3MC1hYTlmZmIyMTUwNGQifQ.QMFdhyXCmhsmSlX-i_DVbsrmIDbGMa5np6ioPgP53KwJHC8CKz7lzH0GBxxp_qS-Icws0vsPyUKX3tGiCE7_tWM41Q9xZRWJ-UZrlv2VBpS76tCTdEw_wVOY65ovcCCJPbiXEmac5arg0MQ5_RpIfMKOXhN3rvpYx0E-sbYXg3jHOuqq8es5DyXFbF293tsO3NlqKY8CVrns1kPaoWIaOwLtcl5ZIZg5da6WhOuSYmDHDTVdmxQV4Oj6kJCdFVhVba_xIdQbyqr3RtpLJkdECSLddcrRPPPr5Gd4fq1apaZHluoCd9BYc5ZjE0GVYXSfkUOtdXS_vuot-pleT9KBJg',

  // Local Server
  baseUrl:'http://localhost:8090/adminPanel/',
  //baseUrl:'http://localhost:9090/midcgis/',

  // Staging Server - digitaltwin
  //baseUrl:'https://apagri.infinium.management/digitaltwin/',

};
/*
 * For easier debugging in development mode, you can import the following file
 * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.
 *
 * This import should be commented out in production mode because it will have a negative impact
 * on performance if an error is thrown.
 */
// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.






































---------------------------------------------------------------------------------------------------------------------->>27/6/24
-- FUNCTION: public.fn_web_insert_re_instegration_data(text)

-- DROP FUNCTION public.fn_web_insert_re_instegration_data(text);

CREATE OR REPLACE FUNCTION public.fn_web_insert_update_streetlight_arms(
	jsonarray text)
    RETURNS TABLE(data text) 
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
    ROWS 1000

AS $BODY$
DECLARE

	
	_gid integer;
	_pole_id text;
	_smart_asse text;
	_pole_type text;
	_arrangemen text;
	_bracket_ty text;
	_pole_heigh text;
	_date_of_in text;
	_cost text;
	_pole_owner text;
	_maintained text;
	_last_paint text;
	_number_of_ text;
	_number_of1 text;
	_ploe_light text;
	_geom text;
	
	_street_arm_id integer;
	_position text;
	_status Boolean;
	_width integer;
	_status_ON_OFF text;
	_street_light_arms_data text;

	
	jsonObject JSON;
	json JSON;
	sql_query text;
	
		
			
	BEGIN
	RAISE NOTICE 'value of a ' ; 
-- 		select * from public.tbl_web_street_arms limit 10;
-- 		select * from public.shp_street_lights limit 10;
-- select fn_web_insert_streetlight_arms('{"gid":1,"position":"left","status":false,"width":"4","status_ON_OFF":"ON"}');
-- SELECT * FROM fn_web_insert_streetlight_arms('{"street_arm_id":12,"position":"left","status":"false","width":"4","status_ON_OFF":"ON"}');
-- 
-- 				 INSERT INTO public.shp_street_lights( gid)
-- 				 VALUES (_gid);
-- select * from tbl_error_log order by created_on desc limit 10
		jsonObject := cast(jsonArray AS JSON) :: JSON;
		RAISE NOTICE 'value of a%',jsonObject ;
		
		_gid                      := jsonObject ->> 'gid';
		RAISE NOTICE 'value of a:%',_gid ;
		
		_street_arm_id            := jsonObject ->> 'street_arm_id';
		RAISE NOTICE 'value of a%',_street_arm_id ;
		
		_street_light_arms_data   := jsonObject ->> 'data';
		RAISE NOTICE 'value of a%',_street_light_arms_data ;
		
		_position                 := jsonObject ->> 'position';
		RAISE NOTICE 'value of a%',_position ;
		
		_status                   := jsonObject ->> 'status';
		RAISE NOTICE 'value of a%',_status ;
		
		_width                    := jsonObject ->> 'width';
		RAISE NOTICE 'value of a%',_width ;
		
		_status_ON_OFF            := jsonObject ->> 'status_ON_OFF';
		RAISE NOTICE 'value of a%',_status_ON_OFF ;
		
         IF EXISTs(select * from shp_street_lights where gid=_street_arm_id)
		 then
		 		IF EXISTS (SELECT street_arm_id from tbl_web_street_arms WHERE street_arm_id = _street_arm_id) 
			THEN
				RAISE NOTICE 'update' ;
				UPDATE public.tbl_web_street_arms
				SET street_arm_id=_street_arm_id, 
				"position"=_position,
				width=_width, 
				status=_status, 
				"status_ON_OFF"=_status_ON_OFF
				 WHERE street_arm_id = _street_arm_id;
				 		RAISE NOTICE 'update end' ;
				 sql_query := 'SELECT json_build_object(''responseCode'',200,''responseMessage'',''Compained data updated successfully'',''status'',''success'')::text as data;';
	        ELSE
				RAISE NOTICE 'insert' ;
				
				
				INSERT INTO public.tbl_web_street_arms(
				street_arm_id, "position", width, status, "status_ON_OFF")
				VALUES (_street_arm_id, _position,_width, _status, _status_ON_OFF);
				
				 		RAISE NOTICE 'insert end' ;
				 sql_query := 'SELECT json_build_object(''responseCode'',200,''responseMessage'',''Compained data inserted successfully'',''status'',''success'')::text as data;';
			END IF;	
					sql_query := 'SELECT json_build_object(''responseCode'',200,''responseMessage'',''gid not present in parent table'',''status'',''success'')::text as data;';
		 ELSE
		 		
		 END IF;
			
		RETURN QUERY EXECUTE sql_query;
			EXCEPTION WHEN OTHERS 
		THEN
			DECLARE p_errormessage VARCHAR(4000);
			DECLARE p_errorstate VARCHAR(4000);
			DECLARE p_errorline VARCHAR(4000);
			BEGIN									
				p_errormessage:= SQLERRM;
				p_errorstate:= SQLSTATE;
				GET STACKED DIAGNOSTICS p_errorline = PG_EXCEPTION_CONTEXT;

				INSERT INTO tbl_error_log
				(
					error_name,error_callstack,error_method,created_on
				)		
				SELECT p_errorline,p_errormessage||'fn_web_insert_update_streetlight_arms',p_errorstate,timezone('Asia/Kolkata'::text, now());
				sql_query := 'SELECT json_build_object(''responseCode'',201,''responseMessage'',''failed'')::text as data';																					 
				RETURN QUERY EXECUTE sql_query;
			END;
			

	END;
$BODY$;

ALTER FUNCTION public.fn_web_insert_re_instegration_data(text)
    OWNER TO postgres;
........................................................................................................................................................................













-- FUNCTION: public.fn_web_insert_re_instegration_data(text)

-- DROP FUNCTION public.fn_web_insert_re_instegration_data(text);

CREATE OR REPLACE FUNCTION public.fn_web_insert_update_streetlight_arms(
	jsonarray text)
    RETURNS TABLE(data text) 
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
    ROWS 1000

AS $BODY$
DECLARE

	
	_gid integer;
	_pole_id text;
	_smart_asse text;
	_pole_type text;
	_arrangemen text;
	_bracket_ty text;
	_pole_heigh text;
	_date_of_in text;
	_cost text;
	_pole_owner text;
	_maintained text;
	_last_paint text;
	_number_of_ text;
	_number_of1 text;
	_ploe_light text;
	_geom text;
	
	_street_arm_id integer;
	_position text;
	_status Boolean;
	_width integer;
	_status_ON_OFF text;
	_street_light_arms_data text;

	
	jsonObject JSON;
	json JSON;
	sql_query text;
	
		
			
	BEGIN
	RAISE NOTICE 'value of a ' ; 
-- 		select * from public.tbl_web_street_arms limit 10;
-- 		select * from public.shp_street_lights limit 10;
-- select fn_web_insert_streetlight_arms('{"gid":1,"position":"left","status":false,"width":"4","status_ON_OFF":"ON"}');
-- SELECT * FROM fn_web_insert_streetlight_arms('{"street_arm_id":12,"position":"left","status":"false","width":"4","status_ON_OFF":"ON"}');
-- 
-- 				 INSERT INTO public.shp_street_lights( gid)
-- 				 VALUES (_gid);
-- select * from tbl_error_log order by created_on desc limit 10
		jsonObject := cast(jsonArray AS JSON) :: JSON;
		RAISE NOTICE 'value of a%',jsonObject ;
		
		_gid                      := jsonObject ->> 'gid';
		RAISE NOTICE 'value of a:%',_gid ;
		
		_street_arm_id            := jsonObject ->> 'street_arm_id';
		RAISE NOTICE 'value of a%',_street_arm_id ;
		
		_street_light_arms_data   := jsonObject ->> 'data';
		RAISE NOTICE 'value of a%',_street_light_arms_data ;
		
		_position                 := jsonObject ->> 'position';
		RAISE NOTICE 'value of a%',_position ;
		
		_status                   := jsonObject ->> 'status';
		RAISE NOTICE 'value of a%',_status ;
		
		_width                    := jsonObject ->> 'width';
		RAISE NOTICE 'value of a%',_width ;
		
		_status_ON_OFF            := jsonObject ->> 'status_ON_OFF';
		RAISE NOTICE 'value of a%',_status_ON_OFF ;
		
         IF EXISTs(select * from shp_street_lights where gid=_street_arm_id)
		 then
		 		IF EXISTS (SELECT street_arm_id from tbl_web_street_arms WHERE street_arm_id = _street_arm_id) 
			THEN
				RAISE NOTICE 'update' ;
				UPDATE public.tbl_web_street_arms
				SET street_arm_id=_street_arm_id, 
				"position"=_position,
				width=_width, 
				status=_status, 
				"status_ON_OFF"=_status_ON_OFF
				 WHERE street_arm_id = _street_arm_id;
				 		RAISE NOTICE 'update end' ;
				 sql_query := 'SELECT json_build_object(''responseCode'',200,''responseMessage'',''Compained data updated successfully'',''status'',''success'')::text as data;';
	        ELSE
				RAISE NOTICE 'insert' ;
				IF EXISTS(SELECT gid from shp_street_lights WHERE  = _street_arm_id)
				then
				
					INSERT INTO public.tbl_web_street_arms(
					street_arm_id, "position", width, status, "status_ON_OFF")
					VALUES (_street_arm_id, _position,_width, _status, _status_ON_OFF);
				ELSE 
				
					INSERT INTO public.shp_street_lights(gid)
					VALUES (_street_arm_id);
					
					INSERT INTO public.tbl_web_street_arms(
					street_arm_id, "position", width, status, "status_ON_OFF")
					VALUES (_street_arm_id, _position,_width, _status, _status_ON_OFF);

				END IF;
				


				
				
				 		RAISE NOTICE 'insert end' ;
				 sql_query := 'SELECT json_build_object(''responseCode'',200,''responseMessage'',''Compained data inserted successfully'',''status'',''success'')::text as data;';
			END IF;	
					sql_query := 'SELECT json_build_object(''responseCode'',200,''responseMessage'',''gid not present in parent table'',''status'',''success'')::text as data;';
		 ELSE
		 		
		 END IF;
			
		RETURN QUERY EXECUTE sql_query;
			EXCEPTION WHEN OTHERS 
		THEN
			DECLARE p_errormessage VARCHAR(4000);
			DECLARE p_errorstate VARCHAR(4000);
			DECLARE p_errorline VARCHAR(4000);
			BEGIN									
				p_errormessage:= SQLERRM;
				p_errorstate:= SQLSTATE;
				GET STACKED DIAGNOSTICS p_errorline = PG_EXCEPTION_CONTEXT;

				INSERT INTO tbl_error_log
				(
					error_name,error_callstack,error_method,created_on
				)		
				SELECT p_errorline,p_errormessage||'fn_web_insert_update_streetlight_arms',p_errorstate,timezone('Asia/Kolkata'::text, now());
				sql_query := 'SELECT json_build_object(''responseCode'',201,''responseMessage'',''failed'')::text as data';																					 
				RETURN QUERY EXECUTE sql_query;
			END;
			

	END;
$BODY$;

ALTER FUNCTION public.fn_web_insert_re_instegration_data(text)
    OWNER TO postgres;




































________________________________________________________________________________________________________________________28/6/24

CREATE OR REPLACE FUNCTION public.fn_web_insert_update_streetlight_arms(
	jsonarray text)
    RETURNS TABLE(data text) 
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
    ROWS 1000

AS $BODY$
DECLARE

	_gid integer;
	_pole_id text;
	_smart_asse integer;
	_pole_type text;
	_arrangemen text;
	_bracket_ty text;
	_pole_heigh  double precision;
	_date_of_in text;
	_cost  double precision;
	_pole_owner text;
	_maintained text;
	_last_paint text;
	_number_of_ text;
	_number_of1 text;
	_ploe_light text;
	_geom text;
	_fitting_wa double precision;
	_fitting_ty text;
	
	_street_arm_id integer;
	_position text;
	_status Boolean;
	_width integer;
	_status_ON_OFF text;
	_street_light_arms_data text;
	
	jsonObject JSON;
	pole_arms_json JSON;
	json JSON;
	sql_query text = 'SELECT json_build_object(''responseCode'',201,''responseMessage'',''error'',''status'',''fail'')::text as data;';
	i json;
			
	BEGIN
		RAISE NOTICE 'start' ;
-- 		select * from public.tbl_web_street_arms order by gid desc limit 10;
-- 		select * from public.shp_street_lights order by gid desc limit 10;
--      select * from tbl_error_log order by created_on desc limit 10
 

		jsonObject := cast(jsonArray AS JSON) :: JSON;
		RAISE NOTICE 'value of jsonObject:%',jsonObject ;
		
		pole_arms_json := jsonObject -> 'pole_arms';
		RAISE NOTICE 'value of pole_arms:%',pole_arms_json ;
		
					_gid       := jsonObject ->> 'gid';          RAISE NOTICE '_gid:%',_gid ;
				_pole_id       := jsonObject ->> 'pole_id';			RAISE NOTICE '_pole_id:%',_pole_id ;
				_smart_asse    := jsonObject ->> 'smart_asse';RAISE NOTICE '_smart_asse:%',_smart_asse ;
				_pole_type     := jsonObject ->> 'pole_type';RAISE NOTICE '_pole_type:%',_pole_type ;
				_arrangemen    := jsonObject ->> 'arrangemen';RAISE NOTICE '_arrangemen:%',_arrangemen ;
				_bracket_ty    := jsonObject ->> 'bracket_ty';RAISE NOTICE '_bracket_ty:%',_bracket_ty ;
				_pole_heigh    := jsonObject ->> 'pole_heigh';RAISE NOTICE '_pole_heigh:%',_pole_heigh ;
				_date_of_in    := jsonObject ->> 'date_of_in';RAISE NOTICE '_date_of_in:%',_date_of_in ;
				_cost          := jsonObject ->> 'cost';RAISE NOTICE '_cost:%',_cost ;
				_maintained    := jsonObject ->> 'maintained';RAISE NOTICE '_maintained:%',_maintained ;
				_last_paint    := jsonObject ->> 'last_paint';RAISE NOTICE '_last_paint:%',_last_paint ;
				_number_of_    := jsonObject ->> 'number_of_';RAISE NOTICE '_number_of_:%',_number_of_ ;
				_number_of1    := jsonObject ->> 'number_of1';RAISE NOTICE '_number_of1:%',_number_of1 ;
				_ploe_light    := jsonObject ->> 'ploe_light';RAISE NOTICE '_ploe_light:%',_ploe_light ;
				_geom          := jsonObject ->> 'geom';RAISE NOTICE '_geom:%',_geom ;
				_fitting_wa    := jsonObject ->> 'fitting_wa';RAISE NOTICE '_fitting_wa:%',_fitting_wa ;
				_fitting_ty   := jsonObject ->> 'fitting_type';RAISE NOTICE '_fitting_ty:%',_fitting_ty ;
		
		IF _gid NOTNULL
		then
			   	RAISE NOTICE 'update parent' ;
				UPDATE public.shp_street_lights
	  			SET  
				pole_id     =_pole_id, 
				smart_asse  =_smart_asse, 
				pole_type   =_pole_type, 
				fitting_ty  =_fitting_ty, 
				arrangemen	=_arrangemen ,
				bracket_ty	=_bracket_ty, 
				pole_heigh	=_pole_heigh ,
				fitting_wa	=_fitting_wa ,
				date_of_in	=_date_of_in ,
				cost		=_cost, 
				pole_owner	=_pole_owner ,
				maintained	=_maintained ,
				last_paint	=_last_paint?, 
				number_of_	=_number_of_ ,
				number_of1	=_number_of1?, 
				ploe_light	=_ploe_light ,
				geom		=_geom
				WHERE gid=_gid;
				sql_query := 'SELECT json_build_object(''responseCode'',200,''responseMessage'',''shp_street_lights data updated successfully'',''status'',''success'')::text as data;';
				RAISE NOTICE 'update parent' ;
				FOR i IN SELECT * FROM json_array_elements(pole_arms_json)
			    LOOP
			   			RAISE NOTICE 'output from space %', i;
							_street_arm_id            := i ->> 'street_arm_id';
							_street_light_arms_data   := i ->> 'data';
							_position                 := i ->> 'position';
							_width                    := i ->> 'width';
							_status_ON_OFF            := i ->> 'status_ON_OFF';
					
						IF _street_arm_id NOTNULL 
						then
								RAISE NOTICE 'update child' ;
								UPDATE public.tbl_web_street_arms
								SET street_arm_id=_street_arm_id,
								gid=_gid,
								"position"=_position,
								width=_width, 
								status=_status, 
								status_ON_OFF=_status_ON_OFF
								 WHERE street_arm_id = _street_arm_id; 
								
								sql_query := 'SELECT json_build_object(''responseCode'',200,''responseMessage'',''tbl_web_street_arms data updated successfully'',''status'',''success'')::text as data;';
								RAISE NOTICE 'update child' ;
						ELSE 
								 RAISE NOTICE 'insert child' ;
								INSERT INTO public.tbl_web_street_arms(
										gid, "position", width, status, status_ON_OFF)
								VALUES (_gid, _position,_width, _status, _status_ON_OFF);
								sql_query := 'SELECT json_build_object(''responseCode'',200,''responseMessage'',''tbl_web_street_arms data inserted successfully'',''status'',''success'')::text as data;';
                                RAISE NOTICE 'insert child' ;
						END IF;
			   
			   END LOOP;

		ELSE  
		
				 INSERT INTO public.shp_street_lights 
				 		(pole_id, smart_asse, pole_type, fitting_ty, arrangemen, bracket_ty, pole_heigh, fitting_wa, date_of_in, cost, pole_owner, maintained, last_paint, number_of_, number_of1, ploe_light, geom)
				 VALUES (_pole_id,_smart_asse, _pole_type, _fitting_ty, _arrangemen, _bracket_ty, _pole_heigh, _fitting_wa, _date_of_in, _cost, _pole_owner, _maintained, _last_paint, _number_of_, _number_of1, _ploe_light, _geom)
				 returning gid into _gid;				
				 sql_query := 'SELECT json_build_object(''responseCode'',200,''responseMessage'',''data inserted in shp_street_lights'',''status'',''success'')::text as data;';
					
			 	 FOR i IN SELECT * FROM json_array_elements(pole_arms_json)
				 LOOP
							
							RAISE NOTICE 'output from space %', i->>'type';
							_street_arm_id            := i ->> 'street_arm_id';
							_street_light_arms_data   := i ->> 'data';
							_position                 := i ->> 'position';
							_width                    := i ->> 'width';
							_status_ON_OFF            := i ->> 'status_ON_OFF';
							
				 		INSERT INTO public.tbl_web_street_arms(
								gid, position, width, status, status_ON_OFF)
						VALUES (_gid, _position,_width, _status, _status_ON_OFF);
						
				 END LOOP;
				 sql_query := 'SELECT json_build_object(''responseCode'',200,''responseMessage'',''tbl_web_street_arms data inserted successfully'',''status'',''success'')::text as data;';

		END IF;
	
		RETURN QUERY EXECUTE sql_query;
			EXCEPTION WHEN OTHERS 
		THEN
			DECLARE p_errormessage VARCHAR(4000);
			DECLARE p_errorstate VARCHAR(4000);
			DECLARE p_errorline VARCHAR(4000);
			BEGIN									
				p_errormessage:= SQLERRM;
				p_errorstate:= SQLSTATE;
				GET STACKED DIAGNOSTICS p_errorline = PG_EXCEPTION_CONTEXT;

				INSERT INTO tbl_error_log
				(
					error_name,error_callstack,error_method,created_on
				)		
				SELECT p_errorline,p_errormessage||'fn_web_insert_update_streetlight_arms',p_errorstate,timezone('Asia/Kolkata'::text, now());
				sql_query := 'SELECT json_build_object(''responseCode'',201,''responseMessage'',''failed'')::text as data';																					 
				RETURN QUERY EXECUTE sql_query;
			END;
			

	END;
$BODY$;

--------------------------________________________________________________________________________________________________1/7/24
select * from shp_street_lights order by gid desc limit 10
select * from 	public.tbl_web_street_arms limit 10
select * from shp_street_lights limit 10


ALTER TABLE public.tbl_web_street_arms
ADD CONSTRAINT pk_pole_id(pol)
FOREIGN KEY (gid)
REFERENCES public.shp_street_lights (gid)
ON DELETE CASCADE
ON UPDATE CASCADE;


ALTER TABLE public.tbl_web_street_arms
add CONSTRAINT pk_street_light_id primary key (street_arm_id)


_________________________________________________________________________________________________________________5/7/24
<div id="map" (click)='findCoords($event)'></div>

  findCoords(evt:any) {

    const coordinate = this.map.getEventCoordinate(evt);
    alert(coordinate);

   

};
✔ find lat long on click
-------------------------------------------------------------------------------------
ol: any = window['ol'];
  osm: any;
  map: any;
  pointStyle:any;
  view: any;
  vector: any;
  source: any;
  geojsondata:any;
  // orsDirections: any;
  

constructor(private http:HttpClient){};

  ngOnInit(): void {
    this.osm = new this.ol.layer.Tile({
      source: new this.ol.source.OSM()
    });

    this.view = new this.ol.View({
      projection: 'EPSG:4326',
      center: [75.352478, 19.901054],
      zoom: 12
    });

    this.map = new this.ol.Map({
      layers: [this.osm],
      target: 'map',
      view: this.view
    });
    this.pointStyle = new this.ol.style.Style({
      image: new this.ol.style.Icon({
          anchor: [0.5, 1],
          src: 'https://apagri.infinium.management/temp/point_icon.png',
      })
  });
   
  }

✔plot ol layer map  
--------------------------------------------------------

 findCoords(evt:any) {

    const coordinate = this.map.getEventCoordinate(evt);
    console.log(coordinate);
    const transformedCoordinate = this.ol.proj.toLonLat(coordinate);
    console.log(transformedCoordinate);
    let addMarkserFeature = new this.ol.Feature({
      geometry: new this.ol.geom.Point(this.ol.proj.fromLonLat(transformedCoordinate)),
      featureProjection: 'EPSG:4326',
  });
✔find coords
-------------------------------------------------------------

 let addMarkserFeature = new this.ol.Feature({
      geometry: new this.ol.geom.Point(this.ol.proj.fromLonLat(transformedCoordinate)),
      featureProjection: 'EPSG:4326',
  });

    var vector_layer = new this.ol.layer.Vector({
      source: new this.ol.source.Vector({ features: [addMarkserFeature] })
    });

    addMarkserFeature.setStyle(this.pointStyle);
    this.map.addLayer(vector_layer);


✔plot marker->1)new feature with feature projection 
		2)new vectorlayer to new source
		3)addStyle
-----------------------------------------------------------

 
    this.http.get("https://api.openrouteservice.org/v2/directions/driving-car?api_key=5b3ce3597851110001cf624837d0d92fba7048cd85a8893a7148bfdb&start=72.508511,23.027203&end=70.801009,21.973743").subscribe((data)=>{
      const format = new this.ol.format.GeoJSON();
      const features = format.readFeatures(data, {
        featureProjection: 'EPSG:3857' // Ensure the projection is correct
      });
      this.source.addFeatures(features);
    }, error => {
      console.error('Error fetching route data:', error);
    });
  
    this.map.addLayer(this.vector);
✔  create path using coords (ors api used)

another method of ors to create path:

    this.orsDirections = new Openrouteservice.Directions({
      api_key: "5b3ce3597851110001cf624837d0d92fba7048cd85a8893a7148bfdb",
      host: "https://api.openrouteservice.org"
    });

    this.getDirections([75.352478, 19.901054], [72.877426, 19.076090]);

✔  create path using coords (ors api and method used)
------------------------------------------------------------------
working code on 3-7-24

import { Component, OnInit } from '@angular/core';
import Openrouteservice from 'openrouteservice-js';
import GeoJSON from 'geojson';
import { HttpClient } from '@angular/common/http';


@Component({
  selector: 'app-direction',
  standalone: true,
  templateUrl: './direction.component.html',
  styleUrls: ['./direction.component.scss']
})
export class DirectionComponent implements OnInit {
  ol: any = window['ol'];
  state = "closed";
  osm: any;
  map: any;
  source = new this.ol.source.Vector();

  vector = new this.ol.layer.Vector({
    source: this.source,
    style: new this.ol.style.Style({
      stroke: new this.ol.style.Stroke({
        color: '#0efa7d',
        width: 4
      })
    })
  });

  view: any;
  orsDirections: any;
  geojsondata:any;
constructor(private http:HttpClient){};

  ngOnInit(): void {
    this.osm = new this.ol.layer.Tile({
      source: new this.ol.source.OSM()
    });

    this.view = new this.ol.View({
      projection: 'EPSG:3857',
      center: this.ol.proj.fromLonLat([75.352478, 19.901054]),
      zoom: 12
    });

    this.map = new this.ol.Map({
      layers: [this.osm],
      target: 'map',
      view: this.view
    });

   
    this.http.get("https://api.openrouteservice.org/v2/directions/driving-car?api_key=5b3ce3597851110001cf624837d0d92fba7048cd85a8893a7148bfdb&start=72.508511,23.027203&end=70.801009,21.973743").subscribe((data)=>{
      const format = new this.ol.format.GeoJSON();
      const features = format.readFeatures(data, {
        featureProjection: 'EPSG:3857' // Ensure the projection is correct
      });
      this.source.addFeatures(features);
    }, error => {
      console.error('Error fetching route data:', error);
    });
  
    this.map.addLayer(this.vector);
    // this.orsDirections = new Openrouteservice.Directions({
    //   api_key: "5b3ce3597851110001cf624837d0d92fba7048cd85a8893a7148bfdb",
    //   host: "https://api.openrouteservice.org"
    // });

    // Example of fetching directions
    // this.getDirections([75.352478, 19.901054], [72.877426, 19.076090]);
  }

  getDirections(start: number[], end: number[]): void {
    this.orsDirections.calculate({
      coordinates: [start, end],
      profile: 'driving-car',
      format: 'geojson'
    })
    .then((json: any) => {
      console.log(json);

      // Assuming geojson contains a feature collection
      const features = new this.ol.format.GeoJSON().readFeatures(json, {
        featureProjection: 'EPSG:3857'
      });

      this.source.addFeatures(features);
    })
    .catch((error: any) => {
      console.error(error);
    });
  }
}
----------------------------------------------
5-7-24 todays cod enot working

import { Component, OnInit } from '@angular/core';
import Openrouteservice from 'openrouteservice-js';
import GeoJSON from 'geojson';
import { HttpClient } from '@angular/common/http';
import { SharedModule } from 'src/app/theme/shared/shared.module';
import { NgbDropdownModule } from '@ng-bootstrap/ng-bootstrap';
import { fromLonLat,toLonLat, transform } from 'ol/proj';

@Component({
  selector: 'app-direction',
  imports:[SharedModule, NgbDropdownModule],
  standalone: true,
  templateUrl: './direction.component.html',
  styleUrls: ['./direction.component.scss']
})
export class DirectionComponent implements OnInit {
  ol: any = window['ol'];
  osm: any;
  map: any;
  pointStyle:any;
  view: any;
  vector: any;
  source: any;
  geojsondata:any;
  orsDirections: any;
  

constructor(private http:HttpClient){

  this.orsDirections = new Openrouteservice.Directions({
    api_key: "5b3ce3597851110001cf624837d0d92fba7048cd85a8893a7148bfdb",
    host: "https://api.openrouteservice.org"
  });
};

ngOnInit(): void {
  // Initialize OpenStreetMap layer
  this.osm = new this.ol.layer.Tile({
    source: new this.ol.source.OSM()
  });

  // Initialize map view with EPSG:3826 projection
  this.view = new this.ol.View({
    projection: 'EPSG:3826',
    center: [12982929.22, 4832347.66], // Example center coordinates in EPSG:3826
    zoom: 12
  });

  // Initialize vector source for features
  this.source = new this.ol.source.Vector();

  // Initialize vector layer for displaying features
  this.vector = new this.ol.layer.Vector({
    source: this.source
  });

  // Initialize the map with layers and view
  this.map = new this.ol.Map({
    layers: [this.osm, this.vector],
    target: 'map',
    view: this.view
  });

  // Style for the marker point
  this.pointStyle = new this.ol.style.Style({
    image: new this.ol.style.Icon({
      anchor: [0.5, 1],
      src: 'https://apagri.infinium.management/temp/point_icon.png',
    })
  });

  // Fetch and display directions
  this.getDirections([12982929.22, 4832347.66], [13023921.18, 4826952.83]); // Example coordinates in EPSG:3826
}

 
  getDirections(start: number[], end: number[]): void {
    this.orsDirections.calculate({
      coordinates: [transform(start, 'EPSG:3826', 'EPSG:4326'), transform(end, 'EPSG:3826', 'EPSG:4326')],
      profile: 'driving-car',
      format: 'geojson'
    })
    .then((json: any) => {
      console.log(json);

      // Assuming geojson contains a feature collection
      const features = new this.ol.format.GeoJSON().readFeatures(json, {
        featureProjection: 'EPSG:3826'
      });

      this.source.addFeatures(features);
    })
    .catch((error: any) => {
      console.error(error);
    });
  }

  

  findCoords(evt: any): void {
    const coordinate = this.map.getEventCoordinate(evt);
    console.log('Event coordinate:', coordinate);
  
    const transformedCoordinate = transform(coordinate, 'EPSG:4326', 'EPSG:3826');
    console.log('Transformed coordinate:', transformedCoordinate);
  
    let addMarkerFeature = new this.ol.Feature({
      geometry: new this.ol.geom.Point(transformedCoordinate)
    });
  
    addMarkerFeature.setStyle(this.pointStyle);
  
    this.source.addFeature(addMarkerFeature);
  }
  

}
// findPath(){ 
//   this.http.get("https://api.openrouteservice.org/v2/directions/driving-car?api_key=5b3ce3597851110001cf624837d0d92fba7048cd85a8893a7148bfdb&start=72.508511,23.027203&end=70.801009,21.973743").subscribe((data)=>{
//     const format = new this.ol.format.GeoJSON();
//     const features = format.readFeatures(data, {featureProjection: 'EPSG:3857' });
//     this.source.addFeatures(features);
//   }, error => {
//     console.error('Error fetching route data:', error);
//   });
//   this.map.addLayer(this.vector);
// }


































________________________________________________________________________________________________________8/7/24


Coordinate Systems: The first pair [72.5086395, 23.0208241] appears to be in decimal degrees, commonly used in geographic coordinates (latitude and longitude). The second pair [8071624.827253043, 2634537.1545541277] seems to be in meters or another projected coordinate system, which could be used in mapping and GIS applications.

Units: The first pair uses degrees (latitude and longitude), where the numbers represent angular measurements on the Earth's surface. The second pair uses meters or another linear unit, representing distances from a specific origin point in a projected coordinate system.

Context: The interpretation of these coordinates depends on the context in which they are used. Geographic coordinates (like the first pair) are used for locating positions on the Earth's surface, while projected coordinates (like the second pair) are used for mapping and measuring distances in a specific region or projection.

✔understand lat long -> degrees wale for positioning and meters wale for measuring



--------------------------------------------------------------------
import { Component, OnInit, ElementRef, ViewChild } from '@angular/core';
import Openrouteservice from 'openrouteservice-js';
import { transform } from 'ol/proj';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import GeoJSON from 'ol/format/GeoJSON';
import VectorSource from 'ol/source/Vector';
import VectorLayer from 'ol/layer/Vector';
import Style from 'ol/style/Style';
import Stroke from 'ol/style/Stroke';
@Component({
  selector: 'app-direction',
  standalone: true,
  imports: [CommonModule,],
  templateUrl: './direction.component.html',
  styleUrls: ['./direction.component.scss']
})
export class DirectionComponent implements OnInit {
  ol: any = window['ol'];
  state = "closed";
  osm: any;
  map: any;
  source = new this.ol.source.Vector();

  vector = new this.ol.layer.Vector({
    source: this.source,
    style: new this.ol.style.Style({
      stroke: new this.ol.style.Stroke({
        color: '#0e97fa',
        width: 4
      })
    })
  });

  view: any;
  orsDirections: any;
  pointStyle: any;
  start: any[];
  end: any[];
  current_coords: number[];
  @ViewChild('input_start') source_element: ElementRef | undefined;
  @ViewChild('input_end') destination_element: ElementRef | undefined;
  ngOnInit(): void {
    this.osm = new this.ol.layer.Tile({
      source: new this.ol.source.OSM()
    });

    this.view = new this.ol.View({
      projection: 'EPSG:3857',
      center: this.ol.proj.fromLonLat([75.352478, 19.901054]),
      zoom: 12
    });

    this.map = new this.ol.Map({
      layers: [this.osm],
      target: 'map',
      view: this.view
    });
    this.pointStyle = new this.ol.style.Style({
      image: new this.ol.style.Icon({
        anchor: [0.5, 1],
        src: 'https://apagri.infinium.management/temp/point_icon.png',
      })
    });

    this.map.addLayer(this.vector);

    this.orsDirections = new Openrouteservice.Directions({
      api_key: "5b3ce3597851110001cf624837d0d92fba7048cd85a8893a7148bfdb",
      host: "https://api.openrouteservice.org"
    });

    // Example of fetching directions
    // this.getDirections([75.352478, 19.901054], [72.877426, 19.076090]);
  }

  getDirections(start: number[], end: number[]): void {
    this.orsDirections.calculate({
      coordinates: [start, end],
      profile: 'driving-car',
      format: 'geojson'
    })
    .then((json: any) => {
      console.log(json);

      let features = new this.ol.format.GeoJSON().readFeatures(json, {
        featureProjection: 'EPSG:3857'
      });

      this.source.addFeatures(features);
      this.count=0;
    })
    .catch((error: any) => {
      console.error(error);
    });
  }
count=0
  findCoords(evt: any) {
    if(this.isSourcePickActive){
      const coordinate = this.map.getEventCoordinate(evt);
      console.log('Event coordinate:', coordinate);
    
      const transformedCoordinate = this.ol.proj.toLonLat(coordinate);
      console.log('Transformed coordinate:', transformedCoordinate);
 return transformedCoordinate 
    }
  }

addMarker(geo_coords){

  let addMarkserFeature = new this.ol.Feature({
    geometry: new this.ol.geom.Point(this.ol.proj.fromLonLat(geo_coords)),
    featureProjection: 'EPSG:3826',
});

  var vector_layer = new this.ol.layer.Vector({
    source: new this.ol.source.Vector({ features: [addMarkserFeature] })
  });

  addMarkserFeature.setStyle(this.pointStyle);
  this.map.addLayer(vector_layer);
  

}

  isSourcePickActive: boolean = false;
  isDestinationPickActive: boolean = false;

  pickLocation(value:any,event:any) {
    if(value=='start')
    {
      this.isSourcePickActive = !this.isSourcePickActive;
       this.start=this.findCoords(event);
       console.log(this.start);
       this.source_element.nativeElement.value =  this.start;
       this.addMarker(this.start);
      this.isSourcePickActive = !this.isSourcePickActive;
    }
    else{
      this.isDestinationPickActive = !this.isDestinationPickActive;
      this.end=this.findCoords(event);
      console.log(this.end);
      this.destination_element.nativeElement.value =  this.end;
      this.addMarker(this.end);
      this.isDestinationPickActive = !this.isDestinationPickActive;
    }
   
  }

 

  getCurrentLocation(value:any): void {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(position => {
        this.current_coords = [position.coords.longitude, position.coords.latitude];
        console.log('coords',this.current_coords);
        this.addMarker(this.current_coords);
        if(value=='start'){
          this.start=this.current_coords;
          console.log(this.start);
          this.source_element.nativeElement.value =  this.start;
        }
        else{

          this.end=this.current_coords;
          console.log(this.end);
          this.destination_element.nativeElement.value =  this.end;
        }
        

        // const currentLocation = this.ol.proj.fromLonLat(coords);
        // console.log('currentLocation',currentLocation);
      
      //   const marker =  new this.ol.Feature({
      //     geometry: new this.ol.geom.Point(currentLocation),featureProjection: 'EPSG:3826'
      //   });

      //   const vectorSource = new  this.ol.source.VectorSource({
      //     features: [marker]
      //   });
      //   const vectorLayer = new this.ol.layerVectorLayer({
      //     source: vectorSource
      //   });
      //   marker.setStyle(this.pointStyle);
      //   this.map.addLayer(vectorLayer);

      //   // Center map on current location
      //   this.map.getView().setCenter(currentLocation);
      //   this.map.getView().setZoom(18);

      //   // Use ORS API to get routing information
      //   const ors = new Openrouteservice({
      //     api_key: '5b3ce3597851110001cf624837d0d92fba7048cd85a8893a7148bfdb' // Replace with your ORS API key
      //   });

      //   ors.directions({
      //     coordinates: [
      //       coords, // current location
      //       [8.681495, 49.41461] // end point (Heidelberg, Germany)
      //     ],
      //     profile: 'driving-car',
      //     format: 'geojson'
      //   }).then((response: any) => {
      //     const routeGeoJSON = new GeoJSON().readFeatures(response);
      //     const routeVectorSource = new VectorSource({
      //       features: routeGeoJSON
      //     });
      //     const routeVectorLayer = new VectorLayer({
      //       source: routeVectorSource,
      //       style: new Style({
      //         stroke: new Stroke({
      //           color: '#ffcc33',
      //           width: 5
      //         })
      //       })
      //     });
      //     this.map.addLayer(routeVectorLayer);
      //   }).catch((error: any) => {
      //     console.error('Error fetching routing information:', error);
      //   });

      // }, error => {
      //   console.error('Geolocation error:', error);
      });
    }
     else {
      alert('Geolocation is not supported by your browser.');
    }
  }

  findRoute(){
    console.log('this.start, this.end',this.start, this.end)
    this.getDirections(this.start, this.end);
  }
  clear(){
    this.start=[''];
    this.end=[''];
    this.source_element.nativeElement.value =  this.start;
    this.destination_element.nativeElement.value =  this.end;
   
  }
}
✔inital code for direction componenet(not working)
_________________________________________________________________9/7/24

						sql_query := 'SELECT json_build_object(''responseCode'',200,''data'',COALESCE(to_json(array_agg(data1)), 
										''[]''),''responseMessage'',''ok'')::text as data
										FROM (
											SELECT  
											p.parent_layer_id,
											p.parent_layer_name,
											p.status,

											(array_to_json(array( select json_build_object(
														''id'',lm.id,
														''layer_name'',lm.layer_name,
														''visible'',lm.visible,
														''table_name'',lm.table_name,
														''layer_id'',lm.layer_id,
														''geometry_type'',lm.geometry_type,
														''service_url'',lm.service_url,
														''mobile_service_url'',lm.mobile_service_url,
														''parent_layer'',(select parent_layer_name from public.tbl_parent_layer_master pm WHERE pm.parent_layer_id = lm.parent_layer),
														''is_combined_service'',lm.is_combined_service,
														''is_info_popup'',lm.is_info_popup,
														''is_attribute_info'',lm.is_attribute_info,
														''defination'',lm.defination 
														) FROM public.tbl_web_layer_master AS lm WHERE lm.status is true and lm.parent_layer = p.parent_layer_id order by lm.layer_seq desc
											))) AS child_layer

										from public.tbl_parent_layer_master p WHERE p.status is true and p.parent_layer_name in (''Public Service'' , ''Property'', ''Health'' , ''New Projects'' , ''City Amenities'' , ''Education Department'' , ''Health Department'' , ''Layers'',''Classified Satellite Image'',''Satellite Image'',''Elevation Model'',''Disaster Management'',''Assessment Department'') order by p.parent_layer_id)data1;';
	 >>make it 
_________________________________________________________________________________________________________________________10/7/24

				sql_query := 'SELECT json_build_object(''responseCode'',200,''data'',COALESCE(to_json(array_agg(data1)), 
								''[]''),''responseMessage'',''ok'')::text as data
								FROM (
									SELECT  
									p.parent_layer_id,
									p.parent_layer_name,
									p.status,

									(array_to_json(array( select json_build_object(
												''id'',lm.id,
												''layer_name'',lm.layer_name,
												''visible'',lm.visible,
												''table_name'',lm.table_name,
												''layer_id'',lm.layer_id,
												''geometry_type'',lm.geometry_type,
												''service_url'',lm.service_url,
												''mobile_service_url'',lm.mobile_service_url,
												''parent_layer'',(select parent_layer_name from public.tbl_parent_layer_master pm WHERE pm.parent_layer_id = lm.parent_layer),
												''is_combined_service'',lm.is_combined_service,
												''is_info_popup'',lm.is_info_popup,
												''is_attribute_info'',lm.is_attribute_info,
												''defination'',lm.defination 
												) FROM public.tbl_web_layer_master AS lm WHERE lm.status is true and lm.parent_layer = p.parent_layer_id order by lm.layer_seq desc
									))) AS child_layer

								from public.tbl_parent_layer_master p WHERE p.status is true 
								order by p.parent_layer_id)data1;';











-------------------------------------------------------------------------------------------------------✔ sp working for 3d

-- FUNCTION: public.fn_web_get_all_layer_image(text)

-- DROP FUNCTION public.fn_web_get_all_layer_image(text);

CREATE OR REPLACE FUNCTION public.fn_web_get_all_layer_image(
	userjson text)
    RETURNS TABLE(data text) 
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
    ROWS 1000

AS $BODY$
DECLARE
		sql_query text;
		userJsonObject JSON;
		_page_name TEXT DEFAULT '';
		_state_id text;
		
		
	BEGIN
			
			-- SELECT fn_web_get_all_layer_image('{"page_name":"3D","state_id":"1"}');
			-- SELECT fn_web_get_all_layer_image('{"page_name":"3D" }');			
			-- SELECT layer_seq,* from public.tbl_web_layer_master where geometry_type = 'Image'
			-- SELECT * from tbl_parent_layer_master where state_id = 1
			-- select * from tbl_web_layer_master where geometry_type = '3D'
			-- SELECT * from tbl_error_log order by created_on desc limit 10
			
			userJsonObject := cast(userjson AS JSON) :: JSON;
			_page_name := userJsonObject ->> 'page_name';
			_state_id 	:= userJsonObject ->> 'state_id';
			
			IF _page_name = 'dashboard' THEN
			
				IF _state_id = '' THEN

						sql_query := 'SELECT json_build_object(''responseCode'',200,''data'',COALESCE(to_json(array_agg(data1)), 
										''[]''),''responseMessage'',''ok'')::text as data
						missing FROM-clause entry for table "p":fn_web_get_all_layer_image				FROM (
											SELECT  
											p.parent_layer_id,
											p.parent_layer_name,
											p.status,

											(array_to_json(array( select json_build_object(
														''id'',lm.id,
														''layer_name'',lm.layer_name,
														''visible'',lm.visible,
														''table_name'',lm.table_name,
														''layer_id'',lm.layer_id,
														''geometry_type'',lm.geometry_type,
														''service_url'',lm.service_url,
														''mobile_service_url'',lm.mobile_service_url,
														''parent_layer'',(select parent_layer_name from public.tbl_parent_layer_master pm WHERE pm.parent_layer_id = lm.parent_layer),
														''is_combined_service'',lm.is_combined_service,
														''is_info_popup'',lm.is_info_popup,
														''is_attribute_info'',lm.is_attribute_info,
														''defination'',lm.defination 
														) FROM public.tbl_web_layer_master AS lm WHERE lm.status is true and lm.parent_layer = p.parent_layer_id order by lm.layer_seq desc
											))) AS child_layer

										from public.tbl_parent_layer_master p WHERE p.status is true and p.parent_layer_name in (''Public Service'' , ''Property'', ''Health'' , ''New Projects'' , ''City Amenities'' , ''Education Department'' , ''Health Department'' , ''Layers'',''Classified Satellite Image'',''Satellite Image'',''Elevation Model'',''Disaster Management'',''Assessment Department'') order by p.parent_layer_id)data1;';
				ELSE 
				
						sql_query := 'SELECT json_build_object(''responseCode'',200,''data'',COALESCE(to_json(array_agg(data1)), 
										''[]''),''responseMessage'',''ok'')::text as data
										FROM (
											SELECT  
											p.parent_layer_id,
											p.parent_layer_name,
											p.status,
											p.state_id,
											(array_to_json(array( select json_build_object(
														''id'',lm.id,
														''layer_name'',lm.layer_name,
														''visible'',lm.visible,
														''table_name'',lm.table_name,
														''layer_id'',lm.layer_id,
														''geometry_type'',lm.geometry_type,
														''service_url'',lm.service_url,
														''mobile_service_url'',lm.mobile_service_url,
														''parent_layer'',(select parent_layer_name from public.tbl_parent_layer_master pm WHERE pm.parent_layer_id = lm.parent_layer),
														''is_combined_service'',lm.is_combined_service,
														''is_info_popup'',lm.is_info_popup,
														''is_attribute_info'',lm.is_attribute_info,
														''defination'',lm.defination 
														) FROM public.tbl_web_layer_master AS lm WHERE lm.status is true and lm.parent_layer = p.parent_layer_id order by lm.layer_seq desc
											))) AS child_layer

										from public.tbl_parent_layer_master p WHERE p.status is true and p.state_id = '|| _state_id ||'::integer
										and p.parent_layer_name in (''Public Service'' , ''Property'', ''Health'' , ''New Projects'' , ''City Amenities'' , ''Education Department'' , ''Health Department'' , ''Layers'',''Classified Satellite Image'',''Satellite Image'',''Elevation Model'',''Disaster Management'',''Assessment Department'') order by p.parent_layer_id)data1;';
				END IF;

				
			ELSEIF _page_name = 'surveydetail' THEN
		
				sql_query := 'SELECT json_build_object(''responseCode'',200,''data'',COALESCE(to_json(array_agg(data1)), 
								''[]''),''responseMessage'',''ok'')::text as data
								FROM (
									SELECT  
									p.parent_layer_id,
									p.parent_layer_name,
									p.status,

									(array_to_json(array( select json_build_object(
												''id'',lm.id,
												''layer_name'',lm.layer_name,
												''visible'',lm.visible,
												''table_name'',lm.table_name,
												''layer_id'',lm.layer_id,
												''geometry_type'',lm.geometry_type,
												''service_url'',lm.service_url,
												''mobile_service_url'',lm.mobile_service_url,
												''parent_layer'',(select parent_layer_name from public.tbl_parent_layer_master pm WHERE pm.parent_layer_id = lm.parent_layer),
												''is_combined_service'',lm.is_combined_service,
												''is_info_popup'',lm.is_info_popup,
												''is_attribute_info'',lm.is_attribute_info,
												''defination'',lm.defination 
												) FROM public.tbl_web_layer_master AS lm WHERE lm.status is true and lm.parent_layer = p.parent_layer_id order by lm.layer_seq desc
									))) AS child_layer

								from public.tbl_parent_layer_master p WHERE p.status is true and p.parent_layer_name in (''Layers'',''Classified Satellite Image'',''Satellite Image'',''Elevation Model'',''DP department layers'',''Disaster Management'',''Assessment Department'') order by p.parent_layer_id)data1;';
				
				
			ELSEIF _page_name = '3D' THEN
					RAISE NOTICE'3d';
			
		sql_query := 'SELECT json_build_object(''responseCode'',200,''data'',COALESCE(to_json(array_agg(data1)), 
								''[]''),''responseMessage'',''ok'')::text as data
								FROM (
									SELECT  
									p.parent_layer_id,
									p.parent_layer_name,
									p.status,

									(array_to_json(array( select json_build_object(
												''id'',lm.id,
												''layer_name'',lm.layer_name,
												''visible'',lm.visible,
												''table_name'',lm.table_name,
												''layer_id'',lm.layer_id,
												''geometry_type'',lm.geometry_type,
												''service_url'',lm.service_url,
												''mobile_service_url'',lm.mobile_service_url,
												''parent_layer'',(select parent_layer_name from public.tbl_parent_layer_master p  WHERE p.parent_layer_id = lm.parent_layer),
												''is_combined_service'',lm.is_combined_service,
												''is_info_popup'',lm.is_info_popup,
												''is_attribute_info'',lm.is_attribute_info,
												''defination'',lm.defination 
												) FROM public.tbl_web_layer_master AS lm WHERE  lm.geometry_type =''3D''and lm.parent_layer = p.parent_layer_id order by lm.layer_seq desc
									))) AS child_layer

								from public.tbl_parent_layer_master p WHERE p.parent_layer_id in (select parent_layer from public.tbl_web_layer_master where geometry_type=''3D'') 
								order by p.parent_layer_id)data1;';
				
		ELSE
				
				sql_query := 'SELECT json_build_object(''responseCode'',200,''data'',COALESCE(to_json(array_agg(data1)), 
								''[]''),''responseMessage'',''ok'')::text as data
								FROM (
									SELECT  
									p.parent_layer_id,
									p.parent_layer_name,
									p.status,

									(array_to_json(array( select json_build_object(
												''id'',lm.id,
												''layer_name'',lm.layer_name,
												''visible'',lm.visible,
												''table_name'',lm.table_name,
												''layer_id'',lm.layer_id,
												''geometry_type'',lm.geometry_type,
												''service_url'',lm.service_url,
												''mobile_service_url'',lm.mobile_service_url,
												''parent_layer'',(select parent_layer_name from public.tbl_parent_layer_master p  WHERE p.parent_layer_id = lm.parent_layer),
												''is_combined_service'',lm.is_combined_service,
												''is_info_popup'',lm.is_info_popup,
												''is_attribute_info'',lm.is_attribute_info,
												''defination'',lm.defination 
												) FROM public.tbl_web_layer_master AS lm WHERE lm.status is true and lm.parent_layer = p.parent_layer_id order by lm.layer_seq desc
									))) AS child_layer

								from public.tbl_parent_layer_master p WHERE p.status is true 
								order by p.parent_layer_id)data1;';
				
				
			
			END IF;
			RETURN QUERY EXECUTE sql_query;
			RAISE NOTICE '%' , sql_query;
		
		
			EXCEPTION WHEN OTHERS 
			THEN
				DECLARE p_errormessage VARCHAR(4000);
				DECLARE p_errorstate VARCHAR(4000);
				DECLARE p_errorline VARCHAR(4000);

				BEGIN									
					p_errormessage:= SQLERRM;
					p_errorstate:= SQLSTATE;
					GET STACKED DIAGNOSTICS p_errorline = PG_EXCEPTION_CONTEXT;

					INSERT INTO public.tbl_error_log(error_name,error_callstack,error_method,created_on)		
					SELECT p_errorline,p_errormessage||':fn_web_get_all_layer_image',p_errorstate,timezone('Asia/Kolkata'::text, now());

				END;
				sql_query := 'SELECT json_build_object(''responseCode'',201,''responseMessage'',''failed'')::text as data';
				RETURN QUERY EXECUTE sql_query;
	END;
$BODY$;

ALTER FUNCTION public.fn_web_get_all_layer_image(text)
    OWNER TO postgres;





















-------------------------------------------------------------------------------------------------------------------@3d module back up
import { Component, ElementRef, OnInit, ViewEncapsulation } from '@angular/core';
import { SharedModule } from 'src/app/theme/shared/shared.module';
import { Viewer } from 'cesium';
import * as Cesium from 'cesium';
import { RouterOutlet } from '@angular/router';
import { CommonModule } from '@angular/common';
import { trigger, transition, style, animate, state } from '@angular/animations';
import { MatInputModule } from '@angular/material/input';
import { MatSelectModule } from '@angular/material/select';
import { MatFormFieldModule } from '@angular/material/form-field';
import { FormsModule } from '@angular/forms';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { CommonsService } from 'src/app/services/commons.service';
import * as turf from '@turf/turf';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatIconModule } from '@angular/material/icon';
import * as glob from '../../../environments/environment';
import { MatSlideToggleModule } from '@angular/material/slide-toggle';
import html2canvas from 'html2canvas';
import { LabelModule } from '@progress/kendo-angular-label';
import { DropDownsModule } from '@progress/kendo-angular-dropdowns';
import { DateInputsModule } from '@progress/kendo-angular-dateinputs';
import { TreeViewModule } from '@progress/kendo-angular-treeview';
import { GridModule, ExcelModule, PDFModule } from '@progress/kendo-angular-grid';
import { DialogModule } from '@progress/kendo-angular-dialog';
import { WorkbookSheet, ExcelExportData } from '@progress/kendo-angular-excel-export';
import { ReactiveFormsModule, FormGroup, FormControl, Validators } from '@angular/forms';
import { MatButtonModule } from '@angular/material/button';
import { MatMenuModule } from '@angular/material/menu';


interface Food {
  value: string;
  viewValue: string;
}

@Component({
  selector: 'app-3d',
  standalone: true,
  //imports: [SharedModule],
  templateUrl: './3d.component.html',
  styleUrls: ['./3d.component.scss'],
  encapsulation: ViewEncapsulation.None,
  imports: [LabelModule, DropDownsModule, TreeViewModule, DialogModule, DateInputsModule, RouterOutlet, CommonModule, MatInputModule, MatSelectModule, MatButtonToggleModule, MatIconModule, MatSlideToggleModule, ReactiveFormsModule, MatButtonModule, MatMenuModule, MatFormFieldModule],
  animations: [
    trigger('widthGrow', [
      state('closed', style({
        height: 0,
      })),
      state('open', style({
        height: 500
      })),
      transition('* => *', animate(900))
    ]),
  ]
  //template: '<div appCesium></div>'
})

export default class _3D implements OnInit {
  data: any[] = [];
  bimdata: any[] = [];
  viewer: any;
  current_image: any;
  imageryLayers: any;
  map_3d_data = new Array();
  dropDownData: any;
  drawingMode: any = "line";
  activeShapePoints: any[] = [];
  activeShape: any;
  floatingPoint: any;
  handler: any;
  LineMeasurementhandler: any;
  infoClickHandler: any;
  geoJson: any;
  points: any[] = [];
  lineGraphics;
  labelEntities: any[] = [];
  dblClick = false;
  measureEnabled = false;
  polygonMeasureEnabled = false;
  info_click = false;
  goto_click = false;
  property_data: any;
  add_bim_data_click = false;
  pointmodelEntity: any;
  modelEntity: any;

  loadSatelliteImg: false;

  private url = glob.environment.baseUrl;

  galleryImg: any = "Satellite Map";

  formSubmitted = false;

  propertyDataInfohandler: any;
  propertyDataInfo_click = false;

  gridarr: any[] = [];
  gridInfoKeys: any;

  silhouetteGreen: any = Cesium.PostProcessStageLibrary.createEdgeDetectionStage();
  silhouetteBlue: any = Cesium.PostProcessStageLibrary.createEdgeDetectionStage();

  selected: any = {
    feature: undefined,
    originalColor: new Cesium.Color(),
  };

  highlighted: any = {
    feature: undefined,
    originalColor: new Cesium.Color(),
  };

  selectedEntity: any = new Cesium.Entity();

  state = "closed";
  addBimDataHandler: any;

  latitude: any;
  longitude: any;
  bimDataForm: FormGroup;
  DataFormDetail: FormGroup;
  show: boolean = false;
  public editDialog: any = false;
  public layerDetailDialog: any = false;
  feature_name: any;
  selectFeatureDialog: any = false;

  gotopoint: any = null;
  cctv_entity: any[] = [];

  flag_details: any = null;


  constructor(private http: HttpClient,
    private commonService: CommonsService,
  ) { }

  ngOnInit() {

    this.bimDataForm = new FormGroup({
      feature_name: new FormControl()
    });

    this.DataFormDetail = new FormGroup({
      cctv_asset_id: new FormControl(),
      location_name: new FormControl(),
      junction_type: new FormControl(),
      pstation_name: new FormControl()
    })

    this.initializeViewer();

    this.get_layer_panel_data("3D", "");

    var canvas = document.createElement('div');

    this.handler = new Cesium.ScreenSpaceEventHandler(this.viewer.canvas);

    this.LineMeasurementhandler = new Cesium.ScreenSpaceEventHandler(this.viewer.scene.canvas);
    

    this.addBimDataHandler = new Cesium.ScreenSpaceEventHandler(this.viewer.scene.canvas);

    this.propertyDataInfohandler = new Cesium.ScreenSpaceEventHandler(this.viewer.scene.canvas);

    this.silhouetteGreen.uniforms.color = Cesium.Color.LIME;
    this.silhouetteGreen.uniforms.length = 0.01;
    this.silhouetteGreen.selected = [];

    this.silhouetteBlue.uniforms.color = Cesium.Color.BLUE;
    this.silhouetteBlue.uniforms.length = 0.01;
    this.silhouetteBlue.selected = [];


    this.viewer.scene.postProcessStages.add(
      Cesium.PostProcessStageLibrary.createSilhouetteStage([
        this.silhouetteBlue,
        this.silhouetteGreen,
      ])
    );

    this.imageryLayers = this.viewer.imageryLayers; 

  }


  reactiveForm = new FormGroup({
    layer_name: new FormControl('', [Validators.required, Validators.minLength(1), Validators.maxLength(250)]),
    table_name: new FormControl('', [Validators.required, Validators.minLength(1), Validators.maxLength(250)]),
    layer_id: new FormControl('', [Validators.required, Validators.minLength(1), Validators.maxLength(250)]),
    layer_type: new FormControl('', [Validators.required]),
    parent_layer: new FormControl('', [Validators.required]),
    service_url: new FormControl('', [Validators.required, Validators.minLength(1), Validators.maxLength(1000)]),
    geometry_type: new FormControl('', [Validators.required]),
    scale_start: new FormControl('', [Validators.required]),
    scale_end: new FormControl('', [Validators.required]),
    status: new FormControl(),
    z_index: new FormControl(),
    wms: new FormControl(),
    info_click: new FormControl(),
    first_time: new FormControl()
  });


  public validate(): void {
    if (this.reactiveForm.invalid) {
      for (const control of Object.keys(this.reactiveForm.controls)) {
        this.reactiveForm.controls[control].markAsTouched();
      }
      return;
    }
    else {

      var wmsElement = <HTMLInputElement>document.getElementById("wms");
      var statusElement = <HTMLInputElement>document.getElementById("status");
      var info_clickElement = <HTMLInputElement>document.getElementById("info_click");
      var first_timeElement = <HTMLInputElement>document.getElementById("first_time");

      var form_data = {
        flag: "insert",
        layer_name: this.reactiveForm.controls.layer_name.value,
        table_name: this.reactiveForm.controls.table_name.value,
        layer_id: this.reactiveForm.controls.layer_id.value,
        layer_type: this.reactiveForm.controls.layer_type.value,
        parent_layer: this.reactiveForm.controls.parent_layer.value,
        service_url: this.reactiveForm.controls.service_url.value,
        geometry_type: this.reactiveForm.controls.geometry_type.value,
        scale_start: this.reactiveForm.controls.scale_start.value,
        scale_end: this.reactiveForm.controls.scale_end.value,
        wms: wmsElement.checked,
        status: statusElement.checked,
        is_info_click: info_clickElement.checked,
        z_index: this.reactiveForm.controls.z_index.value,
        is_first_time_load: first_timeElement.checked
      }

      this.commonService.crudLayerManagement(form_data).subscribe((data: any) => {
        console.log(data);
      });
    }
  }

  toggleCollapse(parentLayerId: number) {
    const collapseId = 'panelsStayOpen-collapse' + parentLayerId;
    const collapseElement = document.getElementById(collapseId);
    if (collapseElement) {
      collapseElement.classList.toggle('show');
    }
  }

  addLayerDetails() {
    this.formSubmitted = true;
    if (this.reactiveForm.valid) {
      return;
    }
  }

  public closeEditDialog() {
    this.editDialog = false;
    this.DataFormDetail.reset();
  }

  public openEditDialog() {
    this.editDialog = true;
  }

  public openLayerDetailDialog() {
    this.layerDetailDialog = true;

    /** Below Commented Code is to get all 3d data from db and add 3d object to map */
    // var form_data = {
    //   flag: "fetch"
    // }

    // this.commonService.crudBimData(form_data).subscribe((data: any) => {
    //   this.bimdata = data.data;    

    //   for(var i=0; i< this.bimdata.length; i++){
    //     this.add_data_on_click(this.bimdata[i].longitude , this.bimdata[i].latitude , "get" , this.bimdata[i] , "cctv");
    //   }

    // });


  }

  public closeLayerDetailDialog() {
    this.formSubmitted = false;
    this.reactiveForm.reset();
    this.layerDetailDialog = false;
  }

  get_layer_by_state_id(event) {


    var state_id = event.value;

    this.get_layer_panel_data("3D", state_id);

  }

  showHideData(event) {
    var service_url = event.target.getAttribute("service-url");
    var mobile_service_url = event.target.getAttribute("mobile_service_url")
    var is_combined_service = event.target.getAttribute("combined_service");
    var parent_layer = event.target.getAttribute("parent_layer");
    var table_name = event.target.getAttribute("value");
    var flag_status = event.target.getAttribute("_id");
    var imageryLayers = this.viewer.imageryLayers;

    if (event.target.checked == true) {

    var form_data = {
      flag: "fetch"
    }

    this.http.post("https://apagri.infinium.management/midcgis/layer/crud_cctv_location", form_data).subscribe((data: any) => {
      this.bimdata = data.data;    

      for(var i=0; i< this.bimdata.length; i++){
        this.add_data_on_click(this.bimdata[i].longitude , this.bimdata[i].latitude , "get" , this.bimdata[i] , table_name);
      }

    });

    }
    else {

      for(var i=0; i<this.cctv_entity.length; i++){
      this.viewer.entities.remove(this.cctv_entity[i]);
      }


    }
  }


  get_layer_panel_data(pageName, stateId) {
    this.data = [];
    var formData = {
      flag: "fetch_all",
      layer_type: "3D"
    }

    this.commonService.getLayerAndImagePanel(formData).subscribe((data: any) => {
      this.data = data.data;

    });


  }


  async add_remove_3d_data_new(assest_id, flag) {
    if (flag) {
      var tileurl = "https://re-gis.mcgm.gov.in:9443/data/" + assest_id + "/tileset.json";
      var _3dTileSet = await Cesium.Cesium3DTileset.fromUrl(tileurl); //2409626 //2411758
      this.viewer.scene.primitives.add(_3dTileSet);
      this.viewer.flyTo(_3dTileSet);
      this.map_3d_data.push(_3dTileSet);
      this.map_3d_data[assest_id] = _3dTileSet;
    } else {
      this.map_3d_data[assest_id].show = false;
    }
  }


  /* Measurement Starts */
  createPoint(worldPosition) {
    const point = this.viewer.entities.add({
      position: worldPosition,
      point: {
        color: Cesium.Color.RED,
        pixelSize: 5,
        //heightReference: Cesium.HeightReference.CLAMP_TO_GROUND,
      },
    });
    return point;
  }

  drawShape(positionData) {
    let shape;
    if (this.drawingMode === "polygon") {
      shape = this.viewer.entities.add({
        polygon: {
          hierarchy: positionData,
          material: new Cesium.ColorMaterialProperty(
            Cesium.Color.WHITE.withAlpha(0.7)
          ),
        },
      });
    }
    return shape;
  }

  clearAllMeasurementData() {
    this.property_data = null;
    this.viewer.entities.removeAll();
    this.add_bim_data_click = false;
    this.propertyDataInfo_click = false;
    this.goto_click = false;
    this.info_click = false;
    this.measureEnabled = false;
    this.polygonMeasureEnabled = false;
  }

  clearMeasurements() {
    this.points = [];
    if (Cesium.defined(this.lineGraphics)) {
      this.viewer.entities.remove(this.lineGraphics);
    }
    for (var i = 0; i < this.labelEntities.length; i++) {
      this.viewer.entities.remove(this.labelEntities[i]);
    }
    this.labelEntities = [];
  }


  measurementType(event) {

    if (event.currentTarget.title == "Measure polyline") {

      this.measureEnabled = !this.measureEnabled;
      this.goto_click = false;
      this.polygonMeasureEnabled = false;
      this.info_click = false;
      this.add_bim_data_click = false;

      this.clearMeasurements();

      if (this.measureEnabled) {

        this.clearMeasurements();

        this.LineMeasurementhandler.setInputAction((click) => {

          if (!this.measureEnabled) {
            return;
          }

          if (this.dblClick == true) {
            this.points = [];
            this.clearMeasurements();
          }
          this.dblClick = false;

          var ray = this.viewer.camera.getPickRay(click.position);
          var cartesian = this.viewer.scene.pickPosition(click.position);

          if (Cesium.defined(cartesian)) {
            if (this.points.length === 0) {
              this.points.push(cartesian);
            } else {
              this.points.push(cartesian);
              this.drawLines();
            }
          }
        }, Cesium.ScreenSpaceEventType.LEFT_CLICK);

        this.LineMeasurementhandler.setInputAction((click) => {
          var ray = this.viewer.camera.getPickRay(click.position);
          var cartesian = this.viewer.scene.pickPosition(click.position);

          if (Cesium.defined(cartesian) && this.points.length > 1) {
            var totalDistance = 0;
            for (var i = 0; i < this.points.length - 1; i++) {
              totalDistance += Cesium.Cartesian3.distance(this.points[i], this.points[i + 1]);
            }

            console.log('Total distance between all points: ' + totalDistance.toFixed(2) + ' meters');

            var midpoint = Cesium.Cartesian3.lerp(this.points[i - 1], this.points[i], 0.5, new Cesium.Cartesian3());

            var entity = this.viewer.entities.add({
              position: midpoint,
              // point : {
              //     pixelSize : 10,
              //     color : Cesium.Color.YELLOW
              // },
              label: {
                showBackground: true,
                text: totalDistance.toFixed(2) + ' meters',
                backgroundColor: Cesium.Color.BLACK,
                border: 1

              }
            });

            this.labelEntities.push(entity);

            // var labelEntity = this.viewer.entities.add({
            //   position: midpoint,
            //   label: {
            //     text: totalDistance.toFixed(2) + ' meters',
            //     font: '12px sans-serif',
            //     fillColor: Cesium.Color.BLACK,
            //     outlineColor: Cesium.Color.BLACK,
            //     outlineWidth: 0.5,
            //     style: Cesium.LabelStyle.FILL_AND_OUTLINE,
            //   }
            // });
            // this.labelEntities.push(labelEntity);

            this.dblClick = true;
          }
        }, Cesium.ScreenSpaceEventType.LEFT_DOUBLE_CLICK);

      }
    }
    else {

      this.polygonMeasureEnabled = !this.polygonMeasureEnabled;

      this.measureEnabled = false;
      this.goto_click = false;
      this.info_click = false;
      this.add_bim_data_click = false;

      this.viewer.entities.removeAll();

      this.drawingMode = "polygon";

      this.handler.setInputAction((event) => {

        if (!this.polygonMeasureEnabled) {
          return;
        }

        const ray = this.viewer.camera.getPickRay(event.position);
        const earthPosition = this.viewer.scene.globe.pick(ray, this.viewer.scene);
        if (Cesium.defined(earthPosition)) {
          if (this.activeShapePoints.length === 0) {
            this.floatingPoint = this.createPoint(earthPosition);
            this.activeShapePoints.push(earthPosition);
            const dynamicPositions = new Cesium.CallbackProperty(() => {
              if (this.drawingMode === "polygon") {
                return new Cesium.PolygonHierarchy(this.activeShapePoints);
              }
              return this.activeShapePoints;
            }, false);
            this.activeShape = this.drawShape(dynamicPositions);
          }
          this.activeShapePoints.push(earthPosition);
          this.createPoint(earthPosition);
        }
      }, Cesium.ScreenSpaceEventType.LEFT_CLICK);

      this.handler.setInputAction((event) => {
        if (Cesium.defined(this.floatingPoint)) {
          const ray = this.viewer.camera.getPickRay(event.endPosition);
          const newPosition = this.viewer.scene.globe.pick(ray, this.viewer.scene);
          if (Cesium.defined(newPosition)) {
            this.floatingPoint.position.setValue(newPosition);
            this.activeShapePoints.pop();
            this.activeShapePoints.push(newPosition);
          }
        }
      }, Cesium.ScreenSpaceEventType.MOUSE_MOVE);

      this.handler.setInputAction((event) => {
        if (this.drawingMode === "polygon" && this.activeShapePoints.length > 2) {

          this.geoJson = null;
          this.geoJson = this.getGeoJsonFromPolygon(this.activeShapePoints);
          this.geoJson.features[0].geometry.coordinates[0].splice(this.geoJson.features[0].geometry.coordinates[0].length - 1, 1);
          this.geoJson.features[0].geometry.coordinates[0].push(this.geoJson.features[0].geometry.coordinates[0][0]);
          const area = turf.area(this.geoJson);
          console.log(area);
          this.terminateShape();

          var cartesian = this.viewer.scene.pickPosition(event.position);

          var cartographic = Cesium.Cartographic.fromCartesian(cartesian);
          var longitude = Cesium.Math.toDegrees(cartographic.longitude);
          var latitude = Cesium.Math.toDegrees(cartographic.latitude);

          var entity = this.viewer.entities.add({
            position: cartesian,
            label: {
              pixelSize: 1,
              showBackground: true,
              text: area.toFixed(2) + ' sq.m\^2',
              backgroundColor: Cesium.Color.BLACK,
              border: 1

            },
          });


        }
      }, Cesium.ScreenSpaceEventType.RIGHT_CLICK);


    }


  }

  getFeature() {
    this.selectFeatureDialog = false;
    this.editDialog = true;
    this.flag_details = 'create'
  }

  UpdateFeature(){
    this.editDialog = true;
    this.flag_details = 'update'
  }

  closeFeatureDialog() {
    this.selectFeatureDialog = false;
  }

  add_bim_data(event) {

    this.feature_name = event.target.value;
    this.selectFeatureDialog = true;

    this.add_bim_data_click = !this.add_bim_data_click;
    this.measureEnabled = false;
    this.goto_click = false;
    this.polygonMeasureEnabled = false;
    this.info_click = false;

    this.addBimDataHandler.setInputAction((click) => {

      if (this.add_bim_data_click == false) {
        return;
      }
      else {

        var cartesian = this.viewer.scene.pickPosition(click.position);


        var cartographic = Cesium.Cartographic.fromCartesian(cartesian);
        console.log(
          'lon ' + Cesium.Math.toDegrees(cartographic.longitude) + ', ' +
          'lat ' + Cesium.Math.toDegrees(cartographic.latitude) + ', ' +
          'alt ' + cartographic.height);

        this.add_data_on_click(Cesium.Math.toDegrees(cartographic.longitude), Cesium.Math.toDegrees(cartographic.latitude), "create", "", event.target.value);
      }
    }, Cesium.ScreenSpaceEventType.LEFT_CLICK);

  }

  add_data_on_click(long, lat, type, response, Featuretype) {
    if (type == "create") {

      this.latitude = lat;
      this.longitude = long;

      console.log("Lat = ", this.latitude);

      if (Featuretype == "car") {

        this.modelEntity = this.viewer.entities.add({
          name: "milktruck",
          position: Cesium.Cartesian3.fromDegrees(long, lat),
          model: {
            uri:
              "../../../assets/3d_data/CesiumMilkTruck.glb",
            minimumPixelSize: 30,
            // maximumScale: 20000,
            heightReference: Cesium.HeightReference.CLAMP_TO_GROUND
          },

        });

        const initialOrientation = Cesium.Transforms.headingPitchRollQuaternion(
          this.modelEntity.position.getValue(this.viewer.clock.currentTime),
          new Cesium.HeadingPitchRoll(0, 0, 0)
        );

        this.modelEntity.orientation = initialOrientation;

        return;

      }
      if (Featuretype == "street_light") {

        this.modelEntity = this.viewer.entities.add({
          name: "milktruck",
          position: Cesium.Cartesian3.fromDegrees(long, lat),
          model: {
            uri:
              "../../../assets/3d_data/dividerStreetLight.glb",
            minimumPixelSize: 30,
            // maximumScale: 20000,
            heightReference: Cesium.HeightReference.CLAMP_TO_GROUND
          },

        });

        const initialOrientation = Cesium.Transforms.headingPitchRollQuaternion(
          this.modelEntity.position.getValue(this.viewer.clock.currentTime),
          new Cesium.HeadingPitchRoll(0, 0, 0)
        );

        this.modelEntity.orientation = initialOrientation;

        return;

      }
      if (Featuretype == "cctv") {

        this.modelEntity = this.viewer.entities.add({
          name: "milktruck",
          position: Cesium.Cartesian3.fromDegrees(long, lat),
          model: {
            uri:
              "../../../assets/3d_data/cctv.glb",
            minimumPixelSize: 30,
            // maximumScale: 20000,
            heightReference: Cesium.HeightReference.CLAMP_TO_GROUND
          },


        });

        const initialOrientation = Cesium.Transforms.headingPitchRollQuaternion(
          this.modelEntity.position.getValue(this.viewer.clock.currentTime),
          new Cesium.HeadingPitchRoll(0, 0, 0)
        );

        this.modelEntity.orientation = initialOrientation;

        return;

      }

      if (Featuretype == "smart_pole") {

        this.modelEntity = this.viewer.entities.add({
          name: "milktruck",
          position: Cesium.Cartesian3.fromDegrees(long, lat),
          model: {
            uri:
              "../../../assets/3d_data/smart_pole.glb",
            minimumPixelSize: 30,
            // maximumScale: 20000,
            heightReference: Cesium.HeightReference.CLAMP_TO_GROUND
          },

        });

        const initialOrientation = Cesium.Transforms.headingPitchRollQuaternion(
          this.modelEntity.position.getValue(this.viewer.clock.currentTime),
          new Cesium.HeadingPitchRoll(0, 0, 0)
        );

        this.modelEntity.orientation = initialOrientation;

        return;

      }

    }
    else {

      // if (Featuretype == "car") {

      //   let modelEntity = this.viewer.entities.add({
      //     name: "milktruck",
      //     position: Cesium.Cartesian3.fromDegrees(long, lat),
      //     model: {
      //       uri:
      //         "../../../assets/3d_data/CesiumMilkTruck.glb",
      //       minimumPixelSize: 30,
      //       // maximumScale: 20000,
      //       heightReference: Cesium.HeightReference.CLAMP_TO_GROUND
      //     },

      //   });

      //   const initialOrientation = Cesium.Transforms.headingPitchRollQuaternion(
      //     modelEntity.position.getValue(this.viewer.clock.currentTime),
      //     new Cesium.HeadingPitchRoll(0, 0, 0)
      //   );

      //   modelEntity.orientation = initialOrientation;

      //   if (response.orientation != null) {
      //     var result = JSON.parse(response.orientation);

      //     modelEntity.orientation._value.w = result.w
      //     modelEntity.orientation._value.x = result.x
      //     modelEntity.orientation._value.y = result.y
      //     modelEntity.orientation._value.z = result.z
      //   }

      //   return;

      // }

      // if (Featuretype == "street_light") {

      //   let modelEntity = this.viewer.entities.add({
      //     name: "milktruck",
      //     position: Cesium.Cartesian3.fromDegrees(long, lat),
      //     model: {
      //       uri:
      //         "../../../assets/3d_data/dividerStreetLight.glb",
      //       minimumPixelSize: 30,
      //       // maximumScale: 20000,
      //       heightReference: Cesium.HeightReference.CLAMP_TO_GROUND
      //     },

      //   });

      //   const initialOrientation = Cesium.Transforms.headingPitchRollQuaternion(
      //     modelEntity.position.getValue(this.viewer.clock.currentTime),
      //     new Cesium.HeadingPitchRoll(0, 0, 0)
      //   );

      //   modelEntity.orientation = initialOrientation;

      //   if (response.orientation != null) {
      //     var result = JSON.parse(response.orientation);

      //     modelEntity.orientation._value.w = result.w
      //     modelEntity.orientation._value.x = result.x
      //     modelEntity.orientation._value.y = result.y
      //     modelEntity.orientation._value.z = result.z
      //   }

      //   return;


      // }

      // if (Featuretype == "cctv") {

      //   var propertyBag = new Cesium.PropertyBag();
      //   propertyBag.addProperty('cctv_asset_id', response.cctv_asset_id);
      //   propertyBag.addProperty('cctv_id', response.cctv_id);
      //   propertyBag.addProperty('junction_type', response.junction_type);
      //   propertyBag.addProperty('latitude', response.latitude);
      //   propertyBag.addProperty('location_name', response.location_name);
      //   propertyBag.addProperty('longitude', response.longitude);
      //   propertyBag.addProperty('police_station_name', response.police_station_name);

      //   console.log(response);

      //   let modelEntity = this.viewer.entities.add({
      //     name: "milktruck",
      //     position: Cesium.Cartesian3.fromDegrees(long, lat),
      //     model: {
      //       uri:
      //         "../../../assets/3d_data/cctv.glb",
      //       minimumPixelSize: 30,
      //       // maximumScale: 20000,
      //       heightReference: Cesium.HeightReference.CLAMP_TO_GROUND
      //     },
      //     properties: propertyBag

      //   });

      //   const initialOrientation = Cesium.Transforms.headingPitchRollQuaternion(
      //     modelEntity.position.getValue(this.viewer.clock.currentTime),
      //     new Cesium.HeadingPitchRoll(0, 0, 0)
      //   );

      //   modelEntity.orientation = initialOrientation;

      //   if (response.orientation != null) {
      //     var result = JSON.parse(response.orientation);

      //     modelEntity.orientation._value.w = result.w
      //     modelEntity.orientation._value.x = result.x
      //     modelEntity.orientation._value.y = result.y
      //     modelEntity.orientation._value.z = result.z
      //   }

      //   return;


      // }

        var propertyBag = new Cesium.PropertyBag();
        propertyBag.addProperty('cctv_asset_id', response.cctv_asset_id);
        propertyBag.addProperty('cctv_id', response.cctv_id);
        propertyBag.addProperty('junction_type', response.junction_type);
        propertyBag.addProperty('latitude', response.latitude);
        propertyBag.addProperty('location_name', response.location_name);
        propertyBag.addProperty('longitude', response.longitude);
        propertyBag.addProperty('pstation_name', response.police_station_name);

        console.log(response);

        let modelEntity = this.viewer.entities.add({
          name: "milktruck",
          position: Cesium.Cartesian3.fromDegrees(long, lat),
          model: {
            uri:
              "../../../assets/3d_data/" + Featuretype +".glb",
            minimumPixelSize: 30,
            // maximumScale: 20000,
            heightReference: Cesium.HeightReference.CLAMP_TO_GROUND
          },
          properties: propertyBag

        });

        this.cctv_entity.push(modelEntity);

        const initialOrientation = Cesium.Transforms.headingPitchRollQuaternion(
          modelEntity.position.getValue(this.viewer.clock.currentTime),
          new Cesium.HeadingPitchRoll(0, 0, 0)
        );

        modelEntity.orientation = initialOrientation;

        if (response.orientation != null) {
          var result = JSON.parse(response.orientation);

          modelEntity.orientation._value.w = result.w
          modelEntity.orientation._value.x = result.x
          modelEntity.orientation._value.y = result.y
          modelEntity.orientation._value.z = result.z
        }

        return;




    }

  }

  rotateEntity(entity, angleDegrees) {

    const angleRadians = Cesium.Math.toRadians(angleDegrees);
    const rotationQuat = Cesium.Quaternion.fromAxisAngle(
      new Cesium.Cartesian3(0, 0, 1),
      angleRadians
    );
    const currentOrientation = this.modelEntity.orientation.getValue(this.viewer.clock.currentTime);
    const newOrientation = Cesium.Quaternion.multiply(currentOrientation, rotationQuat, new Cesium.Quaternion());
    this.modelEntity.orientation = newOrientation;

    console.log(this.modelEntity.orientation);

  }

  add_bim_data_to_db($event) {

    var form_data;
    if(this.flag_details == 'create'){

      form_data = {

      cctv_asset_id: this.DataFormDetail.controls['cctv_asset_id'].value,
      location_name: this.DataFormDetail.controls['location_name'].value,
      junction_type: this.DataFormDetail.controls['junction_type'].value,
      police_station_name: this.DataFormDetail.controls['pstation_name'].value,
      latitude: this.latitude,
      longitude: this.longitude,
      orientation: this.modelEntity.orientation._value,
      flag: "create"

    }

  }

  if(this.flag_details == 'update'){

    form_data = {

      cctv_id: this.gridarr['cctv_id'],
      cctv_asset_id: this.DataFormDetail.controls['cctv_asset_id'].value,
      location_name: this.DataFormDetail.controls['location_name'].value,
      junction_type: this.DataFormDetail.controls['junction_type'].value,
      police_station_name: this.DataFormDetail.controls['pstation_name'].value,
      orientation: this.modelEntity.orientation._value,
      flag: "update"

    }

  }

    this.latitude = null;
    this.longitude = null;

    console.log(form_data);

    this.commonService.crudBimData(form_data).subscribe((data: any) => {
      this.bimdata = data.data;
    });
    this.DataFormDetail.reset();
    this.editDialog = false;

  }

  getBimData() {

    var form_data = {
      flag: "fetch"
    }

    this.commonService.crudBimData(form_data).subscribe((data: any) => {
      this.bimdata = data.data;

      for (var i = 0; i < this.bimdata.length; i++) {
        this.add_data_on_click(this.bimdata[i].longitude, this.bimdata[i].latitude, "get", this.bimdata[i], "car");
      }

    });




  }

  openPopup() {
    this.show = !this.show;
  }

  drawLines() {
    if (Cesium.defined(this.lineGraphics)) {
      this.viewer.entities.remove(this.lineGraphics);
    }
    for (var i = 0; i < this.labelEntities.length; i++) {
      this.viewer.entities.remove(this.labelEntities[i]);
    }

    var linePositions = [];
    var totalDistance = 0;
    for (var i = 0; i < this.points.length; i++) {
      linePositions.push(this.points[i].clone());
      if (i > 0) {
        var distance = Cesium.Cartesian3.distance(this.points[i - 1], this.points[i]);
        totalDistance += distance;
        var midpoint = Cesium.Cartesian3.lerp(this.points[i - 1], this.points[i], 0.5, new Cesium.Cartesian3());
        var labelEntity = this.viewer.entities.add({
          position: midpoint,
          label: {
            text: distance.toFixed(2) + ' meters',
            font: '12px sans-serif',
            fillColor: Cesium.Color.BLACK,
            outlineColor: Cesium.Color.BLACK,
            outlineWidth: 0.5,
            style: Cesium.LabelStyle.FILL_AND_OUTLINE,
            //= heightReference: Cesium.HeightReference.CLAMP_TO_GROUND
          }
        });
        this.labelEntities.push(labelEntity);
      }
    }

    this.lineGraphics = this.viewer.entities.add({
      polyline: {
        positions: linePositions,
        width: 3,
        material: new Cesium.PolylineOutlineMaterialProperty({
          color: Cesium.Color.RED,
          outlineWidth: 2,
          outlineColor: Cesium.Color.WHITE
        })
      }
    });

  }

  terminateShape() {
    this.viewer.entities.removeAll();
    this.activeShapePoints.pop();
    this.drawShape(this.activeShapePoints);
    this.viewer.entities.remove(this.floatingPoint);
    this.viewer.entities.remove(this.activeShape);
    this.floatingPoint = undefined;
    this.activeShape = undefined;
    this.activeShapePoints = [];
  }

  getGeoJsonFromPolygon(positionData) {
    const positions = positionData.map(position => {
      const cartographic = Cesium.Cartographic.fromCartesian(position);
      return [Cesium.Math.toDegrees(cartographic.longitude), Cesium.Math.toDegrees(cartographic.latitude)];
    });


    const geoJson = {
      "type": "FeatureCollection",
      "features": [
        {
          "type": "Feature",
          "geometry": {
            "type": "Polygon",
            "coordinates": [positions]
          },
          "properties": {}
        }
      ]
    }

    return geoJson;
  }


  /* Measurement Ends */

  /** 3D INFO CLICK starts*/

  infoOf3DData() {

    /** BElow Code is to get Info of 3d object plotted by user */
    this.goto_click = false;
    this.measureEnabled = false;
    this.polygonMeasureEnabled = false;
    this.info_click = false;

    if (this.propertyDataInfo_click == true) {
      //document.querySelector("#property_tbl").setAttribute("style" , "display: none");
      this.propertyDataInfo_click = false;
    }
    else {
      this.propertyDataInfo_click = true;
    }


    this.propertyDataInfohandler.setInputAction((movement) => {

      if (!this.propertyDataInfo_click) {
        return;
      }
      else {

        var pickedFeature = this.viewer.scene.pick(movement.position);
        if (Cesium.defined(pickedFeature.id)) {
        
        this.gridInfoKeys =  pickedFeature.id.properties._propertyNames;

        
          this.modelEntity = pickedFeature.id;
          // const initialOrientation = Cesium.Transforms.headingPitchRollQuaternion(
          //   this.modelEntity.id.position.getValue(this.viewer.clock.currentTime),
          //   new Cesium.HeadingPitchRoll(0, 0, 0)
          // );
  
          // this.modelEntity.orientation = initialOrientation;
          
        for(let i=0; i<Object.values(pickedFeature.id.properties._propertyNames).length; i++){
          var key:any = Object.values(pickedFeature.id.properties._propertyNames)[i];

          this.gridarr[key] = pickedFeature.id.properties[key]._value;       
          
          if(key != 'latitude' && key != 'longitude' && key!= 'cctv_id'){
          this.DataFormDetail.controls[key].setValue(this.gridarr[key]);
          }

      }

      alert('Clicked');
      this.flag_details = 'update';
      console.log(this.gridInfoKeys);
      console.log(this.gridarr);
      this.selectFeatureDialog = false;
      this.editDialog = true;
    }

      }


     }, Cesium.ScreenSpaceEventType.RIGHT_CLICK);

  }

  /** 3D INFO CLICK ends */


  /** INFO CLICK */
  featureInfo() {

    this.goto_click = false;
    this.measureEnabled = false;
    this.polygonMeasureEnabled = false;

    if (this.info_click == true) {
      //document.querySelector("#property_tbl").setAttribute("style" , "display: none");
      this.info_click = false;
    }
    else {
      this.info_click = true;
    }


    let infoClickHandler = new Cesium.ScreenSpaceEventHandler(this.viewer.scene.canvas);

    infoClickHandler.setInputAction((movement) => {

      if (!this.info_click) {
        return;
      }
      else {

        this.silhouetteGreen.selected = [];
        var pickedFeature = this.viewer.scene.pick(movement.position);
        if (!Cesium.defined(pickedFeature)) {

          return;
        }


        if (this.silhouetteGreen.selected[0] === pickedFeature) {
          return;
        }


        var highlightedFeature = this.silhouetteBlue.selected[0];
        if (pickedFeature === highlightedFeature) {
          this.silhouetteBlue.selected = [];
        }


        this.silhouetteGreen.selected = [pickedFeature];


        var featureName = pickedFeature.getProperty("Prabhag");

        this.property_data = [
          {
            value: 'Name',
            field: pickedFeature.getProperty("Name"),
          },
          {
            value: 'UID',
            field: pickedFeature.getProperty("Prabhag"),
          },
          {
            value: 'Area Sq.m',
            field: pickedFeature.getProperty("Area_Sq_m"),
          },
          {
            value: 'Height m',
            field: pickedFeature.getProperty("Height_m"),
          },
          {
            value: 'X',
            field: pickedFeature.getProperty("X"),
          },
          {
            value: 'Y',
            field: pickedFeature.getProperty("Y"),
          },
          {
            value: 'FUID',
            field: pickedFeature.getProperty("FUID"),
          },
          {
            value: 'Ward',
            field: pickedFeature.getProperty("Ward"),
          },
          {
            value: 'Prabhag',
            field: pickedFeature.getProperty("Prabhag"),
          },
          {
            value: 'Zone',
            field: pickedFeature.getProperty("Zone"),
          },
          {
            value: 'Sq Km.',
            field: pickedFeature.getProperty("Sq_Km"),
          },
          {
            value: 'Height Category',
            field: pickedFeature.getProperty("B_Category"),
          }

        ]

      }

    }, Cesium.ScreenSpaceEventType.LEFT_CLICK);


  }




  /** Highlight Building */

  per_selection() {

    this.goto_click = false;
    this.measureEnabled = false;
    this.info_click = false;
    this.polygonMeasureEnabled = false;


    this.viewer.screenSpaceEventHandler.setInputAction((movement) => {

      let element = document.getElementById("per_selection") as HTMLInputElement;
      if (!element.checked) {
        return;
      }
      else {

        if (Cesium.defined(this.selected.feature)) {
          this.selected.feature.color = this.selected.originalColor;
          this.selected.feature = undefined;
        }

        var pickedFeature = this.viewer.scene.pick(movement.position);
        if (!Cesium.defined(pickedFeature)) {
          //this.clickHandler(movement);
          return;
        }

        if (this.selected.feature === pickedFeature) {
          return;
        }
        this.selected.feature = pickedFeature;

        if (pickedFeature === this.highlighted.feature) {
          Cesium.Color.clone(
            this.highlighted.originalColor,
            this.selected.originalColor
          );
          this.highlighted.feature = undefined;
        } else {
          Cesium.Color.clone(pickedFeature.color, this.selected.originalColor);
        }

        pickedFeature.color = Cesium.Color.LIME;

      }


    },
      Cesium.ScreenSpaceEventType.LEFT_CLICK);
  }

  /** Highlight Building */

  /* GOTO */

  goto_location() {

    this.info_click = false;
    this.measureEnabled = false;
    this.polygonMeasureEnabled = false;

    if (this.goto_click == true) {
      if(this.gotopoint != null){
        this.viewer.entities.remove(this.gotopoint);
      }
      this.goto_click = false;
    }
    else {
      this.goto_click = true;
    }

    let myMouseHandler = new Cesium.ScreenSpaceEventHandler(this.viewer.scene.canvas);

    myMouseHandler.setInputAction((e) => {

      if (!this.goto_click) {
        return;
      }
      else {

        if (this.gotopoint != null) {
          this.viewer.entities.remove(this.gotopoint);
        }

        var scene = this.viewer.scene;
        if (scene.mode !== Cesium.SceneMode.MORPHING) {
          var pickRay = scene.camera.getPickRay(e.position);
          var cartesian = scene.globe.pick(pickRay, scene);

          if (cartesian) {
            var cartographic = Cesium.Cartographic.fromCartesian(cartesian);
            var longitude = Cesium.Math.toDegrees(cartographic.longitude);
            var latitude = Cesium.Math.toDegrees(cartographic.latitude);

            this.viewer.camera.flyTo({
              destination: Cesium.Cartesian3.fromDegrees(longitude, latitude, 500),
              orientation: {
                
                roll: 0.0,
              },
              duration: 3
            });

            this.gotopoint = this.viewer.entities.add({
              name: "milktruck",
              position: Cesium.Cartesian3.fromDegrees(longitude, latitude),
              model: {
                uri:
                  "../../../assets/3d_data/location_mark.glb",
                minimumPixelSize: 30,
                // maximumScale: 20000,
                heightReference: Cesium.HeightReference.CLAMP_TO_GROUND
              },
    
            });

          }
        }

      }

    }, Cesium.ScreenSpaceEventType.LEFT_CLICK);

  }

  changeBaseLayer() {

    this.viewer.scene.imageryLayers.removeAll();

    if (this.galleryImg == "Satellite Map") {

      document.getElementById("mat-mdc-slide-toggle-1-label").setAttribute("style", "color: white; font-weight: 500;")


      this.galleryImg = "Default Map"
      const imageryLayer = Cesium.ImageryLayer.fromWorldImagery(null);
      this.viewer.scene.imageryLayers.add(imageryLayer);

    }
    else {
      this.galleryImg = "Satellite Map"
      document.getElementById("mat-mdc-slide-toggle-1-label").setAttribute("style", "color: black; font-weight: 500;")
      const imageryLayer = new Cesium.ImageryLayer(new Cesium.OpenStreetMapImageryProvider({
        url: "https://tile.openstreetmap.org/"
      }));
      this.viewer.scene.imageryLayers.add(imageryLayer);
    }

  }

  takeSS() {

    this.viewer.render();
    var captureElement: any = document.querySelector("#cesiumContainer");

    html2canvas(captureElement, { allowTaint: false, useCORS: true, }).then((canvas) => {

      const imageData = canvas.toDataURL("image/png");

      const link = document.createElement("a");
      link.setAttribute("download", "Map.png");
      link.setAttribute("href", imageData);
      link.click();
    });

  }

  togglePanel() {
    document.body.classList.toggle('closed-panel');
    this.state = (this.state === "closed") ? "open" : "closed";
  }


  initializeViewer() {

    this.viewer = new Cesium.Viewer("cesiumContainer", {
      baseLayer: new Cesium.ImageryLayer(new Cesium.OpenStreetMapImageryProvider({
        url: "https://tile.openstreetmap.org/"
      })),
      fullscreenButton: false,
      selectionIndicator: false,
      infoBox: true,
      animation: false,
      timeline: false,
      shadows: false,
      skyAtmosphere: false,
      baseLayerPicker: true,
      geocoder: false,
    });


    this.viewer.camera.flyTo({
      destination: Cesium.Cartesian3.fromDegrees(72.730797, 18.891774, 25000),
      orientation: {
        heading: Cesium.Math.toRadians(35.0),
        pitch: Cesium.Math.toRadians(-45.0),
        roll: 0.0,
      },
    });

  }


}
----------------------
<div id="cesiumContainer"></div>
<button type="button" (click)="openLayerDetailDialog()">GET CCTV</button>

<kendo-dialog class="custom-dialog handler-dialog" title="Layer Details" *ngIf="layerDetailDialog" [height]="700" [minWidth]="250" [width]="1024" (close)="closeLayerDetailDialog()">

<form [formGroup]="reactiveForm">
  <div class="row">
    <div class="col mb-2">
      <label for="name" class="form-label">Name:</label>
      <input type="text" id="name" name="name" formControlName="layer_name" placeholder="Your name" required minlength="1" maxlength="250" class="form-control form-control-sm" [class.is-invalid]="this.reactiveForm.controls.layer_name.invalid && (this.reactiveForm.controls.layer_name.dirty || this.reactiveForm.controls.layer_name.touched)">
      <div *ngIf="this.reactiveForm.controls.layer_name.invalid && (this.reactiveForm.controls.layer_name.dirty || this.reactiveForm.controls.layer_name.touched)" class="invalid-feedback">
        <div *ngIf="this.reactiveForm.controls.layer_name.errors?.['required']">
          This field is required.
        </div>
        <div *ngIf="this.reactiveForm.controls.layer_name.errors?.['minlength']">
          This field must have at least 1 character.
        </div>
        <div *ngIf="this.reactiveForm.controls.layer_name.errors?.['maxlength']">
          This field must have at most 250 characters.
        </div>
      </div>
    </div>
  </div>
  <div class="row">
    <div class="col mb-2">
      <label for="name" class="form-label">Table Name:</label>
      <input class="form-control" formControlName="table_name" type="text" value="" required placeholder="Enter Table Name" [class.is-invalid]="this.reactiveForm.controls.table_name.invalid && (this.reactiveForm.controls.table_name.dirty || this.reactiveForm.controls.table_name.touched)">
      <div *ngIf="this.reactiveForm.controls.table_name.invalid && (this.reactiveForm.controls.table_name.dirty || this.reactiveForm.controls.table_name.touched)" class="invalid-feedback">
        <div *ngIf="this.reactiveForm.controls.table_name.errors?.['required']">
          This field is required.
        </div>
        <div *ngIf="this.reactiveForm.controls.table_name.errors?.['minlength']">
          This field must have at least 1 character.
        </div>
        <div *ngIf="this.reactiveForm.controls.table_name.errors?.['maxlength']">
          This field must have at most 250 characters.
        </div>
      </div>
    </div>
  </div>
  <div class="row">
    <div class="col mb-2">
      <label for="name" class="form-label">Layer Id:</label>
      <input class="form-control" formControlName="layer_id" type="text" value="" required placeholder="Enter Layer Id" [class.is-invalid]="this.reactiveForm.controls.layer_id.invalid && (this.reactiveForm.controls.layer_id.dirty || this.reactiveForm.controls.layer_id.touched)">
      <div *ngIf="this.reactiveForm.controls.layer_id.invalid && (this.reactiveForm.controls.layer_id.dirty || this.reactiveForm.controls.layer_id.touched)" class="invalid-feedback">
        <div *ngIf="this.reactiveForm.controls.layer_id.errors?.['required']">
          This field is required.
        </div>
        <div *ngIf="this.reactiveForm.controls.layer_id.errors?.['minlength']">
          This field must have at least 1 character.
        </div>
        <div *ngIf="this.reactiveForm.controls.layer_id.errors?.['maxlength']">
          This field must have at most 250 characters.
        </div>
      </div>
    </div>
  </div>
  <div class="row">
    <div class="col mb-2">
      <label for="name" class="form-label">Layer Type:</label>
      <select class="form-control" formControlName="layer_type" required [class.is-invalid]="this.reactiveForm.controls.layer_type.invalid && (this.reactiveForm.controls.layer_type.dirty || this.reactiveForm.controls.layer_type.touched)">
        <option value="">Select</option>
        <option value="1">1</option>
        <option value="2">2</option>
        <option value="3">3</option>
        <option value="4">4</option>
      </select>      
      <div *ngIf="this.reactiveForm.controls.layer_type.invalid && (this.reactiveForm.controls.layer_type.dirty || this.reactiveForm.controls.layer_type.touched)" class="invalid-feedback">
        <div *ngIf="this.reactiveForm.controls.layer_type.errors?.['required']">
          This field is required.
        </div>
      </div>
    </div>
  </div>
  <div class="row">
    <div class="col mb-2">
      <label for="name" class="form-label">Parent Layer Type:</label>
      <select class="form-control" formControlName="parent_layer" required [class.is-invalid]="this.reactiveForm.controls.parent_layer.invalid && (this.reactiveForm.controls.parent_layer.dirty || this.reactiveForm.controls.parent_layer.touched)">
        <option value="">Select</option>
        <option value="1">1</option>
        <option value="2">2</option>
        <option value="3">3</option>
        <option value="4">4</option>
      </select>      
      <div *ngIf="this.reactiveForm.controls.parent_layer.invalid && (this.reactiveForm.controls.parent_layer.dirty || this.reactiveForm.controls.parent_layer.touched)" class="invalid-feedback">
        <div *ngIf="this.reactiveForm.controls.parent_layer.errors?.['required']">
          This field is required.
        </div>
      </div>
    </div>
  </div>
  <div class="row">
    <div class="col mb-2">
      <label for="name" class="form-label">Service Url:</label>
      <input class="form-control" formControlName="service_url" type="text" value="" required placeholder="Enter Layer Id" [class.is-invalid]="this.reactiveForm.controls.service_url.invalid && (this.reactiveForm.controls.service_url.dirty || this.reactiveForm.controls.service_url.touched)">
      <div *ngIf="this.reactiveForm.controls.service_url.invalid && (this.reactiveForm.controls.service_url.dirty || this.reactiveForm.controls.service_url.touched)" class="invalid-feedback">
        <div *ngIf="this.reactiveForm.controls.service_url.errors?.['required']">
          This field is required.
        </div>
        <div *ngIf="this.reactiveForm.controls.service_url.errors?.['minlength']">
          This field must have at least 1 character.
        </div>
        <div *ngIf="this.reactiveForm.controls.service_url.errors?.['maxlength']">
          This field must have at most 250 characters.
        </div>
      </div>
    </div>
  </div>
  <div class="row">
    <div class="col mb-2">
      <label for="name" class="form-label">Geometry Type:</label>
      <select class="form-control" formControlName="geometry_type" required [class.is-invalid]="this.reactiveForm.controls.geometry_type.invalid && (this.reactiveForm.controls.geometry_type.dirty || this.reactiveForm.controls.geometry_type.touched)">
        <option value="">Select</option>
        <option value="1">1</option>
        <option value="2">2</option>
        <option value="3">3</option>
        <option value="4">4</option>
      </select>      
      <div *ngIf="this.reactiveForm.controls.geometry_type.invalid && (this.reactiveForm.controls.geometry_type.dirty || this.reactiveForm.controls.geometry_type.touched)" class="invalid-feedback">
        <div *ngIf="this.reactiveForm.controls.geometry_type.errors?.['required']">
          This field is required.
        </div>
      </div>
    </div>
  </div>

  <div class="row">
    <div class="col mb-2">
      <label for="name" class="form-label">Scale Start:</label>
      <input pattern="[0-9]*" class="form-control" formControlName="scale_start" type="text" value="" required placeholder="Enter Layer Id" [class.is-invalid]="this.reactiveForm.controls.scale_start.invalid && (this.reactiveForm.controls.scale_start.dirty || this.reactiveForm.controls.scale_start.touched)">
      <div *ngIf="this.reactiveForm.controls.scale_start.invalid && (this.reactiveForm.controls.scale_start.dirty || this.reactiveForm.controls.scale_start.touched)" class="invalid-feedback">
        <div *ngIf="this.reactiveForm.controls.scale_start.errors?.['required']">
          This field is required.
        </div>
        <div *ngIf="this.reactiveForm.controls.scale_start.errors?.['pattern']">
          This field must be a number.
        </div>
      </div>
    </div>
  </div>
  <div class="row">
    <div class="col mb-2">
      <label for="name" class="form-label">Scale End:</label>
      <input pattern="[0-9]*" class="form-control" formControlName="scale_end" type="text" value="" required placeholder="Enter Layer Id" [class.is-invalid]="this.reactiveForm.controls.scale_end.invalid && (this.reactiveForm.controls.scale_end.dirty || this.reactiveForm.controls.scale_end.touched)">
      <div *ngIf="this.reactiveForm.controls.scale_end.invalid && (this.reactiveForm.controls.scale_end.dirty || this.reactiveForm.controls.scale_end.touched)" class="invalid-feedback">
        <div *ngIf="this.reactiveForm.controls.scale_end.errors?.['required']">
          This field is required.
        </div>
        <div *ngIf="this.reactiveForm.controls.scale_end.errors?.['pattern']">
          This field must be a number.
        </div>
      </div>
    </div>
  </div>
  <div class="row">
    <div class="col mb-2">        
      <label class="form-check-label">
        Status:
      </label>    
      <input class="form-check-input" formControlName="status" type="checkbox" id="status">
    </div>

    <div class="col mb-2">        
      <label class="form-check-label">
        WMS:
      </label>    
      <input class="form-check-input" formControlName="wms" type="checkbox"  id="wms">
    </div>

    <div class="col mb-2">        
      <label class="form-check-label">
        Info Click:
      </label>    
      <input class="form-check-input" formControlName="info_click" type="checkbox" id="info_click">
    </div>

    <div class="col mb-2">        
      <label class="form-check-label">
        First Time Load:
      </label>    
      <input class="form-check-input" formControlName="first_time" type="checkbox" id="first_time">
    </div>

  </div>

  <div class="row">
    <div class="col mb-2">
      <label for="name" class="form-label">Z - Index:</label>
      <input pattern="[0-9]*" class="form-control" formControlName="z_index" type="text" value="" required placeholder="Enter Layer Id" [class.is-invalid]="this.reactiveForm.controls.z_index.invalid && (this.reactiveForm.controls.z_index.dirty || this.reactiveForm.controls.z_index.touched)">
      <div *ngIf="this.reactiveForm.controls.z_index.invalid && (this.reactiveForm.controls.z_index.dirty || this.reactiveForm.controls.z_index.touched)" class="invalid-feedback">
        <div *ngIf="this.reactiveForm.controls.z_index.errors?.['required']">
          This field is required.
        </div>
        <div *ngIf="this.reactiveForm.controls.z_index.errors?.['pattern']">
          This field must be a number.
        </div>
      </div>
    </div>
  </div>

  <div class="row">
    <div class="col mb-2 d-grid">
      <button type="button" class="btn btn-sm btn-primary" (click)="validate()">Submit</button>
    </div>
  </div>
</form>

</kendo-dialog>

<kendo-dialog class="custom-dialog handler-dialog" title="Edit" *ngIf="editDialog" [minWidth]="250" [width]="1024"
  (close)="closeEditDialog()">

  <form [formGroup]="DataFormDetail">
  <div class="row">
    <div class="col mb-2">
      <label for="name" class="form-label">Asset Id:</label>
      <input class="form-control" formControlName="cctv_asset_id" type="text" value="" placeholder="Enter Asset Id">
    </div>
  </div>

  <div class="row">
    <div class="col mb-2">
      <label for="name" class="form-label">Location Name:</label>
      <input class="form-control" formControlName="location_name" type="text" value="" placeholder="Enter Location">
    </div>
  </div>

  <div class="row">
    <div class="col mb-2">
      <label for="name" class="form-label">Junction Type:</label>
      <input class="form-control" formControlName="junction_type" type="text" value=""
        placeholder="Enter Junction Type">
    </div>
  </div>

  <div class="row">
    <div class="col mb-2">
      <label for="name" class="form-label">Police Sytation Name:</label>
      <input class="form-control" formControlName="pstation_name" type="text" value=""
        placeholder="Enter PoliceStation">
    </div>
  </div>

  <div class="row">
    <div class="col mb-2 d-grid">
      <button class="btn btn-sm btn-primary" (click)="add_bim_data_to_db($event)" type="button">Submit</button>
    </div>
  </div>
  </form>


</kendo-dialog>

<!-- <kendo-dialog class="custom-dialog handler-dialog" title="Edit" *ngIf="selectFeatureDialog" [minWidth]="250" [width]="1024" (close)="closeFeatureDialog()">
  <h4>Select Feature</h4>
</kendo-dialog> -->

 <!-- <button type="button" (click)="openEditDialog()">OPEN</button> -->
<button type="button" (click)="getBimData()">GET</button>
<div class="SubCursorBar">
  <div class="content">
    <div class="DisabledContent" is-disabled="false">
      <div class="CursorBarControl" is-disabled="false" is-selected="true" title="Pan">
        <!-- <div class="icon">
          <svg class="" width="42" height="42" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M15.5652 6C14.9172 6 14.3913 6.51692 14.3913 7.15385V14.4615H13.6087V8.69231C13.6087 8.05538 13.0828 7.53846 12.4348 7.53846C11.7868 7.53846 11.2609 8.05538 11.2609 8.69231V14.4615V16.7692V19.6734C11.2609 19.6734 9.0069 18.2402 7.87211 17.7548C7.55594 17.6194 7.22575 17.5385 6.89079 17.5385C5.1401 17.5385 5 19.0769 5 19.0769L8.13043 21.3846L10.6357 24.3398C11.5279 25.3922 12.85 26 14.243 26H19.8696C21.5983 26 23 24.6223 23 22.9231V14.4615V11C23 10.3631 22.4741 9.84615 21.8261 9.84615C21.1781 9.84615 20.6522 10.3631 20.6522 11V14.4615H19.8696V8.69231C19.8696 8.05538 19.3437 7.53846 18.6957 7.53846C18.0477 7.53846 17.5217 8.05538 17.5217 8.69231V14.4615H16.7391V7.15385C16.7391 6.51692 16.2132 6 15.5652 6Z" fill="white"></path>
          </svg>
        </div> -->
        <mat-button-toggle-group name="ingredients" aria-label="Ingredients">
          <mat-button-toggle (click)="goto_location()" title="Pan"><i class="fas fa-map-marker-alt fa-2x"></i></mat-button-toggle>
          <mat-button-toggle (click)="measurementType($event)" title="Measure polyline"><mat-icon>timeline</mat-icon></mat-button-toggle>
          <mat-button-toggle title="Measure polygon" (click)="measurementType($event)"><i class="fas fa-draw-polygon fa-2x"></i></mat-button-toggle>
            <mat-button-toggle title="info" (click)="featureInfo()"><mat-icon>info</mat-icon></mat-button-toggle>
            <mat-button-toggle title="Take Screenshot" (click)="takeSS()"><i class="fas fa-camera-retro fa-2x"></i></mat-button-toggle>
            <mat-button-toggle title="3d Data Info" (click)="infoOf3DData()" ><i class="fas fa-question-circle fa-2x"></i></mat-button-toggle>
            <mat-button-toggle (click)="clearAllMeasurementData()" title="Erase"><i class="fas fa-eraser fa-2x"></i></mat-button-toggle>
            <mat-button-toggle  [matMenuTriggerFor]="menu" title="Add"><i class="fas fa-plus fa-2x"></i></mat-button-toggle>
            <mat-menu #menu="matMenu">
              <form [formGroup]="bimDataForm">
                <mat-form-field>                  
                  <select formControlName="feature_name" #feature (click)="add_bim_data($event)" matNativeControl required>
                    <option value="">Select</option>
                    <option value="car">Car</option>
                    <option value="street_light">Street Light</option>
                    <option value="cctv">CCTV</option>
                    <option value="smart_pole">Smart Pole</option>
                  </select>
                </mat-form-field>
              </form>
            </mat-menu>
            <!-- <mat-button-toggle title="Download Image" ><i class="fas fa-camera fa-2x"></i></mat-button-toggle> -->
        </mat-button-toggle-group>
      </div>
    </div>
  </div>
</div>
<table id="property_tbl" class="table table-striped" style="display: block;">
  <thead>
    <tr>
      <th scope="col">Sr.no</th>
      <th scope="col">Field</th>
      <th scope="col">Value</th>
    </tr>
  </thead>
  <tbody>
    @for (property of property_data; track property_data.value; let i = $index) {
    <tr>
      <th scope="row">{{ i + 1 }}</th>
      <td>{{ property.value }}</td>
      <td>{{ property.field }}</td>
    </tr>
    }
  </tbody>
</table>

<!-- <table id="property_tbl" class="table table-striped" style="display: block;">
  <tbody>
    @for (property of gridInfoKeys; track gridInfoKeys; let i = $index) {
    <tr>
      <th scope="row">{{ [gridInfoKeys [i] ] }}</th>
      <td>{{ gridarr[property] }}</td>      
    </tr>
    }
  </tbody>
</table> -->

<button type="button" class="cesium-button">
  <label>
    <input type="checkbox" id="per_selection" (click)="per_selection()">Per-feature selection </label>
</button>
<!-- <mat-form-field>
  <mat-label>Favorite food</mat-label>
  <mat-select>
    @for (food of foods; track food) {
    <mat-option [value]="food.value">{{food.viewValue}}</mat-option>
    }
  </mat-select>
</mat-form-field> -->

<mat-slide-toggle (change)="changeBaseLayer()" id="slider" color="#76ee59"> 
  {{galleryImg}} 
</mat-slide-toggle>
<button (click)="rotateEntity(modelEntity, -5);">Rotate Left</button>
<button (click)="rotateEntity(modelEntity, 5);">Rotate Right</button>
<button (click)="getFeature()">Done</button>
<button (click)="UpdateFeature()">Update</button>
<!-- <mat-form-field class="dd_state">
  <mat-label>Select State Name</mat-label>
  <mat-select (selectionChange)="get_layer_by_state_id($event)">

    <ng-container *ngIf="dropDownData">
      <mat-option [value]="data.state_id" *ngFor="let data of dropDownData.data"
        [attr.state_id]="data.state_id">{{data.city}}</mat-option>
    </ng-container>


  </mat-select>
</mat-form-field> -->

<!-- <button type="button" (click)="togglePanel()">Layer</button> -->

<div class="row closed-panel" [@widthGrow]="state">
  <div class="col-sm-12">

    <div class="layer-popup resize-popup" id="layers">
      <div class="layers" id="layersheader">
        <div class="layer-title-main w-100 align-items-center">
          <h3 class="layer-title me-auto">
            <label id="total_layer_cnt" style="color: aliceblue;" data-translate="_layer_popup">Layer</label>
          </h3>

          <a class="layer-close side-layer-resize ms-2 me-2" href="javascript:void(0);">
            <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1"
              id="Layer_1" x="0px" y="0px" width="16" height="16" viewBox="0 0 50 50" enable-background="new 0 0 50 50"
              xml:space="preserve">
              <g>
                <g>

                  <polyline fill-rule="evenodd" clip-rule="evenodd" fill="none" stroke="#FFFFFF" stroke-width="3.5"
                    stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="22.9256"
                    points="    47.5,1.832 22.191,27.15 22.191,16.419   " />

                  <line fill-rule="evenodd" clip-rule="evenodd" fill="none" stroke="#FFFFFF" stroke-width="3.5"
                    stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="22.9256" x1="22.191" y1="27.15"
                    x2="32.919" y2="27.15" />
                </g>

                <polyline fill-rule="evenodd" clip-rule="evenodd" fill="none" stroke="#FFFFFF" stroke-width="3.5"
                  stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="22.9256"
                  points="   44.878,18.451 44.878,48.168 2.5,48.168 2.5,5.802 31.722,5.802  " />
              </g>
            </svg>
          </a>

        </div>
        <div class="layer-content" id="layer_master">
          <div class="accordion" id="accordionExample">
            <div *ngFor="let parentLayer of data">
              <div class='accordion-item'>
                <h2 class='accordion-header'>
                  <button class='accordion-button collapsed' type='button'
                    (click)="toggleCollapse(parentLayer.parent_layer_id)">
                    {{ parentLayer.parent_layer_name }}
                  </button>
                </h2>
                <div [id]="'panelsStayOpen-collapse' + parentLayer.parent_layer_id" class='accordion-collapse collapse'>
                  <div class='accordion-body'>
                    <div *ngFor="let childLayer of parentLayer.child_layer">

                      <div class="form-check">
                        <input class="form-check-input" name="child_layer_name" (change)="showHideData($event)"
                          [attr.mobile_service_url]="childLayer.mobile_service_url"
                          [attr.parent_layer]="childLayer.parent_layer" [attr.defination]="childLayer.defination"
                          [attr.layer_name]="childLayer.layer_name"
                          [attr.combined_service]="childLayer.is_combined_service"
                          [attr.service-url]="childLayer.service_url" [attr._id]="childLayer.geometry_type"
                          data-id="Image" type="checkbox" [attr.value]="childLayer.layer_id"
                          [attr.Id]="'flexCheckDefault' + childLayer.layer_id"
                          [attr.layer_name]="childLayer.layer_name">
                        <label class="form-check-label">{{ childLayer.layer_name }}</label>
                      </div>

                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

      </div>
    </div>

  </div>
</div>

--------------


.layer-popup.resize-layer .side-layer-resize svg {
  transform: rotate(180deg);
}

.closed-panel {
  overflow-y: hidden;
} 


// .CursorBarControl {
//   background-color: #ffffff; /* Set the default background color */
//   cursor: pointer; /* Change cursor to pointer on hover */
//   padding: 10px;
//   margin: 5px;
//   border-radius: 5px;
// }
.CursorBarControl.clicked {
  background-color: #ff0000; /* Set the background color when clicked */
}

#per_selection{
  position: relative;
  bottom: 2px;
  right: 4px;
}

// .mat-button-toggle{
//   background-color: #306cee;
//   color: #ffffff;
// }

#slider{
  position: relative;
  bottom: 818px;
  right: 163px;
}


.mat-slide-toggle:checked{

  background-color: green;

}



.mat-button-toggle:hover {
  background-color: transparent;
  color: #1dd9cd !important;    
}

.mat-button-toggle-checked {
  //background-color: #ec2c4c;
  color: #1dd9cd !important;
}


.cesium-button{
  top: -853px;
  left: 8px;
  border-radius: 3px;
}

.cesium-viewer-bottom{
  display: none;
}

#mat-mdc-slide-toggle-1-label {
  color: black;
  font-weight: 500;
}

::ng-deep .mat-slide-toggle.mat-checked .mat-slide-toggle-bar {
  background-color: #76ee59 !important;
}

.dd_state{
  position: relative;
  bottom: 772px;
  right: 287px;
}
.mdc-text-field--filled:not(.mdc-text-field--disabled) {
  background-color: #3f4d67 !important;
}

.SubCursorBar{
  position: relative;
    top: -786px;
    left: 10px;

}

#popupBox {
  background-color: #333;
  border: 1px solid #fff;
  padding: 10px;
  color: #fff;
}

.doc-title {
  text-align: center;
  border-top: 1px solid #e0e0e0;
  border-bottom: 1px solid #e0e0e0;
  padding: 2rem 0;
  margin: 5rem 0 2rem;
  text-transform: uppercase;
 }

.SubCursorBar>.content {
  align-items: center;
  -webkit-backdrop-filter: blur(20px);
  backdrop-filter: blur(20px);
  background: rgba(33, 39, 42, .8);
  border-radius: 9px;
  box-shadow: 0 0 1px rgba(18,22,25,.36), 0 18px 36px -4px rgba(18,22,25,.36);
  display: flex;
  pointer-events: auto;
  width: -webkit-max-content;
  width: max-content;
}

.layer-popup {
  width: 320px;
  position: absolute; /* Change to absolute */
  bottom: 33px;
  right: 0; /* Position on the right side */
  z-index: 10;
  background: #fff;
  transition: all .8s ease-in-out;
  /**/
  height: 450px;
}

.layer-popup.active {
  right: 0;
}

.layer-popup.resize-layer {
  height: 45px;
}

.layer-popup.resize-layer .side-layer-resize img {
  transform: rotate(180deg);
}

.layer-title{
  background-color: #3F4D67;
  height: 38px;
}

.accordion-button{
  height: 40px;
}

.layer-content {
  width: 100%;
  height: calc(100% - 45px);
  overflow-y: auto;
  padding: 10px;
  position: absolute;
  border-bottom: 1px solid #f3f3f3;
  border-left: 1px solid #f3f3f3;
  bottom: 1px;
}

.cesium-infoBox{
  display: none !important;
}

#property_tbl{
  position: relative;
  
    // display: block;
    // bottom: 836px;
    // left: 1386px;

}

@media only screen and (min-width: 320px) and (max-width: 620px) {
  .layer-popup {
    bottom: 0;
    position: absolute; /* Change to absolute */
    right: 0; /* Position on the right side */
    height: calc(100vh - 150px);
    z-index: 12;
  }
}
-------------------------------------------------------------------------------------------------------------------------




































_____________________________________________________________________________________________________________15/7/24
cd C:\Users\hinal.panchal\Downloads\keycloak-25.0.1\keycloak-25.0.1\bin
kc.bat start-dev

Keycloak is running on http://0.0.0.0:8080.
The management interface is available at http://0.0.0.0:9000.

Admin User Cred
admin
admin@123

crete realm
create client-[openid-connect,myapp]
create user [hinal,hinal@gmail.comhinal@gmail.com,hinal@123][amnex,amnex@gmail.com,amnex@123]
create client role[ADMIN,USER]
create realm roles[realm_admin,realm_user ]--> add associated roles-->make composite=true
	
db=postgres  
db-url-host=localhost
db-url-database=keycloak_db
db-url-port=5432
db-username=postgres
db-password=postgres


_____________________________________________________________________________________________________________________________________26/7/24

import { Component, AfterViewInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import Map from "@arcgis/core/Map";
import MapView from "@arcgis/core/views/MapView";
import Graphic from '@arcgis/core/Graphic';
import Point from '@arcgis/core/geometry/Point';
import SimpleMarkerSymbol from '@arcgis/core/symbols/SimpleMarkerSymbol';
import FeatureLayer from '@arcgis/core/layers/FeatureLayer';
import PopupTemplate from '@arcgis/core/PopupTemplate';

@Component({
  selector: 'app-map',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './map.component.html',
  styleUrls: ['./map.component.css']
})
export class MapComponent implements AfterViewInit {


  ngAfterViewInit(): void {
    const map = new Map({
      basemap: 'satellite'
    });

    const view = new MapView({
      container: 'viewDiv',
      map: map,
      center: [-118.80543, 34.02700],
      zoom: 13 // Set zoom level
    });

    // Create a point graphic with a popup template
    const point = new Point({
      longitude: -118.80543,
      latitude: 34.02700
    });

    const markerSymbol = new SimpleMarkerSymbol({
      color: [226, 119, 40],
      outline: {
        color: [255, 255, 255],
        width: 2
      }
    });

    const pointGraphic = new Graphic({
      geometry: point,
      symbol: markerSymbol,
      attributes: {
        Name: 'Example Point',
        Type: 'Type A',
        Description: 'Description of the point',
        Address: '123 Example St',
        OtherField: 'Other information'
      }
    });

    view.graphics.add(pointGraphic);

    // Add FeatureLayer to map without PopupTemplate
    const featureLayer = new FeatureLayer({
      url: 'https://sampleserver6.arcgisonline.com/arcgis/rest/services/Hurricanes/MapServer/1',
      outFields: ["*"],
        minScale: 0,
        maxScale: 0,
        popupTemplate: {
          content: this.mypopup.bind(this)}

    });



    map.add(featureLayer);

    // Set up the click event to show the popup
    view.on('click', (event) => {
      view.hitTest(event).then((response: any) => {
        const results = response.results;
        if (results.length) {
          const hit = results[0];
          if (hit.graphic) {
            const graphic = hit.graphic as Graphic;
            const attributes = graphic.attributes;
            console.log(`Clicked graphic: ${JSON.stringify(graphic)}`);
          }
        } else {
          console.log('No features found at this location.');
        }
      }).catch((error: any) => {
        console.error('Error during hitTest:', error);
      });
    });
  }
  mypopup(feature_layer:any){
    // Create a dynamic PopupTemplate
    const attrubute=feature_layer.graphic.attributes
    const dynamicPopupTemplate = new PopupTemplate({
      title: `Feature ID: ${attrubute['OBJECTID'] || 'Unknown'}`,
      content: `
        <b>Geometry:</b> ${JSON.stringify(feature_layer.graphic.geometry)} <br>
        <b>Attributes:</b> ${JSON.stringify(feature_layer.attributes)}
      `
    });
  }
}
___________________________________________________
import { Component, AfterViewInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import Map from "@arcgis/core/Map";
import MapView from "@arcgis/core/views/MapView";
import Graphic from '@arcgis/core/Graphic';
import Point from '@arcgis/core/geometry/Point';
import SimpleMarkerSymbol from '@arcgis/core/symbols/SimpleMarkerSymbol';
import FeatureLayer from '@arcgis/core/layers/FeatureLayer';
import PopupTemplate from '@arcgis/core/PopupTemplate';

@Component({
  selector: 'app-map',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './map.component.html',
  styleUrls: ['./map.component.css']
})
export class MapComponent implements AfterViewInit {

  ngAfterViewInit(): void {
    const map = new Map({
      basemap: 'satellite'
    });

    const view = new MapView({
      container: 'viewDiv',
      map: map,
      center: [-118.80543, 34.02700],
      zoom: 13 // Set zoom level
    });

    // Create a point graphic with a popup template
    const point = new Point({
      longitude: -118.80543,
      latitude: 34.02700
    });

    const markerSymbol = new SimpleMarkerSymbol({
      color: [226, 119, 40],
      outline: {
        color: [255, 255, 255],
        width: 2
      }
    });

    const pointGraphic = new Graphic({
      geometry: point,
      symbol: markerSymbol,
      attributes: {
        Name: 'Example Point',
        Type: 'Type A',
        Description: 'Description of the point',
        Address: '123 Example St',
        OtherField: 'Other information'
      }
    });

    view.graphics.add(pointGraphic);

    // Add FeatureLayer to map with PopupTemplate
    const featureLayer = new FeatureLayer({
      url: 'https://sampleserver6.arcgisonline.com/arcgis/rest/services/Hurricanes/MapServer/1',
      outFields: ["*"],
      minScale: 0,
      maxScale: 0,
      popupTemplate: {
        title: '{OBJECTID}',
        content: this.mypopup.bind(this)
      }
    });
    map.add(featureLayer);
  }

  mypopup(feature: any): string {
    // Create dynamic popup content
    const attributes = feature.graphic.attributes;
    const geometry = feature.graphic.geometry;
    let content = '<b>Attributes:</b><br>';

    for (const key in attributes) {
      if (attributes.hasOwnProperty(key)) {
        content += `${key}: ${attributes[key]}<br>`;
      }
    }

    content += `<br><b>Geometry:</b><br>${JSON.stringify(geometry)}`;

    return content;
  }
}
___________________
package com.bezkoder.spring.jpa.postgresql.service;


	

import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

@Service
public class ExcelService {

	  @Autowired
	    private JdbcTemplate jdbcTemplate;
	  
    private final ObjectMapper objectMapper;

    public ExcelService(ObjectMapper objectMapper) {
        this.objectMapper = objectMapper;
    }

    public List<String> convertMultipleExcelFilesToJson(MultipartFile[] files) throws IOException {
        List<String> jsonResults = new ArrayList<>();

        for (MultipartFile file : files) {
            Workbook workbook = WorkbookFactory.create(file.getInputStream());
            Sheet sheet = workbook.getSheetAt(0);

            List<Map<String, String>> excelData = new ArrayList<>();
            Row headerRow = sheet.getRow(0);

            for (int i = 1; i <= sheet.getLastRowNum(); i++) {
                Row row = sheet.getRow(i);
                Map<String, String> rowData = new HashMap<>();

                for (int j = 0; j < row.getLastCellNum(); j++) {
                    Cell cell = row.getCell(j);
                    String header = headerRow.getCell(j).getStringCellValue();
                    if(header.equals("Property Address")) {
                    	String cellValue = cell.toString();
                    	cellValue.replace("\"","");
                        rowData.put(header, cellValue);
                    }
                    else {
                    	String cellValue = cell.toString();
                        rowData.put(header, cellValue);
                    }
                    	
                    
                }

                excelData.add(rowData);
            }

            String jsonResult = objectMapper.writeValueAsString(excelData);
            System.out.print("Data---------------->>" + jsonResults);
            jsonResults.add(jsonResult);
        }
        //System.out.print(jsonResults);
        return jsonResults;
    }

    public void saveJsonData(String jsonData) {
        String sql = "CALL insert_excel_data_from_json(?)";
        jdbcTemplate.update(sql, jsonData);
    }
}





_________________________________________________23/7/24

https://medium.com/@ramanamuttana/connect-keycloak-with-postgresql-
				
_--__________________________________________________________________________________29/7/24
package com.bezkoder.spring.jpa.postgresql.service;


	

import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

@Service
public class ExcelService {

	  @Autowired
	    private JdbcTemplate jdbcTemplate;
	  
    private final ObjectMapper objectMapper;

    public ExcelService(ObjectMapper objectMapper) {
        this.objectMapper = objectMapper;
    }

    public String convertMultipleExcelFilesToJson(MultipartFile[] files) throws IOException {
        List<String> jsonResults = new ArrayList<>();

        for (MultipartFile file : files) {
            Workbook workbook = WorkbookFactory.create(file.getInputStream());
            Sheet sheet = workbook.getSheetAt(0);

            List<String> excelData = new ArrayList<>();
            Row headerRow = sheet.getRow(0);

            for (int i = 1; i <= sheet.getLastRowNum(); i++) {
                Row row = sheet.getRow(i);
                Map<String, String> rowData = new HashMap<>();

                for (int j = 0; j < row.getLastCellNum(); j++) {
                    Cell cell = row.getCell(j, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);
                    String header = headerRow.getCell(j).getStringCellValue();
                    String cellValue = cell.toString();
                    if (header.equals("Property Address")) {
                        cellValue = cellValue.replace("\"", "");
                        cellValue = cellValue.replace("'", "");
                    }
                    if (cellValue.trim().isEmpty()) {
                        cellValue = "null";
                    }
                    rowData.put(header, cellValue);
                }

                // Convert row data to JSON string
                String json_row = objectMapper.writeValueAsString(rowData);
                excelData.add(json_row);
               
            }
            System.out.println("excel-------------------------------"+excelData);
            // Convert the list of row JSON strings to a single JSON string
//            String jsonResult = excelData;
//            jsonResults.add(jsonResult);
            jsonResults.addAll(excelData);
        }	
        System.out.println("result-----------------------------"+jsonResults);
        return jsonResults.toString();
    }

    public void saveJsonData(String jsonData) {
        String sql = "CALL insert_excel_data_from_json(?)";
        jdbcTemplate.update(sql, jsonData);
    }
}


________________________________
CREATE OR REPLACE FUNCTION public.save_excel(userjson text)
    RETURNS TABLE(data text) 
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
    ROWS 100
AS $BODY$
DECLARE
    -- Declare variables for storing JSON values
    _Approval_Rejection_Remarks text;
    _GIS_ID numeric;
    _Property_No text;
    _Block_No numeric;
    _Owner_Name text;
    _Tenant_Name text;
    _Property_Usage_Cat text;
    _Factor4_Type text;
    _Mobile_No text;
    _Property_Address text;
    _longitude numeric;
    _latitude numeric;
    _Water_Connection_Exists text;
    _No_of_Water_Connection numeric;
    _Water_Tax_Bill text;
    _Professional_Tax text;
    _Survey_Remark text;


    --userJsonArray json[];
    --userJsonObject json;
	
	jsonObject json;
	userJsonData json;
	jsonObjectInner json;
	i json;
	sql_query text;
BEGIN
  
	-- select * from tbl_error_log 
	--userJsonArray=cast(userjson as json[]);
	
	
	jsonObject := cast(userjson  AS JSON) :: JSON;
	userJsonData := cast(jsonObject ->> 'data' AS JSON) :: JSON;
		 
        FOR i IN SELECT * FROM json_array_elements(userJsonData )
        LOOP
			--raise notice '%',i;
			jsonObjectInner := cast(i AS JSON) :: JSON;
			
			    _Approval_Rejection_Remarks := COALESCE(jsonObjectInner ->> 'Approval / Rejection Remarks', '');
        _GIS_ID := COALESCE(NULLIF(jsonObjectInner ->> 'GIS ID', 'null')::numeric, 0);
        _Property_No := COALESCE(jsonObjectInner ->> 'Property No', '');
        _Block_No := COALESCE(NULLIF(jsonObjectInner ->> 'Block No', 'null')::numeric, 0);
        _Owner_Name := COALESCE(jsonObjectInner ->> 'Owner Name', '');
        _Tenant_Name := COALESCE(jsonObjectInner ->> 'Tenant Name', '');
        _Property_Usage_Cat := COALESCE(jsonObjectInner ->> 'Property Usage Cat', '');
        _Factor4_Type := COALESCE(jsonObjectInner ->> 'Factor4 Type', '');
        _Mobile_No := COALESCE(jsonObjectInner ->> 'Mobile No', '');
        _Property_Address := COALESCE(jsonObjectInner ->> 'Property Address', '');
        _longitude := COALESCE(NULLIF(jsonObjectInner ->> 'longitude', 'null')::numeric, 0);
        _latitude := COALESCE(NULLIF(jsonObjectInner ->> 'latitude', 'null')::numeric, 0);
        _Water_Connection_Exists := COALESCE(jsonObjectInner ->> 'Water Connection Exists', '');
        _No_of_Water_Connection := COALESCE(NULLIF (jsonObjectInner ->> 'No of Water Connection', 'null')::numeric,0);
        _Water_Tax_Bill := COALESCE(jsonObjectInner ->> 'Water Tax Bill', '');
        _Professional_Tax := COALESCE(jsonObjectInner ->> 'Professional Tax', '');
        _Survey_Remark := COALESCE(jsonObjectInner ->> 'Survey Remark', '');
		
		
        RAISE NOTICE ' Approval_Rejection_Remarks=%', _Approval_Rejection_Remarks;
        RAISE NOTICE ' GIS_ID=%', _GIS_ID;
        RAISE NOTICE ' Property_No=%', _Property_No;
        RAISE NOTICE ' Block_No=%', _Block_No;
        RAISE NOTICE ' Owner_Name=%', _Owner_Name;
        RAISE NOTICE ' Tenant_Name=%', _Tenant_Name;
        RAISE NOTICE ' Property_Usage_Cat=%', _Property_Usage_Cat;
        RAISE NOTICE ' Factor4_Type=%', _Factor4_Type;
        RAISE NOTICE ' Mobile_No=%', _Mobile_No;
        RAISE NOTICE ' Property_Address=%', _Property_Address;
        RAISE NOTICE ' longitude=%', _longitude;
        RAISE NOTICE ' latitude=%', _latitude;
        RAISE NOTICE ' Water_Connection_Exists=%', _Water_Connection_Exists;
        RAISE NOTICE ' No_of_Water_Connection=%', _No_of_Water_Connection;
        RAISE NOTICE ' Water_Tax_Bill=%', _Water_Tax_Bill;
        RAISE NOTICE ' Professional_Tax=%', _Professional_Tax;
        RAISE NOTICE ' Survey_Remark=%', _Survey_Remark;

			
			RAISE NOTICE 'loop ';
		INSERT INTO tbl_excel2 (
    approval_rejection_remarks, 
    gis_id, 
    property_no, 
    block_no, 
    owner_name, 
    tenant_name, 
    property_usage_cat, 
    factor4_type, 
    mobile_no, 
    property_address, 
    longitude, 
    latitude, 
    water_connection_exists, 
    no_of_water_connection, 
    water_tax_bill, 
    professional_tax, 
    survey_remark
) 
VALUES (
    _Approval_Rejection_Remarks,
    _GIS_ID,
    _Property_No,
    _Block_No,
    _Owner_Name,
    _Tenant_Name,
    _Property_Usage_Cat,
    _Factor4_Type,
    _Mobile_No,
    _Property_Address,
    _longitude,
    _latitude,
    _Water_Connection_Exists,
    _No_of_Water_Connection,
    _Water_Tax_Bill,
    _Professional_Tax,
    _Survey_Remark
);
sql_query := 'SELECT json_build_object(''responseCode'',200,''responseMessage'','' insert successfully created successfully'')::text as data;';


		raise notice 'insert';
		
		END LOOP;

   RETURN QUERY EXECUTE sql_query;
EXCEPTION
    WHEN OTHERS THEN
        -- Capture and log the error
        DECLARE
            p_errormessage text;
            p_errorstate text;
            p_errorline text;
        BEGIN
            p_errormessage := SQLERRM;
            p_errorstate := SQLSTATE;
            GET STACKED DIAGNOSTICS p_errorline = PG_EXCEPTION_CONTEXT;

            -- Insert the error into the error log table
            INSERT INTO tbl_error_log (error_name, error_callstack, error_method, created_on) 
            VALUES (p_errorline, p_errormessage || ':fn_save_excel', p_errorstate, timezone('Asia/Kolkata', now()));

            -- Build and return the error response
            RETURN QUERY SELECT jsonb_build_object(
                'responseCode', 201,
                'data', 'failed',
                'responseMessage', p_errormessage
            )::text AS data;
        END;
END;
$BODY$;

ALTER FUNCTION public.save_excel(text)
    OWNER TO postgres;

________________________________________________________________________30/7/24
CREATE OR REPLACE FUNCTION public.fn_excel_log(userjson text)
    RETURNS TABLE(data text) 
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
    ROWS 100
AS $BODY$
DECLARE
	error_msg text;
	jsonObject json;
	jsondata json;
	_filename  text;
	_status    text;
	_message   text;
	_id numeric;

	sql_query text;
BEGIN
	-- select * from tbl_error_log 
	jsonObject := cast(userjson  AS JSON) :: JSON;
	jsondata := cast(jsonObject ->> 'data' AS JSON) :: JSON;
	_filename:=  COALESCE(jsondata ->> 'filename', '');
 	_status:=  COALESCE(jsondata ->> 'status', '');  
	_message:=  COALESCE(jsondata ->> 'message', ''); 
  
	INSERT INTO public.tbl_excel_log(
	 filename, status, message)
	VALUES (_filename,_status,_message) returning id into _id ;
	 
	IF(_id)
	THEN
		 sql_query := 'SELECT json_build_object(''responseCode'',200,''responseMessage'','' insert successfully created successfully'')::text as data;';
	ELSE
			select error_callstact from tbl_error_log order by error_id desc limit 1 into error_msg;
		   sql_query := 'SELECT json_build_object(''responseCode'',203,''responseMessage'','''||error_msg||''')::text as data;';
	END IF;
	
   RETURN QUERY EXECUTE sql_query;
EXCEPTION
    WHEN OTHERS THEN
        -- Capture and log the error
        DECLARE
            p_errormessage text;
            p_errorstate text;
            p_errorline text;
        BEGIN
            p_errormessage := SQLERRM;
            p_errorstate := SQLSTATE;
            GET STACKED DIAGNOSTICS p_errorline = PG_EXCEPTION_CONTEXT;

            -- Insert the error into the error log table
            INSERT INTO tbl_error_log (error_name, error_callstack, error_method, created_on) 
            VALUES (p_errorline, p_errormessage || ':fn_excel_log', p_errorstate, timezone('Asia/Kolkata', now()));

            -- Build and return the error response
            RETURN QUERY SELECT jsonb_build_object(
                'responseCode', 201,
                'data', 'failed',
                'responseMessage', p_errormessage
            )::text AS data;
        END;
END;
$BODY$;

ALTER FUNCTION public.save_excel(text)
    OWNER TO postgres;

select fn_excel_log('{
    "filename": "test",
    "status": "true",
    "message": "successful"
}')



____________________________
 
    
    
    @PostMapping("/upload")
    public ResponseEntity<String> uploadFiles(@RequestParam("files") MultipartFile[] files) {
        
            try {for (MultipartFile file : files) {
            	    try {
            		
                        File convFile = new File(file.getOriginalFilename());
                        file.transferTo(convFile);
                        String jsonData = excelService.convertExcelToJson(convFile);
                        String insertResult = jdbcTemplate.queryForObject(SPUtility.INSERT_EXCEL, new Object[]{jsonData}, String.class);
                                              
                        JSONObject insertResult_obj = new JSONObject(insertResult);
                  
                        String file_name = file.getOriginalFilename();
                        String message = insertResult_obj.data.message;
                        boolean status = insertResult_obj.data.responsecode;

                        Map<String, Object> logData = new HashMap<>();
                        logData.put("filename", file_name);
                        logData.put("status", status);
                        logData.put("message", message);

                        String logDataJson = objectMapper.writeValueAsString(logData);
                        jdbcTemplate.queryForObject(SPUtility.INSERT_LOG, new Object[]{logDataJson}, String.class);
                        return ResponseEntity.ok("Files processed successfully");
                    	}
            		
            	catch(IOException | SQLException e) {
            		
            		  return ResponseEntity.status(500).body("Error processing file: " + file.getOriginalFilename());
            	}

            }
        }
             catch (IOException | SQLException e) {
                e.printStackTrace();
                return ResponseEntity.status(500).body("failed");
            }
       
    }

	__________
    public String convertExcelToJson(File file) throws IOException {
        List<String> jsonResults = new ArrayList<>();

        FileInputStream fis = new FileInputStream(file);
        Workbook workbook = new XSSFWorkbook(fis);
        Sheet sheet = workbook.getSheetAt(0);

        Row headerRow = sheet.getRow(0);

        for (int i = 1; i <= sheet.getLastRowNum(); i++) {
            Row row = sheet.getRow(i);
            Map<String, String> rowData = new HashMap<>();

            for (int j = 0; j < row.getLastCellNum(); j++) {
                Cell cell = row.getCell(j, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);
                String header = headerRow.getCell(j).getStringCellValue();
                String cellValue = cell.toString();

                // Handle special cases like removing quotes from Property Address
                if ("Property Address".equals(header)) {
                    cellValue = cellValue.replace("\"", "").replace("'", "");
                }

                // Convert empty cells to "null" string
                if (cellValue.trim().isEmpty()) {
                    cellValue = "null";
                }

                rowData.put(header, cellValue);
            }

            String jsonRow = objectMapper.writeValueAsString(rowData);
            jsonResults.add(jsonRow);
        }

        workbook.close();
        return jsonResults.toString();
    }


_____________________________________________________________________________31/7/24

package com.bezkoder.spring.jpa.postgresql.service;


	

import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.json.JSONArray;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

@Service
public class ExcelService {

	
	  
	  @Autowired
	    private ObjectMapper objectMapper;


    
    public String convertExcelToJson(MultipartFile file) throws IOException {
        Workbook workbook = WorkbookFactory.create(file.getInputStream());
      Sheet sheet = workbook.getSheetAt(0);
      JSONObject result = new JSONObject();
      List<String> excelData = new ArrayList<>();
      Row headerRow = sheet.getRow(0);

      for (int i = 1; i <= sheet.getLastRowNum(); i++) {
          Row row = sheet.getRow(i);
          if (row == null || isRowEmpty(row)) {
              continue;
          }
          Map<String, String> rowData = new HashMap<>();

          for (int j = 0; j < row.getLastCellNum(); j++) {
              Cell cell = row.getCell(j, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);
              String header = headerRow.getCell(j).getStringCellValue();
              String cellValue = cell.toString();
              if (header.equals("Property Address")) {
                  cellValue = cellValue.replace("\"", "");
                  cellValue = cellValue.replace("'", "");
              }
              if (cellValue.trim().isEmpty()) {
                  cellValue = "null";
              }
              rowData.put(header, cellValue);
          }

          // Convert row data to JSON string
          String json_row = objectMapper.writeValueAsString(rowData);
          excelData.add(json_row);
        }
      JSONArray jsonArray = new JSONArray(excelData.toString());
   
      result.put("data", jsonArray);
        workbook.close();
        return result.toString();
    }
    
    
    private boolean isRowEmpty(Row row) {
        for (int j = 0; j < row.getLastCellNum(); j++) {
            Cell cell = row.getCell(j, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);
            if (cell != null && cell.getCellType() != CellType.BLANK && !cell.toString().trim().isEmpty()) {
                return false;
            }
        }
        return true;
    }
    
    
//    private void logProcess( String fileName, String status, String message) throws SQLException {
//        String logSql = "INSERT INTO log_table (filename, status, message) VALUES (?, ?, ?)";
//        try (PreparedStatement logStmt = connection.prepareStatement(logSql)) {
//            logStmt.setString(1, fileName);
//            logStmt.setString(2, status);
//            logStmt.setString(3, message);
//            logStmt.executeUpdate();
//        }
//    }
    
//  public String convertMultipleExcelFilesToJson(MultipartFile[] files) throws IOException {
//  List<String> jsonResults = new ArrayList<>();
//
//  for (MultipartFile file : files) {
//      Workbook workbook = WorkbookFactory.create(file.getInputStream());
//      Sheet sheet = workbook.getSheetAt(0);
//
//      List<String> excelData = new ArrayList<>();
//      Row headerRow = sheet.getRow(0);
//
//      for (int i = 1; i <= sheet.getLastRowNum(); i++) {
//          Row row = sheet.getRow(i);
//          Map<String, String> rowData = new HashMap<>();
//
//          for (int j = 0; j < row.getLastCellNum(); j++) {
//              Cell cell = row.getCell(j, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);
//              String header = headerRow.getCell(j).getStringCellValue();
//              String cellValue = cell.toString();
//              if (header.equals("Property Address")) {
//                  cellValue = cellValue.replace("\"", "");
//                  cellValue = cellValue.replace("'", "");
//              }
//              if (cellValue.trim().isEmpty()) {
//                  cellValue = "null";
//              }
//              rowData.put(header, cellValue);
//          }
//
//          // Convert row data to JSON string
//          String json_row = objectMapper.writeValueAsString(rowData);
//          excelData.add(json_row);
//         
//      }
//      System.out.println("excel-------------------------------"+excelData);
//      // Convert the list of row JSON strings to a single JSON string
////      String jsonResult = excelData;
////      jsonResults.add(jsonResult);
//      jsonResults.addAll(excelData);
////  }	
//  System.out.println("result-----------------------------"+jsonResults);
//  return jsonResults.toString();
//}

//public void saveJsonData(String jsonData) {
//  String sql = "CALL insert_excel_data_from_json(?)";
//  jdbcTemplate.update(sql, jsonData);
//}

}




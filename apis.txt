25/5/24
	        @ApiIgnore
			@RequestMapping(value = "/get_files", method = RequestMethod.POST)
	    public ResponseEntity<?> getFile(@RequestBody String jsonInput) {
	  		  JSONObject jsonObject = new JSONObject(jsonInput);
	        String fileName = jsonObject.getString("images");
	        String directoryPath = jsonObject.getString("directorypath");
	        String[] fileNameArr = fileName.split(",");
	        File dir = new File(directoryPath);
	        Map<String, byte[]> filesContent = new HashMap<>();

	        try {
	            for (String name : fileNameArr) {
	                Path path = Paths.get(dir + File.separator + name);
	                byte[] fileBytes = Files.readAllBytes(path);
	                filesContent.put(path.getFileName().toString(), fileBytes);
	            }
	            return ResponseEntity.ok(filesContent);
	        } catch (IOException e) {
	            e.printStackTrace();
	            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("File not found");
	        }
	    }
	

	  @ApiIgnore
		@RequestMapping(value = "/delete_files", method = RequestMethod.POST)
	    public ResponseEntity<?> deleteSpecifiedFiles(@RequestBody String jsonInput) {
		  JSONObject jsonObject = new JSONObject(jsonInput);
	        String fileNames = jsonObject.getString("images");
	        String uploadDir = jsonObject.getString("directorypath");
	        String[] fileNameArr = fileNames.split(",");
	        List<String> deletedFiles = new ArrayList<>();
	        List<String> notFoundFiles = new ArrayList<>();
	        for (String fileName : fileNameArr) {
	            Path path = Paths.get(uploadDir, fileName);
	            try {
	                if (Files.exists(path)) {
	                    Files.delete(path);
	                    deletedFiles.add(fileName);
	                } else {
	                    notFoundFiles.add(fileName);
	                }
	            } catch (IOException e) {
	                e.printStackTrace();
	                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Failed to delete files");
	            }
	        }

	        Map<String, List<String>> response = new HashMap<>();
	        response.put("deletedFiles", deletedFiles);
	        response.put("notFoundFiles", notFoundFiles);

	        return ResponseEntity.ok(response);
	    }
29-05-24
        @ApiIgnore
			@RequestMapping(path = "/get_files/{imagetype}/{imagename}", method = RequestMethod.GET)
	    public ResponseEntity<?> getFile(@PathVariable("imagetype") String imageType,
	    		@PathVariable("imagename") String imageName) throws IOException {

	        	byte[] fileContent = null;
	        	Path path = Paths.get("D:/Amnex/digital_twin-Angular/digital_twin_frontend/src/app/demo/project-management/images", imageType,imageName);
	        	System.out.println("Image " +path.toString());
	            if (Files.exists(path)) {
	            	fileContent = Files.readAllBytes(path);
	          
	                System.out.println("Image " +path.toString());
	            } else {
	                throw new IOException("File not found: " + imageName);
	            }
	            HttpHeaders headers = new HttpHeaders();
                headers.setContentType(MediaType.parseMediaType("image/png"));
                headers.add("Content-Disposition", "inline;filename=" + imageName);
                headers.setCacheControl("must-revalidate, post-check=0, pre-check=0");
                return new ResponseEntity<byte[]>(fileContent, headers, HttpStatus.OK);
	    }
30april
   <div class="container mt-5">
            <ngb-carousel (slide)="slideActivate($event)">
                <ng-template ngbSlide>
                    <div class="picsum-img-wrapper">
                        <img src="http://localhost:8090/digitaltwin/dashboard/get_files/hh.png" alt="Angular Carousel 1"
                            class="d-block w-100" />
                    </div>
                    <div class="carousel-caption">
                        <h3>Title Goes Here</h3>
                        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>
                    </div>
                </ng-template>
                <ng-template ngbSlide>
                    <div class="picsum-img-wrapper">
                        <img src="http://localhost:8090/digitaltwin/dashboard/get_files/ss.png"
                            alt="Angular Carousel 2" />
                    </div>
                    <div class="carousel-caption">
                        <h3>Title Goes Here</h3>
                        <p>Consectetur tortor volutpat pretium.</p>
                    </div>
                </ng-template>
            </ngb-carousel>
        </div>
	31april
//save
	    private void saveFile(MultipartFile file, String directory) throws IOException {
	        String filename = file.getOriginalFilename();
	        File dir = new File(directory);
	        if (!dir.exists()) {
	            dir.mkdirs();
	        }
	        Path filePath = Paths.get(directory, filename);
	        Files.delete(filePath);
	    }
//	delete    
	    private void deleteFile(String filename, String directory) throws IOException {
	   
	        File dir = new File(directory);
	        if (!dir.exists()) {
	            dir.mkdirs();
	        }
	        Path filePath = Paths.get(directory, filename);
	        Files.delete(filePath);
	    }  
//		fetch   
	    private ResponseEntity<byte[]> fetchFile(String filename, String directory) throws IOException {
	   
	    	Path path = Paths.get(directory);
            if (Files.exists(path)) {
            	return ResponseEntity.ok(Files.readAllBytes(path));
            } else {
                throw new IOException("File not found: " + filename);
            }
           
	    } 
       @DeleteMapping("/delete_files/{foldername}/{filename}")
	        public ResponseEntity<?> deleteSpecifiedFiles(
	                @PathVariable("filename") String fileName,
	                @PathVariable("foldername") String folderName) {

	            String dir;
	            if ("images".equals(folderName)) {
	                dir = "D:/Amnex/digital_twin-Angular/digital_twin_frontend/src/app/demo/project-management/images";
	            } else {
	                dir = "D:/Amnex/digital_twin-Angular/digital_twin_frontend/src/app/demo/project-management/documents";
	            }

	            try {
	                deleteFile(fileName, dir);
	                return ResponseEntity.status(HttpStatus.OK).body("File deleted successfully.");
	            } catch (IOException e) {
	                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error while deleting file: " + e.getMessage());
	            }
	        }
//	    	delete    
	 	   
	        private void deleteFile(String fileName, String dir) throws IOException {
	            Path path = Paths.get(dir, fileName);
	            Files.deleteIfExists(path);
	        }

---------------------------------------------------------------------
	        @ApiIgnore
			@RequestMapping(path = "/get_files/{foldername}/{filename}", method = RequestMethod.GET)
	    public ResponseEntity<?> getFile(
	    		@PathVariable("filename") String imageName,@PathVariable("foldername") String foldername) throws IOException {
	        	String dir="";
	        	if(foldername=="images") {
	        		dir="D:/Amnex/digital_twin-Angular/digital_twin_frontend/src/app/demo/project-management/images";
	        	}
	        	else {
	        		dir="D:/Amnex/digital_twin-Angular/digital_twin_frontend/src/app/demo/project-management/documents";

	        	}
	        	try {
	        		 byte[] fileContent = fetchFile(imageName, dir);
	                 ByteArrayResource resource = new ByteArrayResource(fileContent);

	                 HttpHeaders headers = new HttpHeaders();
	                 headers.add(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" + imageName + "\"");
	                 headers.add(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_OCTET_STREAM_VALUE);

	                 return ResponseEntity.ok()
	                         .headers(headers)
	                         .contentLength(fileContent.length)
	                         .body(resource);
	        	
	        } catch (IOException e) {
	            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error while fetching file: " + e.getMessage());
	        }        	
	    }
//			fetch   
		    private byte[] fetchFile(String filename, String directory) throws IOException {
		   
		    	Path path = Paths.get(directory);
	            if (Files.exists(path)) {
	            	return Files.readAllBytes(path);
	            } else {
	                throw new IOException("File not found: " + filename);
	            }
	           
		    }
-------------------------------------------------------------------------------
	
	  @RequestMapping(value = "/upload_files", method = RequestMethod.POST, consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
	    public ResponseEntity<?> addfile(
	            @RequestParam(value = "images", required = false) MultipartFile[] images,
	            @RequestParam(value = "documents", required = false) MultipartFile[] documents,
	            @RequestParam(value = "jsonData", required = true) String folderName,
	            HttpServletRequest httpServletRequest,
	            HttpServletResponse httpServletResponse) {

	        String imageDirectory = "D:/Amnex/digital_twin-Angular/digital_twin_frontend/src/app/demo/project-management/images";
	        String documentDirectory = "D:/Amnex/digital_twin-Angular/digital_twin_frontend/src/app/demo/project-management/documents";

	        try {
	            // Process uploaded images
	            if (images != null) {
	                for (MultipartFile file : images) {
	                    saveFile(file, imageDirectory);
	                }
	            }

	            // Process uploaded documents
	            if (documents != null) {
	                for (MultipartFile file : documents) {
	                    saveFile(file, documentDirectory);
	                }
	            }

	        } catch (IOException e) {
	            e.printStackTrace();
	            return ResponseEntity.status(HttpServletResponse.SC_INTERNAL_SERVER_ERROR)
	                    .body("Error occurred while uploading files: " + e.getMessage());
	        }

	        return ResponseEntity.ok("Files uploaded successfully.");
	    }
//save
	    private void saveFile(MultipartFile file, String directory) throws IOException {
	        String filename = file.getOriginalFilename();
	        File dir = new File(directory);
	        if (!dir.exists()) {
	            dir.mkdirs();
	        }
	        Path filePath = Paths.get(directory, filename);
	        Files.delete(filePath);
	    }


<mat-tab-group>
    <mat-tab md-colors="{color:'#76ee59'}" label="Projects">

        <div class="row">
            <kendo-grid [kendoGridBinding]="projectData" [style.height.%]="100" [pageSize]="10" filterable="menu"
                [skip]="0" [pageable]="true" [sortable]="true">
                <ng-template kendoGridToolbarTemplate>
                    <div class="export-template">
                        <button class=" btn btn-dark export-new excel" (click)="exportExcel(excelexport)">Export
                            toExcel</button>
                    </div>
                    <div class="export-template">
                        <button class="export-new excel btn btn-dark" (click)="openEditDialog('add',0)">Add new
                            project</button>
                    </div>
                </ng-template>
                <ng-container *ngFor="let data of grid_fields">
                    <kendo-grid-column *ngFor="let data of grid_fields" field="{{data.fields}}" title="{{data.title}}"
                        [hidden]="data.hide" [width]="250"></kendo-grid-column>
                </ng-container>
                <kendo-grid-column field="Action" title="Action" [width]="200" [sticky]="true" [columnMenu]="false">
                    <ng-template kendoGridCellTemplate let-dataItem>
                        <div class="d-flex gap-2">
                            <button kendoButton size="small" class="d-flex align-items-center btn btn-dark"
                                rounded="small" fillMode="outline" themeColor="base"
                                (click)="openEditDialog('edit',dataItem.project_id)">
                                Edit
                            </button>
                            <button class="d-flex align-items-center  btn btn-dark"
                                (click)="delete(dataItem.project_id)">
                                delete
                            </button>
                        </div>
                    </ng-template>
                </kendo-grid-column>
                <!-- Excel -->
                <kendo-excelexport fileName="Reports.xlsx" [data]="projectData" #excelexport>
                    <ng-container *ngFor="let data of grid_fields">
                        <kendo-excelexport-column field="{{data.fields}}" title="{{data.title}}">
                        </kendo-excelexport-column>
                    </ng-container>
                </kendo-excelexport>
            </kendo-grid>
        </div>

        <!-- project form dialog -->
        <kendo-dialog class="custom-dialog handler-dialog" title="form" *ngIf="editDialog" [minWidth]="250"
            [width]="1024" (close)="closeEditDialog()">
            <h1>{{btnName}}</h1>

            <form [formGroup]="projectForm" (ngSubmit)="onSubmit(btnSubmit)" style="height: 600px; overflow-y: auto;"
                enctype="multipart/form-data">
                <div>
                    <div class="form-group">
                        <label for="first-name"> Project Name</label>
                        <input type="text" id="username" class="form-control" formControlName="project_name">
                        <div *ngIf="projectForm.get('project_name').invalid && (projectForm.get('project_name').dirty ||projectForm.get('project_name').touched)"
                            class="alert alert-danger">
                            <div *ngIf="projectForm.get('project_name').errors?.['required']">
                                project name is required.
                            </div>
                        </div>
                    </div>
                </div>
                <div>
                    <div class="form-group">
                        <label for="first-name">Location Name</label>
                        <input type="text" id="location_name" class="form-control" formControlName="location_name">
                        <div *ngIf="projectForm.get('location_name').invalid && (projectForm.get('location_name').dirty ||projectForm.get('location_name').touched)"
                            class="alert alert-danger">
                            <div *ngIf="projectForm.get('location_name').errors?.['required']">
                                location name is required.
                            </div>
                        </div>
                    </div>
                </div>

                <div>
                    <div class="form-group">
                        <label for="first-name">contractor_name</label>
                        <input type="text" id="contractor_name" class="form-control" formControlName="contractor_name">
                        <div *ngIf="projectForm.get('contractor_name').invalid && (projectForm.get('contractor_name').dirty ||projectForm.get('contractor_name').touched)"
                            class="alert alert-danger">
                            <div *ngIf="projectForm.get('contractor_name').errors?.['required']">
                                contractor_name is required.
                            </div>
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <label for="contractor_number">contractor_number</label>
                    <input type="text" id="" class="form-control" formControlName="contractor_number">

                    <div *ngIf="projectForm.get('contractor_number').invalid && (projectForm.get('contractor_number').dirty || projectForm.get('contractor_number').touched)"
                        class="alert alert-danger">
                        <div *ngIf="projectForm.get('contractor_number').errors?.['required']">
                            contactno is required.
                        </div>
                        <div *ngIf="projectForm.get('contractor_number').errors?.['pattern']">Invalid contact
                            number (should be a
                            10-digit number)</div>
                    </div>
                </div>

                <br />

                <div class="form-group">
                    <label for="contractor_email">Email: </label>
                    <input type="text" formControlName="contractor_email" class="form-control" autocomplete="noac">
                    <div *ngIf="projectForm.get('contractor_email').invalid && (projectForm.get('contractor_email').dirty || projectForm.get('contractor_email').touched)"
                        class="alert alert-danger">
                        <div *ngIf="projectForm.get('contractor_email').errors['required']">Email is
                            required
                        </div>

                        <div *ngIf="projectForm.get('contractor_email').errors['email']">Please enter a
                            valid email address</div>
                    </div>
                </div>
                <br>
                <div *ngIf="isAdd">


                </div>
                <br>
                <div style="display: flex; justify-content: space-between;">
                    <div class="form-group" style="flex: 1; margin-right: 10px;">
                        <label>Start Date</label>
                        <mat-form-field style="width: 100%;">
                            <input matInput [matDatepicker]="startPicker" formControlName="start_date">
                            <mat-datepicker-toggle matSuffix [for]="startPicker"></mat-datepicker-toggle>
                            <mat-datepicker #startPicker></mat-datepicker>
                        </mat-form-field>
                        <div *ngIf="projectForm.get('start_date').invalid && (projectForm.get('start_date').dirty || projectForm.get('start_date').touched)"
                            class="alert alert-danger">
                            <div *ngIf="projectForm.get('start_date').errors?.['required']">
                                start_date is required.
                            </div>
                        </div>
                    </div>
                    <div class="form-group" style="flex: 1; margin-left: 10px;">
                        <label>End Date</label>
                        <mat-form-field style="width: 100%;">
                            <input matInput [matDatepicker]="endPicker" formControlName="end_date">
                            <mat-datepicker-toggle matSuffix [for]="endPicker"></mat-datepicker-toggle>
                            <mat-datepicker #endPicker></mat-datepicker>
                        </mat-form-field>
                        <div *ngIf="projectForm.get('end_date').invalid && (projectForm.get('end_date').dirty || projectForm.get('end_date').touched)"
                            class="alert alert-danger">
                            <div *ngIf="projectForm.get('end_date').errors?.['required']">
                                End date is required.
                            </div>
                        </div>
                    </div>
                </div>

                <br>




                <br>
                <div>
                    <div class="form-group">
                        <label for="first-name">total cost</label>
                        <input type="text" id="total_cost" class="form-control" formControlName="total_cost">
                        <div *ngIf="projectForm.get('total_cost').invalid && (projectForm.get('total_cost').dirty ||projectForm.get('total_cost').touched)"
                            class="alert alert-danger">
                            <div *ngIf="projectForm.get('total_cost').errors?.['required']">
                                total_cost is required.
                            </div>
                        </div>
                    </div>
                </div>


                <!--  -->
                <button class="btn btn-dark" type="submit">{{btnSubmit}}</button>
                <button class="btn btn-dark" (click)="closeEditDialog()">close</button>
            </form>

            {{this.projectForm.value|json}}
        </kendo-dialog>




    </mat-tab>

    <mat-tab label="Milestones">
        <div class="form-group">
            <label style="color: #48c1f1; font-size: larger;"> select project:</label>
            <select style="border-color: #48c1f1; " id="project_id" (change)="loadMilestoneOnChange($event)"
                class="form-control">
                <option value="">none</option>
                <option class="form-control" *ngFor="let p of projects" [value]="p.project_id">{{ p.project_name }}
                </option>
            </select>
        </div>


        <!-- grid -->
        <div class="row">

            <kendo-grid [kendoGridBinding]="milestoneData" [style.height.%]="100" [pageSize]="10" filterable="menu"
                [skip]="0" [pageable]="true" [sortable]="true">

                <ng-template kendoGridToolbarTemplate let-dataItem>
                    <div class="export-template">
                        <button class=" btn btn-dark export-new excel" (click)="exportExcel(excelexport)">Export to
                            Excel</button>
                    </div>

                    <div class="export-template">
                        <button class="export-new excel btn btn-dark" (click)="openEditDialogMilestone('add','0')">Add
                            new
                            Milestone</button>
                    </div>
                </ng-template>
                <ng-container>
                    <!-- Container element to handle both *ngFor and *ngIf -->
                    <ng-container *ngFor="let data of grid_fields_milestone">
                        <kendo-grid-column *ngIf="data.fields !== 'image' && data.fields !== 'document'"
                            [field]="data.fields" [title]="data.title" [hidden]="data.hide" [width]="250">
                        </kendo-grid-column>
                    </ng-container>

                    <!-- Image Column -->
                    <kendo-grid-column field="image" title="Image" [hidden]="false" [width]="150">
                        <ng-template kendoGridCellTemplate let-dataItem>
                            {{dataItem.image}}
                            <button kendoButton size="small" class="btn btn-dark"
                                (click)="fetchImageDocs(dataItem.milestone_id , 'image')">
                                View Image
                            </button>
                        </ng-template>
                    </kendo-grid-column>

                    <!-- Document Column -->
                    <kendo-grid-column field="document" title="Document" [hidden]="false" [width]="150">
                        <ng-template kendoGridCellTemplate let-dataItem>
                            {{dataItem.document}}
                            <button kendoButton size="small" class="btn btn-dark"
                                (click)="fetchImageDocs(dataItem.milestone_id , 'document')">
                                View Document
                            </button>
                        </ng-template>
                    </kendo-grid-column>

                    <!-- Action Button Column -->
                    <kendo-grid-column field="Action" title="Action" [width]="150" [sticky]="true" [columnMenu]="false">
                        <ng-template kendoGridCellTemplate let-dataItem>
                            <div class="d-flex gap-2">
                                <button kendoButton size="small" class="d-flex align-items-center btn btn-dark"
                                    rounded="small" fillMode="outline" themeColor="base"
                                    (click)="openEditDialogMilestone('edit', dataItem.milestone_id)">
                                    Edit
                                </button>
                                <button class="d-flex align-items-center btn btn-dark"
                                    (click)="deleteMilestone(dataItem.milestone_id)">
                                    Delete
                                </button>
                            </div>
                        </ng-template>
                    </kendo-grid-column>
                </ng-container>


                <kendo-excelexport fileName="Reports.xlsx" [data]="milestoneData" #excelexport>
                    <ng-container *ngFor="let data of grid_fields_milestone">
                        <kendo-excelexport-column field="{{data.fields}}" title="{{data.title}}">
                        </kendo-excelexport-column>
                    </ng-container>
                </kendo-excelexport>
            </kendo-grid>
        </div>

    </mat-tab>


</mat-tab-group>
<kendo-dialog class="custom-dialog handler-dialog" title="form" *ngIf="editDialogMilestone" [minWidth]="250" [width]="1024" (close)="closeEditDialog()">
    <h1>{{btnNameMilestone}}</h1>

    <form [formGroup]="milestoneForm" (ngSubmit)="onSubmitMilestone(btnSubmitMilestone)" style="height: 600px; overflow-y: auto;">
        <div>
            <div class="form-group">
                <label for="first-name"> Milestone Name</label>
                <input type="text" class="form-control" formControlName="milestone_name">
                <div *ngIf="milestoneForm.get('milestone_name').invalid && (milestoneForm.get('milestone_name').dirty || milestoneForm.get('milestone_name').touched)" class="alert alert-danger">
                    <div *ngIf="milestoneForm.get('milestone_name').errors?.['required']">
                        Milestone is required.
                    </div>
                </div>
            </div>
        </div>

        <div class="form-group">
            <label for="description">Description</label>
            <input type="text" id="description" class="form-control" formControlName="description">
            <div *ngIf="milestoneForm.get('description').invalid && (milestoneForm.get('description').dirty || milestoneForm.get('description').touched)" class="alert alert-danger">
                <div *ngIf="milestoneForm.get('description').errors?.['required']">
                    Description is required.
                </div>
            </div>
        </div>

        <div class="form-group">
            <label for="status">Is Approved: </label>
            <select formControlName="is_approved" class="form-control">
                <option value="true">TRUE</option>
                <option value="false">FALSE</option>
            </select>
        </div>

        <div class="form-group">
            <label>Milestone Status:</label>
            <select class="form-control" formControlName="milestone_status">
                <option value="">Select</option>
                <option *ngFor="let s of status_list" [value]="s.status_id">{{ s.status_name }}</option>
            </select>
            <div *ngIf="milestoneForm.get('milestone_status').invalid && (milestoneForm.get('milestone_status').dirty || milestoneForm.get('milestone_status').touched)" class="alert alert-danger">
                <div *ngIf="milestoneForm.get('milestone_status').errors?.['required']">Milestone status is required.</div>
            </div>
        </div>

        <div class="form-group">
            <label>Remarks</label>
            <input type="text" class="form-control" formControlName="remarks">
            <div *ngIf="milestoneForm.get('remarks').invalid && (milestoneForm.get('remarks').dirty || milestoneForm.get('remarks').touched)" class="alert alert-danger">
                <div *ngIf="milestoneForm.get('remarks').errors?.['required']">
                    Remark is required.
                </div>
            </div>
        </div>

        <div style="display: flex; justify-content: space-between;">
            <div class="form-group" style="flex: 1; margin-right: 10px;">
                <label>Image</label>
            
                <input id="imageInput" type="file" multiple="multiple" accept="image/png,image/jpeg" (change)="onImageChange($event)" formControlName="image">
                <p *ngIf="isimgVisible">{{ milestoneForm.get('image').value  }}</p>
                <div *ngIf="milestoneForm.get('image').invalid && (milestoneForm.get('image').dirty || milestoneForm.get('image').touched)" class="alert alert-danger">
                    <div *ngIf="milestoneForm.get('image').errors?.['required']">
                        Image is required.
                    </div>
                </div>
            </div>
            <div class="form-group" style="flex: 1; margin-left: 10px;">
                <label>Document</label>
       
                <input id="docInput" class="hidden" title="sg" type="file" multiple="multiple" (change)="onDocumentChange($event)" formControlName="document">
                <p *ngIf="isdocVisible">{{ milestoneForm.get('document').value }}</p>
                <div *ngIf="milestoneForm.get('document').invalid && (milestoneForm.get('document').dirty || milestoneForm.get('document').touched)" class="alert alert-danger">
                    <div *ngIf="milestoneForm.get('document').errors?.['required']">
                        Document is required.
                    </div>
                </div>
            </div>
        </div>

        <br>
        <div style="display: flex; justify-content: space-between;">
            <div class="form-group" style="flex: 1; margin-right: 10px;">
                <label>Start Date</label>
                <mat-form-field style="width: 100%;">
                    <input matInput [matDatepicker]="mstartPicker" formControlName="start_date">
                    <mat-datepicker-toggle matSuffix [for]="mstartPicker"></mat-datepicker-toggle>
                    <mat-datepicker #mstartPicker></mat-datepicker>
                </mat-form-field>
                <div *ngIf="milestoneForm.get('start_date').invalid && (milestoneForm.get('start_date').dirty || milestoneForm.get('start_date').touched)" class="alert alert-danger">
                    <div *ngIf="milestoneForm.get('start_date').errors?.['required']">
                        Start date is required.
                    </div>
                </div>
            </div>
            <div class="form-group" style="flex: 1; margin-left: 10px;">
                <label>End Date</label>
                <mat-form-field style="width: 100%;">
                    <input matInput [matDatepicker]="mendPicker" formControlName="end_date">
                    <mat-datepicker-toggle matSuffix [for]="mendPicker"></mat-datepicker-toggle>
                    <mat-datepicker #mendPicker></mat-datepicker>
                </mat-form-field>
                <div *ngIf="milestoneForm.get('end_date').invalid && (milestoneForm.get('end_date').dirty || milestoneForm.get('end_date').touched)" class="alert alert-danger">
                    <div *ngIf="milestoneForm.get('end_date').errors?.['required']">
                        End date is required.
                    </div>
                </div>
            </div>
        </div>

     
        <button class="btn btn-dark" type="submit">{{btnSubmitMilestone}}</button>
        <button class="btn btn-dark" type="button" (click)="closeEditDialog()">Close</button>
    </form>


    <pre>{{milestoneForm.value | json}}</pre>
    <pre>{{milestoneForm.valid | json}}</pre>
</kendo-dialog>
<div class="container mt-5">
    <ngb-carousel *ngIf="fetchedDocuments && fetchedDocuments.length" (slide)="slideActivate($event)">
      <ng-template ngbSlide *ngFor="let item of fetchedDocuments">
        <div class="carousel-item-wrapper">
          <div class="picsum-img-wrapper">
            <img [src]="'D:/Amnex/digital_twin-Angular/digital_twin_frontend/src/app/demo/project-management/images' + item" class="d-block w-100 carousel-image" alt="{{item}}" />
            <p>{{ item }}</p>
          </div>
          <div class="carousel-caption">
            <h3>Title Goes Here</h3>
            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>
          </div>
        </div>
      </ng-template>
    </ngb-carousel>
  </div>
  <div class="container mt-5">
    <ngb-carousel *ngIf="fetchedImages && fetchedImages.length" (slide)="slideActivate($event)">
      <ng-template ngbSlide *ngFor="let item of fetchedImages">
        <div class="carousel-item-wrapper">
          <div class="picsum-img-wrapper">
            <img [src]="'D:/Amnex/digital_twin-Angular/digital_twin_frontend/src/app/demo/project-management/documents/' + item" class="d-block w-100 carousel-image" alt="{{item}}" />
            <p>{{ item }}</p>
          </div>
          <div class="carousel-caption">
            <h3>Title Goes Here</h3>
            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>
          </div>
        </div>
      </ng-template>
    </ngb-carousel>
  </div>



----------------------------
9:15
<mat-tab-group>
    <mat-tab md-colors="{color:'#76ee59'}" label="Projects">

        <div class="row">
            <kendo-grid [kendoGridBinding]="projectData" [style.height.%]="100" [pageSize]="10" filterable="menu"
                [skip]="0" [pageable]="true" [sortable]="true">
                <ng-template kendoGridToolbarTemplate>
                    <div class="export-template">
                        <button class=" btn btn-dark export-new excel" (click)="exportExcel(excelexport)">Export
                            toExcel</button>
                    </div>
                    <div class="export-template">
                        <button class="export-new excel btn btn-dark" (click)="openEditDialog('add',0)">Add new
                            project</button>
                    </div>
                </ng-template>
                <ng-container *ngFor="let data of grid_fields">
                    <kendo-grid-column *ngFor="let data of grid_fields" field="{{data.fields}}" title="{{data.title}}"
                        [hidden]="data.hide" [width]="250"></kendo-grid-column>
                </ng-container>
                <kendo-grid-column field="Action" title="Action" [width]="200" [sticky]="true" [columnMenu]="false">
                    <ng-template kendoGridCellTemplate let-dataItem>
                        <div class="d-flex gap-2">
                            <button kendoButton size="small" class="d-flex align-items-center btn btn-dark"
                                rounded="small" fillMode="outline" themeColor="base"
                                (click)="openEditDialog('edit',dataItem.project_id)">
                                Edit
                            </button>
                            <button class="d-flex align-items-center  btn btn-dark"
                                (click)="delete(dataItem.project_id)">
                                delete
                            </button>
                        </div>
                    </ng-template>
                </kendo-grid-column>
                <!-- Excel -->
                <kendo-excelexport fileName="Reports.xlsx" [data]="projectData" #excelexport>
                    <ng-container *ngFor="let data of grid_fields">
                        <kendo-excelexport-column field="{{data.fields}}" title="{{data.title}}">
                        </kendo-excelexport-column>
                    </ng-container>
                </kendo-excelexport>
            </kendo-grid>
        </div>

        <!-- project form dialog -->
        <kendo-dialog class="custom-dialog handler-dialog" title="form" *ngIf="editDialog" [minWidth]="250"
            [width]="1024" (close)="closeEditDialog()">
            <h1>{{btnName}}</h1>

            <form [formGroup]="projectForm" (ngSubmit)="onSubmit(btnSubmit)" style="height: 600px; overflow-y: auto;"
                enctype="multipart/form-data">
                <div>
                    <div class="form-group">
                        <label for="first-name"> Project Name</label>
                        <input type="text" id="username" class="form-control" formControlName="project_name">
                        <div *ngIf="projectForm.get('project_name').invalid && (projectForm.get('project_name').dirty ||projectForm.get('project_name').touched)"
                            class="alert alert-danger">
                            <div *ngIf="projectForm.get('project_name').errors?.['required']">
                                project name is required.
                            </div>
                        </div>
                    </div>
                </div>
                <div>
                    <div class="form-group">
                        <label for="first-name">Location Name</label>
                        <input type="text" id="location_name" class="form-control" formControlName="location_name">
                        <div *ngIf="projectForm.get('location_name').invalid && (projectForm.get('location_name').dirty ||projectForm.get('location_name').touched)"
                            class="alert alert-danger">
                            <div *ngIf="projectForm.get('location_name').errors?.['required']">
                                location name is required.
                            </div>
                        </div>
                    </div>
                </div>

                <div>
                    <div class="form-group">
                        <label for="first-name">contractor_name</label>
                        <input type="text" id="contractor_name" class="form-control" formControlName="contractor_name">
                        <div *ngIf="projectForm.get('contractor_name').invalid && (projectForm.get('contractor_name').dirty ||projectForm.get('contractor_name').touched)"
                            class="alert alert-danger">
                            <div *ngIf="projectForm.get('contractor_name').errors?.['required']">
                                contractor_name is required.
                            </div>
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <label for="contractor_number">contractor_number</label>
                    <input type="text" id="" class="form-control" formControlName="contractor_number">

                    <div *ngIf="projectForm.get('contractor_number').invalid && (projectForm.get('contractor_number').dirty || projectForm.get('contractor_number').touched)"
                        class="alert alert-danger">
                        <div *ngIf="projectForm.get('contractor_number').errors?.['required']">
                            contactno is required.
                        </div>
                        <div *ngIf="projectForm.get('contractor_number').errors?.['pattern']">Invalid contact
                            number (should be a
                            10-digit number)</div>
                    </div>
                </div>

                <br />

                <div class="form-group">
                    <label for="contractor_email">Email: </label>
                    <input type="text" formControlName="contractor_email" class="form-control" autocomplete="noac">
                    <div *ngIf="projectForm.get('contractor_email').invalid && (projectForm.get('contractor_email').dirty || projectForm.get('contractor_email').touched)"
                        class="alert alert-danger">
                        <div *ngIf="projectForm.get('contractor_email').errors['required']">Email is
                            required
                        </div>

                        <div *ngIf="projectForm.get('contractor_email').errors['email']">Please enter a
                            valid email address</div>
                    </div>
                </div>
                <br>
                <div *ngIf="isAdd">


                </div>
                <br>
                <div style="display: flex; justify-content: space-between;">
                    <div class="form-group" style="flex: 1; margin-right: 10px;">
                        <label>Start Date</label>
                        <mat-form-field style="width: 100%;">
                            <input matInput [matDatepicker]="startPicker" formControlName="start_date">
                            <mat-datepicker-toggle matSuffix [for]="startPicker"></mat-datepicker-toggle>
                            <mat-datepicker #startPicker></mat-datepicker>
                        </mat-form-field>
                        <div *ngIf="projectForm.get('start_date').invalid && (projectForm.get('start_date').dirty || projectForm.get('start_date').touched)"
                            class="alert alert-danger">
                            <div *ngIf="projectForm.get('start_date').errors?.['required']">
                                start_date is required.
                            </div>
                        </div>
                    </div>
                    <div class="form-group" style="flex: 1; margin-left: 10px;">
                        <label>End Date</label>
                        <mat-form-field style="width: 100%;">
                            <input matInput [matDatepicker]="endPicker" formControlName="end_date">
                            <mat-datepicker-toggle matSuffix [for]="endPicker"></mat-datepicker-toggle>
                            <mat-datepicker #endPicker></mat-datepicker>
                        </mat-form-field>
                        <div *ngIf="projectForm.get('end_date').invalid && (projectForm.get('end_date').dirty || projectForm.get('end_date').touched)"
                            class="alert alert-danger">
                            <div *ngIf="projectForm.get('end_date').errors?.['required']">
                                End date is required.
                            </div>
                        </div>
                    </div>
                </div>

                <br>




                <br>
                <div>
                    <div class="form-group">
                        <label for="first-name">total cost</label>
                        <input type="text" id="total_cost" class="form-control" formControlName="total_cost">
                        <div *ngIf="projectForm.get('total_cost').invalid && (projectForm.get('total_cost').dirty ||projectForm.get('total_cost').touched)"
                            class="alert alert-danger">
                            <div *ngIf="projectForm.get('total_cost').errors?.['required']">
                                total_cost is required.
                            </div>
                        </div>
                    </div>
                </div>


                <!--  -->
                <button class="btn btn-dark" type="submit">{{btnSubmit}}</button>
                <button class="btn btn-dark" (click)="closeEditDialog()">close</button>
            </form>

            {{this.projectForm.value|json}}
        </kendo-dialog>




    </mat-tab>

    <mat-tab label="Milestones">
        <div class="form-group">
            <label style="color: #48c1f1; font-size: larger;"> select project:</label>
            <select style="border-color: #48c1f1; " id="project_id" (change)="loadMilestoneOnChange($event)"
                class="form-control">
                <option value="">none</option>
                <option class="form-control" *ngFor="let p of projects" [value]="p.project_id">{{ p.project_name }}
                </option>
            </select>
        </div>


        <!-- grid -->
        <div class="row">

            <!-- <kendo-grid [kendoGridBinding]="milestoneData" [style.height.%]="100" [pageSize]="10" filterable="menu" [skip]="0" [pageable]="true" [sortable]="true">
  
        <ng-template kendoGridToolbarTemplate>
          <div class="export-template">
              <button type="button" kendoGridExcelCommand svg="file-excel" class="export-new excel" (click)="exportExcel(excelexport)">Export to Excel</button>
          </div>
        </ng-template>      
        <ng-container *ngFor="let data of grid_fields_milestone">
            <kendo-grid-column field="{{data.fields}}" title="{{data.title}}" [hidden]="data.hide" [width]="250"></kendo-grid-column>
        </ng-container>        
        
        <kendo-grid-column field="Action" title="Action" [width]="200" [columnMenu]="true">
          <ng-template kendoGridCellTemplate let-dataItem>
            <div class="d-flex gap-2">
              <button kendoButton size="small" class="d-flex align-items-center" size="small" rounded="small" fillMode="outline"
                themeColor="base">
                Delete
              </button>
              <button kendoButton size="small" class="d-flex align-items-center" id="Edit" size="small" rounded="small" fillMode="outline"
              themeColor="base">
              Edit
            </button>
            </div>
          </ng-template>
        </kendo-grid-column>
      
      </kendo-grid> -->




            <kendo-grid [kendoGridBinding]="milestoneData" [style.height.%]="100" [pageSize]="10" filterable="menu"
                [skip]="0" [pageable]="true" [sortable]="true">

                <ng-template kendoGridToolbarTemplate let-dataItem>
                    <div class="export-template">
                        <button class=" btn btn-dark export-new excel" (click)="exportExcel(excelexport)">Export to
                            Excel</button>
                    </div>

                    <div class="export-template">
                        <button class="export-new excel btn btn-dark" (click)="openEditDialogMilestone('add','0')">Add
                            new
                            Milestone</button>
                    </div>
                </ng-template>
                <ng-container>
                    <!-- Container element to handle both *ngFor and *ngIf -->
                    <ng-container *ngFor="let data of grid_fields_milestone">
                        <kendo-grid-column *ngIf="data.fields !== 'image' && data.fields !== 'document'"
                            [field]="data.fields" [title]="data.title" [hidden]="data.hide" [width]="250">
                        </kendo-grid-column>
                    </ng-container>

                    <!-- Image Column -->
                    <kendo-grid-column field="image" title="Image" [hidden]="false" [width]="150">
                        <ng-template kendoGridCellTemplate let-dataItem>
                            {{dataItem.image}}
                            <button kendoButton size="small" class="btn btn-dark"
                                (click)="fetchImageDocs(dataItem.milestone_id , 'image')">
                                View Image
                            </button>
                        </ng-template>
                    </kendo-grid-column>

                    <!-- Document Column -->
                    <kendo-grid-column field="document" title="Document" [hidden]="false" [width]="150">
                        <ng-template kendoGridCellTemplate let-dataItem>
                            {{dataItem.document}}
                            <button kendoButton size="small" class="btn btn-dark"
                                (click)="fetchImageDocs(dataItem.milestone_id , 'document')">
                                View Document
                            </button>
                        </ng-template>
                    </kendo-grid-column>

                    <!-- Action Button Column -->
                    <kendo-grid-column field="Action" title="Action" [width]="150" [sticky]="true" [columnMenu]="false">
                        <ng-template kendoGridCellTemplate let-dataItem>
                            <div class="d-flex gap-2">
                                <button kendoButton size="small" class="d-flex align-items-center btn btn-dark"
                                    rounded="small" fillMode="outline" themeColor="base"
                                    (click)="openEditDialogMilestone('edit', dataItem.milestone_id)">
                                    Edit
                                </button>
                                <button class="d-flex align-items-center btn btn-dark"
                                    (click)="deleteMilestone(dataItem.milestone_id)">
                                    Delete
                                </button>
                            </div>
                        </ng-template>
                    </kendo-grid-column>
                </ng-container>


                <kendo-excelexport fileName="Reports.xlsx" [data]="milestoneData" #excelexport>
                    <ng-container *ngFor="let data of grid_fields_milestone">
                        <kendo-excelexport-column field="{{data.fields}}" title="{{data.title}}">
                        </kendo-excelexport-column>
                    </ng-container>
                </kendo-excelexport>
            </kendo-grid>
        </div>

    </mat-tab>


</mat-tab-group>

<kendo-dialog class="custom-dialog handler-dialog" title="form" *ngIf="editDialogMilestone" [minWidth]="250"
    [width]="1024" (close)="closeEditDialog()">
    <h1>{{btnNameMilestone}}</h1>

    <form [formGroup]="milestoneForm" (ngSubmit)="onSubmitMilestone(btnSubmitMilestone)"
        style="height: 600px; overflow-y: auto;">
        <div>
            <div class="form-group">
                <label for="first-name"> Milestone Name</label>
                <input type="text" class="form-control" formControlName="milestone_name">
                <div *ngIf="milestoneForm.get('milestone_name').invalid && (milestoneForm.get('milestone_name').dirty ||milestoneForm.get('milestone_name').touched)"
                    class="alert alert-danger">
                    <div *ngIf="milestoneForm.get('milestone_name').errors?.['required']">
                        milestone is required.
                    </div>
                </div>
            </div>
        </div>

        <div class="form-group">
            <label for="description">Description</label>
            <input type="text" id="description" class="form-control" formControlName="description">
            <div *ngIf="milestoneForm.get('description').invalid && (milestoneForm.get('description').dirty ||milestoneForm.get('description').touched)"
                class="alert alert-danger">
                <div *ngIf="milestoneForm.get('description').errors?.['required']">
                    Description is required.
                </div>
            </div>
        </div>

        <div class="form-group">
            <label for="status">Is Approved: </label>
            <select formControlName="is_approved" class="form-control">
                <option value="true">TRUE</option>
                <option value="false">FALSE</option>
            </select>

            <!-- <div *ngIf="userForm.get('status').invalid && (userForm.get('status').dirty || userForm.get('status').touched)"
              class="alert alert-danger">
              <div *ngIf="userForm.get('status').errors['required']">Status is required</div>
            </div> -->
        </div>

        <div class="form-group">
            <label>Milestone status:</label>
            <select class="form-control" formControlName="milestone_status">
                <option value="">Select</option>
                <option *ngFor="let s of status_list" [value]="s.status_id">{{ s.status_name }}</option>
            </select>
            <!-- <div
              *ngIf="userForm.get('role_id').invalid && (userForm.get('role_id').dirty || userForm.get('role_id').touched)"
              class="alert alert-danger">
              <div *ngIf="userForm.get('role_id').errors['required']">role id is required</div>
            </div> -->
        </div>

        <div>
            <div class="form-group">
                <label>Remarks</label>
                <input type="text" class="form-control" formControlName="remarks">
                <!-- <div *ngIf="milestoneForm.get('remarks').invalid && (milestoneForm.get('remarks').dirty ||milestoneForm.get('remarks').touched)"
                    class="alert alert-danger">
                    <div *ngIf="milestoneForm.get('remarks').errors?.['required']">
                        Remark is required.
                    </div>
                </div> -->
            </div>
        </div>

        <div style="display: flex; justify-content: space-between;">
            <div class="form-group" style="flex: 1; margin-right: 10px;">
                <label>Image</label>
                <input id="imageInput" type="file" multiple="multiple" accept="image/png,image/jpeg" (change)="onImageChange($event)">
                <p *ngIf="isimgVisible">{{ milestoneForm.get('image').value  }}</p>
                <!-- <div *ngIf="milestoneForm.get('image').invalid && (milestoneForm.get('image').dirty ||milestoneForm.get('image').touched)"
                    class="alert alert-danger">
                    <div *ngIf="milestoneForm.get('image').errors?.['required']">
                        Image is required.
                    </div>
                </div> -->
            </div>
            <div class="form-group" style="flex: 1; margin-left: 10px;">
                <label>Document</label>
                <!-- <input type="text" class="form-control" formControlName="document"> -->
                <input id="docInput" type="file" multiple="multiple" (change)="onDocumentChange($event)">
                <p *ngIf="isdocVisible">{{ milestoneForm.get('document').value }}</p>
                <!-- <div *ngIf="milestoneForm.get('document').invalid && (milestoneForm.get('document').dirty ||milestoneForm.get('document').touched)"
                    class="alert alert-danger">
                    <div *ngIf="milestoneForm.get('document').errors?.['required']">
                        Document is required.
                    </div>
                </div> -->
            </div>
        </div>

        <br>
        <div *ngIf="isAdd">

        </div>
        <br>
        <div style="display: flex; justify-content: space-between;">
            <div class="form-group" style="flex: 1; margin-right: 10px;">
                <label>Start Date</label>

                <mat-form-field style="width: 100%;">
                    <input matInput [matDatepicker]="mstartPicker" formControlName="start_date">
                    <mat-datepicker-toggle matSuffix [for]="mstartPicker"></mat-datepicker-toggle>
                    <mat-datepicker #mstartPicker></mat-datepicker>
                </mat-form-field>
                <!-- <div *ngIf="milestoneForm.get('start_date').invalid && (milestoneForm.get('start_date').dirty || milestoneForm.get('start_date').touched)"
                   class="alert alert-danger">
                <div *ngIf="milestoneForm.get('start_date').errors?.['required']">
                  Start date is required.
                </div>
              </div> -->
            </div>
            <div class="form-group" style="flex: 1; margin-left: 10px;">
                <label>End Date</label>
                <mat-form-field style="width: 100%;">
                    <input matInput [matDatepicker]="mendPicker" formControlName="end_date">
                    <mat-datepicker-toggle matSuffix [for]="mendPicker"></mat-datepicker-toggle>
                    <mat-datepicker #mendPicker></mat-datepicker>
                </mat-form-field>
                <!-- <div *ngIf="milestoneForm.get('end_date').invalid && (milestoneForm.get('end_date').dirty || milestoneForm.get('end_date').touched)"
                   class="alert alert-danger">
                <div *ngIf="milestoneForm.get('end_date').errors?.['required']">
                  End date is required.
                </div> -->
            </div>
        </div>

        <!--  -->
        <button class="btn btn-dark" type="submit">{{btnSubmitMilestone}}</button>
        <button class="btn btn-dark" (click)="closeEditDialog()">close</button>
    </form>
    {{this.milestoneForm.value|json}}
</kendo-dialog>
<!-- image popup dialog -->
<div>
    <kendo-dialog class="custom-dialog handler-dialog" title="Images" *ngIf="ImageDialog" [minWidth]="250"
        [width]="1024" (close)="closeEditDialog()">

        Image Carousel

        
        <div class="container mt-5"  >
            <div>
                <ngb-carousel  (slide)="slideActivate($event)">
                    <ng-template *ngFor="let item of fetchedImages" ngbSlide>
                        <div class="picsum-img-wrapper">
                            <img src="http://localhost:8090/digitaltwin/dashboard/get_files/images/{{item}}" class="d-block w-100" />
                            <p>{{item}}</p>
                        </div>
                        <div class="carousel-caption">
                            <h3>Title Goes Here</h3>
                            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>
                        </div>
                    </ng-template>
        
                </ngb-carousel>
            </div>
        </div>

        <kendo-dialog-actions>
            <button kendoButton (click)="closeEditDialog()">Close</button>
        </kendo-dialog-actions>
    </kendo-dialog>
</div>

<!-- document popup dialog -->

<div>
    <kendo-dialog class="custom-dialog handler-dialog" *ngIf="documentDialog" title="document" [minWidth]="250"
        [width]="1024" (close)="closeEditDialog()">
        <div class="container mt-5"  >
            <div>
                <ngb-carousel  (slide)="slideActivate($event)">
                    <ng-template *ngFor="let item of fetchedDocuments" ngbSlide>
                        <div class="picsum-img-wrapper">
                            <img src="http://localhost:8090/digitaltwin/dashboard/get_files/d/{{item}}" class="d-block w-100" />
                            <p>{{item}}</p>
                        </div>
                        <div class="carousel-caption">
                            <h3>Title Goes Here</h3>
                            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>
                        </div>
                    </ng-template>
        
                </ngb-carousel>
            </div>
        </div>
       


        
         

        <kendo-dialog-actions>
            <button kendoButton (click)="closeEditDialog()">Close</button>
        </kendo-dialog-actions>
    </kendo-dialog>
</div>

<!-- <img src="http://localhost:8090/digitaltwin/dashboard/get_files/hh.png"> -->

==========================================================================
3-6-24
CREATE TABLE public.tbl_web_announcement
(
    announcement_id serial NOT NULL ,
    announcement_title text,
    announcement_description text,
    created_datetime timestamp with time zone,
    latitude double precision,
    longitude double precision,
    address text,
    announcement_datetime timestamp with time zone,
    role_id integer,
    CONSTRAINT tbl_web_announcement_pkey PRIMARY KEY (announcement_id),
    CONSTRAINT role_id_fk FOREIGN KEY (role_id)
        REFERENCES public.tbl_web_role_master (role_id)
)
✔


CREATE OR REPLACE FUNCTION public.fn_web_crud_announcement_management(
	userjson text)
    RETURNS TABLE(data text) 
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
    ROWS 1000

AS $BODY$
DECLARE
	_title text;
	_description text;
	_latitude double precision;
	_longitude double precision;
	_address text;
	_role_id integer;
	_announcement_datetime timestamp with time zone;
			
	sql_query text;
	userJsonObject JSON;
	_flag TEXT;
	_filter TEXT DEFAULT '';
	_CREATE_FLAG TEXT DEFAULT 'create';
	_DELETE_FLAG TEXT DEFAULT 'delete';
	_UPDATE_FLAG TEXT DEFAULT 'update';
	_FETCH_FLAG TEXT DEFAULT 'fetch';

BEGIN

	 raise notice '%',userjson;
	userJsonObject := cast(userjson AS JSON) :: JSON;
	
	_title:= userJsonObject ->>'title';
	_description := userJsonObject ->>'description';
	_latitude := userJsonObject ->>'latitude';
	_longitude := userJsonObject ->>'longitude';
	_address := userJsonObject ->>'address';
	_role_id := userJsonObject ->>'role_id';
	_announcement_datetime := userJsonObject ->>'announcement_datetime';
	_flag := userJsonObject ->> 'flag';	

	
    raise notice '%',_title;
    raise notice '%',_latitude;
    raise notice '%',_role_id;

	IF (_flag = _CREATE_FLAG)
	THEN
	 
	 	IF EXISTS (SELECT announcement_id FROM public.tbl_web_announcement WHERE (announcement_title = ''|| _announcement_title ||'' OR announcement_datetime = ''|| _announcement_datetime||'')  ) 
		THEN	
        	raise notice 'announcement for same date and title is already exists';
			sql_query :=  'SELECT json_build_object(''responseCode'',201,''responseMessage'',''announcement for same date and title is already exists.'')::text as data;';
		ELSE
			INSERT INTO public.tbl_web_announcement(
	         announcement_title, announcement_description, announcement_datetime ,latitude, longitude, address, role_id, created_datetime)
	        VALUES ( ?, ?, ?, ?, ?, ?, ?, now());
			sql_query := 'SELECT json_build_object(''responseCode'',200,''responseMessage'',''Announcement created successfully created successfully'')::text as data;';			
	END IF;
		
	ELSEIF (_flag = _UPDATE_FLAG)
	THEN
		IF EXISTS (SELECT user_id FROM public.tbl_user_master WHERE user_id = _user_id) 
		THEN	
			IF EXISTS (SELECT user_id FROM public.tbl_user_master WHERE user_id != _user_id AND (contact_no = ''|| _user_contact_no ||'' OR email_id = ''|| _user_email ||'')) THEN
				sql_query :=  'SELECT json_build_object(''responseCode'',201,''responseMessage'',''User name or email id is already Exists.'')::text as data;';
			ELSE
				UPDATE public.tbl_user_master
				SET user_name = _user_name, 
				--password = _user_password, 
				-- name = _name, 
				contact_no = _user_contact_no, 
				email_id = _user_email, 
				status = _status, 
				role_id = _role_id, 
				--is_delete = false, 
				modified_on=now()
				WHERE user_id = _user_id RETURNING user_id INTO _inserted_user_id;	
				
				UPDATE tbl_ward_assign_master set status = FALSE where fkuserid = _inserted_user_id;
				FOR _ward_json IN SELECT * FROM json_array_elements((userJsonObject ->> 'ward_nos')::json)
					LOOP
						IF _ward_json ->> 'ward_no' IS NOT NULL THEN
							_ward_no := _ward_json ->> 'ward_no';
							
							INSERT INTO tbl_ward_assign_master (fkuserid,wardno,status,created_datetime) 
								values (_inserted_user_id,_ward_no,TRUE,now());

						END IF;
				END LOOP;
				
				
				sql_query := 'SELECT json_build_object(''responseCode'',200,''responseMessage'',''User details updated successfully'')::text as data;';
			END IF;	
			
		ELSE
			sql_query :=  'SELECT json_build_object(''responseCode'',201,''responseMessage'',''User is not available.'')::text as data;';
		END IF;
		
	ELSEIF(_flag = _UPDATE_STATUS_FLAG) --- FOR UPDATE STATUS OF USER select * from tbl_user_master
	THEN
		IF EXISTS (SELECT user_id FROM public.tbl_user_master WHERE user_id = _user_id)
		THEN
			UPDATE public.tbl_user_master
			SET status = _status
			WHERE user_id = _user_id;
			sql_query :=  'SELECT json_build_object(''responseCode'',200,''responseMessage'',''User Status Update successfully.'')::text as data;';
		ELSE
			sql_query :=  'SELECT json_build_object(''responseCode'',201,''responseMessage'',''User is not available.'')::text as data;';
		
	END IF;
	ELSEIF (_flag = _DELETE_FLAG) ---- FOR DELETE USER
	THEN

		IF EXISTS (SELECT user_id FROM public.tbl_user_master WHERE user_id = _user_id) 
		THEN	

			UPDATE public.tbl_user_master
			SET status = _status,
			is_delete = true
			WHERE user_id = _user_id;
			sql_query :=  'SELECT json_build_object(''responseCode'',200,''responseMessage'',''User deleted successfully.'')::text as data;';
		ELSE
			sql_query :=  'SELECT json_build_object(''responseCode'',201,''responseMessage'',''User is not available.'')::text as data;';
		END IF;
	
	ELSEIF (_flag = _FETCH_FLAG) ---- FOR FETCH USER
	THEN
		--_filter := ' AND tum.user_id != ' || _user_id ;
		
		sql_query := 'SELECT json_build_object(''responseCode'',200,''data'',COALESCE(to_json(array_agg(data1)), 
		''[]''),''responseMessage'',''ok'')::text as data
		FROM (
			SELECT  
			tum.user_id,
			tum.user_name,
			tum.name,
			tum.contact_no,
			tum.email_id,
			(SELECT role_name FROM tbl_role_master WHERE role_id = tum.role_id::INTEGER) AS role_name,
			tum.status,
			tum.role_id,
			
			(array_to_json(array( select json_build_object(''ward_no'',wam.wardno)							
				FROM public.tbl_ward_assign_master AS wam
				LEFT JOIN public.tbl_user_master um ON
				wam.fkuserid::integer = tum.user_id::integer
				WHERE um.user_id::integer = wam.fkuserid::integer and wam.status is TRUE
			))) AS ward_data
			 
			-- (array_to_json(array( select json_build_object(''ward_no'',wam.wardno)							
			--	FROM public.tbl_user_master AS tum
			--	LEFT JOIN public.tbl_ward_assign_master AS wam ON
			--	wam.fkuserid::integer = tum.user_id::integer
			--	WHERE wam.fkuserid::integer = tum.user_id::integer and wam.status is TRUE
			--))) AS ward_data
			 
			from tbl_user_master tum  WHERE is_delete is false
			--'||_filter||'
			)data1;';																								   
	END IF;
		
	RETURN QUERY EXECUTE sql_query;

	EXCEPTION WHEN OTHERS 
	THEN
		DECLARE p_errormessage VARCHAR(4000);
		DECLARE p_errorstate VARCHAR(4000);
		DECLARE p_errorline VARCHAR(4000);

		BEGIN									
			p_errormessage:= SQLERRM;
			p_errorstate:= SQLSTATE;
			GET STACKED DIAGNOSTICS p_errorline = PG_EXCEPTION_CONTEXT;
				
			INSERT INTO tbl_error_log(error_name,error_callstack,error_method,created_on)		
			SELECT p_errorline,p_errormessage||':fn_web_crud_surveyor_management',p_errorstate,timezone('Asia/Kolkata'::text, now());
			
			sql_query := 'SELECT json_build_object(''responseCode'',201,''data'',''failed'', ''responseMessage'', '''||p_errormessage||''')::text as data';
	END;
	RETURN QUERY EXECUTE sql_query;
END;
$BODY$;

ALTER FUNCTION public.fn_web_crud_surveyor_management(text)
    OWNER TO postgres;
✔


CREATE OR REPLACE FUNCTION public.fn_web_crud_announcement(
	jsondata text)
    RETURNS TABLE(data text) 
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
    ROWS 1000

AS $BODY$
DECLARE		
		
			-- 03-06-24
		
			-- SELECT public.fn_add_announcements('{"title":"Announcement 1","description":"Announcement description","user_id":1,"latitude":"22.723228", "longitude":"75.875230","address":"Test 123","department_id":1,"announcement_datetime":"2019-12-27 12:12:12"}');
			
			json_data json;
			_title text;
			_description text;
			_user_id integer;
			_latitude double precision;
			_longitude double precision;
			_address text;
			_role_id integer;
			_announcement_datetime timestamp with time zone;		
			sql_query TEXT;
	BEGIN         		
			json_data := cast(jsondata as json) :: json;
			_title := json_data ->> 'announcement_title';
			_description := json_data ->> 'announcement_description';
			_user_id := json_data ->> 'user_id';
			_latitude := json_data ->> 'latitude';
			_longitude := json_data ->> 'longitude';
			_address := json_data ->> 'address';
			_department_id := json_data ->> 'department_id';
			_announcement_datetime := json_data ->> 'announcement_datetime';
			
			INSERT INTO public.tbl_announcement
			(announcement_title, announcement_description, created_datetime, user_id, latitude, longitude, address, department_id, announcement_datetime)
			VALUES
			(_title, _description, now(), _user_id, _latitude, _longitude, _address, _department_id, _announcement_datetime)
			RETURNING announcement_id INTO _id;
			
			IF _id != 0
			THEN
				sql_query := 'SELECT json_build_object(''responseCode'', 200, ''responseMessage'',''Announcement added successfully.'') :: text';
			ELSE
				sql_query := 'SELECT json_build_object(''responseCode'', 204, ''responseMessage'',''Error while data insertion'') :: text';
			END IF;
			RETURN QUERY EXECUTE sql_query;	


------------✨		THEN	
			IF EXISTS (SELECT announcement_id FROM public.tbl_web_announcement WHERE announcement_id = _announcement_id  ))
			THEN
				UPDATE public.tbl_web_announcement
				SET announcement_title  = _announcement_title   	,         
				announcement_description= _announcement_description	,
				created_datetime        = _created_datetime			,		
                latitude                = _latitude					,
                longitude 				= _longitude				,
                address 				= _address					,
                announcement_datetime	= _announcement_datetime	,
                role_id 				= _role_id

				sql_query := 'SELECT json_build_object(''responseCode'',200,''responseMessage'',''announcement updated successfully'')::text as data;';
			ELSE
			sql_query :=  'SELECT json_build_object(''responseCode'',201,''responseMessage'',''announcement is not available.'')::text as data;';
			END IF;	
------------✨	

CREATE OR REPLACE FUNCTION public.fn_web_crud_announcement_management(
	userjson text)
    RETURNS TABLE(data text) 
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
    ROWS 1000

AS $BODY$
DECLARE
	_announcement_title text;
	_announcement_description text;
	_latitude double precision;
	_longitude double precision;
	_address text;
	_role_id integer;
	_announcement_datetime timestamp with time zone;
	_announcement_id int;
			
	sql_query text;
	userJsonObject JSON;
	_flag TEXT;
	_filter TEXT DEFAULT '';
	_CREATE_FLAG TEXT DEFAULT 'create';
	_DELETE_FLAG TEXT DEFAULT 'delete';
	_UPDATE_FLAG TEXT DEFAULT 'update';
	_FETCH_FLAG TEXT DEFAULT 'fetch';

BEGIN
-- 	select * from tbl_web_announcement
	raise notice '%',userjson;
	userJsonObject := cast(userjson AS JSON) :: JSON;
    
	_announcement_title := userJsonObject ->> 'announcement_title';
    RAISE NOTICE 'announcement_title: %', _announcement_title;

    _announcement_description := userJsonObject ->> 'announcement_description';
    RAISE NOTICE 'announcement_description: %', _announcement_description;

    _latitude := userJsonObject ->> 'latitude';
    RAISE NOTICE 'latitude: %', _latitude;

    _longitude := userJsonObject ->> 'longitude';
    RAISE NOTICE 'longitude: %', _longitude;

    _address := userJsonObject ->> 'address';
    RAISE NOTICE 'address: %', _address;

    _role_id := (userJsonObject ->> 'role_id')::INT;
    RAISE NOTICE 'role_id: %', _role_id;

    _announcement_datetime := userJsonObject ->> 'announcement_datetime';
    RAISE NOTICE 'announcement_datetime: %', _announcement_datetime;

    _flag := userJsonObject ->> 'flag';
    RAISE NOTICE 'flag: %', _flag;

    _announcement_id := (userJsonObject ->> 'announcement_id')::INT;
    RAISE NOTICE 'announcement_id: %', _announcement_id;
	
	IF (_flag = _CREATE_FLAG)-- insert
	THEN
	 	IF EXISTS (SELECT announcement_id FROM public.tbl_web_announcement WHERE (announcement_title = ''|| _announcement_title ||'' OR announcement_datetime = ''|| _announcement_datetime||'')  ) 
		THEN	
        	raise notice 'announcement for same date and title is already exists';
			sql_query :=  'SELECT json_build_object(''responseCode'',201,''responseMessage'',''announcement for same date and title is already exists.'')::text as data;';
		ELSE
			INSERT INTO public.tbl_web_announcement(
	         			announcement_title, announcement_description, announcement_datetime , latitude,  longitude,  address,  role_id, created_datetime)
	        VALUES (_announcement_title,   _announcement_description, _announcement_datetime ,_latitude, _longitude, _address, _role_id, now());
			sql_query := 'SELECT json_build_object(''responseCode'',200,''responseMessage'',''Announcement created successfully created successfully'')::text as data;';			
			raise notice 'announcement inserted';
		END IF;
	ELSEIF (_flag = _UPDATE_FLAG)
	THEN	
			IF EXISTS (SELECT announcement_id FROM public.tbl_web_announcement WHERE announcement_id = _announcement_id  )
			THEN
				UPDATE public.tbl_web_announcement
				SET announcement_title  = _announcement_title   	,         
				announcement_description= _announcement_description	,
				created_datetime        = _created_datetime			,		
                latitude                = _latitude					,
                longitude 				= _longitude				,
                address 				= _address					,
                announcement_datetime	= _announcement_datetime	,
                role_id 				= _role_id;

				sql_query := 'SELECT json_build_object(''responseCode'',200,''responseMessage'',''announcement updated successfully'')::text as data;';
				raise notice 'announcement updated';
			ELSE
			sql_query :=  'SELECT json_build_object(''responseCode'',201,''responseMessage'',''announcement is not available.'')::text as data;';
			raise notice 'announcement not updated';
			END IF;
	ELSEIF (_flag = _DELETE_FLAG)--delete
	THEN	
			IF EXISTS (SELECT announcement_id FROM public.tbl_web_announcement WHERE announcement_id = _announcement_id ) THEN
				DELETE FROM public.tbl_web_announcement 
				WHERE announcement_id = _announcement_id;
							sql_query :=  'SELECT json_build_object(''responseCode'',200,''responseMessage'',''announcement deleted successfully.'')::text as data;';
							raise notice 'announcement delete';
			ELSE
							sql_query :=  'SELECT json_build_object(''responseCode'',201,''responseMessage'',''announcement is not available.'')::text as data;';
							raise notice 'announcement noot updated';
			END IF;		
	ELSEIF (_flag = _FETCH_FLAG) ---- FOR FETCH by id
	THEN
		sql_query := 'SELECT json_build_object(''responseCode'',200,''data'',COALESCE(to_json(array_agg(data1)), 
		''[]''),''responseMessage'',''ok'')::text as data
		FROM (
			SELECT  
			    announcement_title,  
				announcement_description,
				created_datetime,        
				latitude ,               
				longitude 	,			
				address ,				
				announcement_datetime	,
				role_id 				
			    from tbl_web_announcement  WHERE announcement_id = _announcement_id
		     )data1;';
		raise notice 'announcement fetch by id';	 
			
	ELSEIF (_flag = _FETCH_FLAG) ---- FOR FETCH all data 
	THEN
		sql_query := 'SELECT json_build_object(''responseCode'',200,''data'',COALESCE(to_json(array_agg(data1)), 
		''[]''),''responseMessage'',''ok'')::text as data
		FROM (SELECT 
			    announcement_title,  
				announcement_description,
				created_datetime,        
				latitude ,               
				longitude 	,			
				address ,				
				announcement_datetime	,
				role_id 				
			    from tbl_web_announcement )data1;';  
		   raise notice 'announcement fetch all';	 
	END IF;
		
	RETURN QUERY EXECUTE sql_query;
		raise notice 'locha hai';
	EXCEPTION WHEN OTHERS 
	THEN
		DECLARE p_errormessage VARCHAR(4000);
		DECLARE p_errorstate VARCHAR(4000);
		DECLARE p_errorline VARCHAR(4000);

		BEGIN									
			p_errormessage:= SQLERRM;
			p_errorstate:= SQLSTATE;
			GET STACKED DIAGNOSTICS p_errorline = PG_EXCEPTION_CONTEXT;
				
			INSERT INTO tbl_error_log(error_name,error_callstack,error_method,created_on)		
			SELECT p_errorline,p_errormessage||':fn_web_crud_announcement_management',p_errorstate,timezone('Asia/Kolkata'::text, now());
			
			sql_query := 'SELECT json_build_object(''responseCode'',201,''data'',''failed'', ''responseMessage'', '''||p_errormessage||''')::text as data';
	END;
	RETURN QUERY EXECUTE sql_query;
END;
$BODY$;

--------------
select fn_web_crud_announcement_management('{
										   "flag":"create",
										   "announcement_title":"meeting", 
										   "announcement_description":"meeting1", 
										   "announcement_datetime":"3-6-2024" , 
										   "latitude":"22.723228",  
										   "longitude":"75.875230",  
										   "address":"test",  
										   "role_id":"2"}')
-- 										   select * from tbl_web_role_master
-- select * from tbl_web_announcement
SELECT * FROM tbl_error_log ORDER BY created_on DESC LIMIT 10


✔ CREATED SP
✔TESTING FOR INSERT


CREATE OR REPLACE FUNCTION public.fn_web_crud_announcement_management(
	userjson text)
    RETURNS TABLE(data text) 
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
    ROWS 1000

AS $BODY$
DECLARE
	_announcement_title text;
	_announcement_description text;
	_latitude double precision;
	_longitude double precision;
	_address text;
	_role_id integer;
	_announcement_datetime timestamp with time zone;
	_announcement_id int;
			
	sql_query text;
	userJsonObject JSON;
	_flag TEXT;
	_filter TEXT DEFAULT '';
	_CREATE_FLAG TEXT DEFAULT 'create';
	_DELETE_FLAG TEXT DEFAULT 'delete';
	_UPDATE_FLAG TEXT DEFAULT 'update';
	_FETCH_FLAG TEXT DEFAULT 'fetch';
	_FETCHID_FLAG TEXT DEFAULT 'fetch_id';

BEGIN
-- 	select * from tbl_web_announcement
--  select fn_web_crud_announcement_management('{"flag":"create","announcement_title":"meeting2","announcement_description":"meeting2","announcement_datetime":"2222-02-02","latitude":"22.723228","longitude":"75.875230","address":"test","role_id":"2"}')
--  select fn_web_crud_announcement_management('{"flag":"update","announcement_id":"1","announcement_title":"meetingupdate","announcement_description":"meetingupd","announcement_datetime":"2222-02-02","latitude":"22.723228","longitude":"75.875230","address":"test","role_id":"2"}')
--  select fn_web_crud_announcement_management('{"flag":"fetch_id","announcement_id":"1"}')
--  select fn_web_crud_announcement_management('{"flag":"fetch"}')
--  select fn_web_crud_announcement_management('{"flag":"delete","announcement_id":"1"}')

	raise notice '%',userjson;
	userJsonObject := cast(userjson AS JSON) ;
    
	_announcement_title := userJsonObject ->> 'announcement_title';
    RAISE NOTICE 'announcement_title: %', _announcement_title;

    _announcement_description := userJsonObject ->> 'announcement_description';
    RAISE NOTICE 'announcement_description: %', _announcement_description;

    _latitude := userJsonObject ->> 'latitude';
    RAISE NOTICE 'latitude: %', _latitude;

    _longitude := userJsonObject ->> 'longitude';
    RAISE NOTICE 'longitude: %', _longitude;

    _address := userJsonObject ->> 'address';
    RAISE NOTICE 'address: %', _address;

    _role_id := (userJsonObject ->> 'role_id')::INT;
    RAISE NOTICE 'role_id: %', _role_id;

    _announcement_datetime :=  to_timestamp(userJsonObject ->> 'announcement_datetime', 'YYYY-MM-DD');
    RAISE NOTICE 'announcement_datetime: %', _announcement_datetime;

    _flag := userJsonObject ->> 'flag';
    RAISE NOTICE 'flag: %', _flag;

    _announcement_id := (userJsonObject ->> 'announcement_id')::INT;
    RAISE NOTICE 'announcement_id: %', _announcement_id;
	
	IF (_flag = _CREATE_FLAG)-- insert
	THEN
	RAISE NOTICE 'ss';
	 	IF EXISTS (SELECT announcement_id FROM public.tbl_web_announcement WHERE (announcement_title = ''|| _announcement_title ||'' AND announcement_datetime = _announcement_datetime)  ) 
		THEN	
        	raise notice 'announcement for same date and title is already exists';
			sql_query :=  'SELECT json_build_object(''responseCode'',201,''responseMessage'',''announcement for same date and title is already exists.'')::text as data;';
		ELSE
		RAISE NOTICE 'ss _>';
			INSERT INTO public.tbl_web_announcement(
	         			announcement_title, announcement_description, announcement_datetime , latitude,  longitude,  address,  role_id, created_datetime)
	        VALUES (_announcement_title,   _announcement_description, _announcement_datetime ,_latitude, _longitude, _address, _role_id, now());
			sql_query := 'SELECT json_build_object(''responseCode'',200,''responseMessage'',''Announcement created successfully created successfully'')::text as data;';			
			raise notice 'announcement inserted';
		END IF;
	ELSEIF (_flag = _UPDATE_FLAG)
	THEN	
			IF EXISTS (SELECT announcement_id FROM public.tbl_web_announcement WHERE announcement_id = _announcement_id  )
			THEN
				UPDATE public.tbl_web_announcement
				SET announcement_title  = _announcement_title   	,         
				announcement_description= _announcement_description	,
                latitude                = _latitude					,
                longitude 				= _longitude				,
                address 				= _address					,
                announcement_datetime	= _announcement_datetime	,
                role_id 				= _role_id;

				sql_query := 'SELECT json_build_object(''responseCode'',200,''responseMessage'',''announcement updated successfully'')::text as data;';
				raise notice 'announcement updated';
			ELSE
			sql_query :=  'SELECT json_build_object(''responseCode'',201,''responseMessage'',''announcement is not available.'')::text as data;';
			raise notice 'announcement not updated';
			END IF;
	ELSEIF (_flag = _DELETE_FLAG)--delete
	THEN	
			IF EXISTS (SELECT announcement_id FROM public.tbl_web_announcement WHERE announcement_id = _announcement_id ) THEN
				DELETE FROM public.tbl_web_announcement 
				WHERE announcement_id = _announcement_id;
							sql_query :=  'SELECT json_build_object(''responseCode'',200,''responseMessage'',''announcement deleted successfully.'')::text as data;';
							raise notice 'announcement delete';
			ELSE
							sql_query :=  'SELECT json_build_object(''responseCode'',201,''responseMessage'',''announcement is not available.'')::text as data;';
							raise notice 'announcement noot updated';
			END IF;		
	ELSEIF (_flag = _FETCHID_FLAG) ---- FOR FETCH by id
	THEN
		sql_query := 'SELECT json_build_object(''responseCode'',200,''data'',COALESCE(to_json(array_agg(data1)), 
		''[]''),''responseMessage'',''ok'')::text as data
		FROM (
			SELECT  
			    announcement_title,  
				announcement_description,
				created_datetime,        
				latitude ,               
				longitude 	,			
				address ,				
				announcement_datetime	,
				role_id 				
			    from tbl_web_announcement  WHERE announcement_id ='''|| _announcement_id||'''
		     )data1;';
		raise notice 'announcement fetch by id';	 
			
	ELSEIF (_flag = _FETCH_FLAG) ---- FOR FETCH all data 
	THEN
		sql_query := 'SELECT json_build_object(''responseCode'',200,''data'',COALESCE(to_json(array_agg(data1)), 
		''[]''),''responseMessage'',''ok'')::text as data
		FROM (SELECT 
			    announcement_title,  
				announcement_description,
				created_datetime,        
				latitude ,               
				longitude 	,			
				address ,				
				announcement_datetime	,
				role_id 				
			    from tbl_web_announcement )data1;';  
		   raise notice 'announcement fetch all';	 
	END IF;
		
	RETURN QUERY EXECUTE sql_query;
		raise notice 'locha hai';
	EXCEPTION WHEN OTHERS 
	THEN
		DECLARE p_errormessage VARCHAR(4000);
		DECLARE p_errorstate VARCHAR(4000);
		DECLARE p_errorline VARCHAR(4000);

		BEGIN									
			p_errormessage:= SQLERRM;
			p_errorstate:= SQLSTATE;
			GET STACKED DIAGNOSTICS p_errorline = PG_EXCEPTION_CONTEXT;
				
			INSERT INTO tbl_error_log(error_name,error_callstack,error_method,created_on)		
			SELECT p_errorline,p_errormessage||':fn_web_crud_announcement_management',p_errorstate,timezone('Asia/Kolkata'::text, now());
			
			sql_query := 'SELECT json_build_object(''responseCode'',201,''data'',''failed'', ''responseMessage'', '''||p_errormessage||''')::text as data';
	END;
	RETURN QUERY EXECUTE sql_query;
END;
$BODY$;


-- 	select * from tbl_web_announcement
--  select fn_web_crud_announcement_management('{"flag":"create","announcement_title":"meeting2","announcement_description":"meeting2","announcement_datetime":"2222-02-02","latitude":"22.723228","longitude":"75.875230","address":"test","role_id":"2"}')
--  select fn_web_crud_announcement_management('{"flag":"update","announcement_id":"1","announcement_title":"meetingupdate","announcement_description":"meetingupd","announcement_datetime":"2222-02-02","latitude":"22.723228","longitude":"75.875230","address":"test","role_id":"2"}')
--  select fn_web_crud_announcement_management('{"flag":"fetch_id","announcement_id":"1"}')
--  select fn_web_crud_announcement_management('{"flag":"fetch"}')
--  select fn_web_crud_announcement_management('{"flag":"delete","announcement_id":"1"}')
✔all test done
	@ApiIgnore
	@RequestMapping(value = "/announcment_management", method = RequestMethod.POST)
	public ResponseEntity<?> getAnnouncementDetails(@RequestBody String json, HttpServletRequest request ) {
		try {
			String result = dashService.getAnnouncementDetails(json);
			return ResponseEntity.ok(result);
		} catch (Exception e) {
			e.printStackTrace();
			return ResponseEntity.ok(CustomMessages.getMessage(CustomMessages.RESPONSE_MESSAGE_500));
		}
------
	@ApiIgnore
	@RequestMapping(value = "/announcment_management", method = RequestMethod.POST)
	public ResponseEntity<?> getAnnouncementDetails(@RequestBody String json, HttpServletRequest request ) {
		try {
			String result = dashService.getAnnouncementDetails(json);
			return ResponseEntity.ok(result);
		} catch (Exception e) {
			e.printStackTrace();
			return ResponseEntity.ok(CustomMessages.getMessage(CustomMessages.RESPONSE_MESSAGE_500));
		}
	
	✔API CREATED 
========================================5-6--24
✔modified fetchid field


CREATE OR REPLACE FUNCTION public.fn_web_crud_announcement_management(
	userjson text)
    RETURNS TABLE(data text) 
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
    ROWS 1000

AS $BODY$
DECLARE
	_announcement_title text;
	_announcement_description text;
	_latitude double precision;
	_longitude double precision;
	_address text;
	_role_id integer;
	_announcement_datetime timestamp with time zone;
	_announcement_id int;
			
	sql_query text;
	userJsonObject JSON;
	_flag TEXT;
	_filter TEXT DEFAULT '';
	_CREATE_FLAG TEXT DEFAULT 'create';
	_DELETE_FLAG TEXT DEFAULT 'delete';
	_UPDATE_FLAG TEXT DEFAULT 'update';
	_FETCH_FLAG TEXT DEFAULT 'fetch';
	_FETCHID_FLAG TEXT DEFAULT 'fetch_id';

BEGIN
-- 	select * from tbl_web_announcement
--  select fn_web_crud_announcement_management('{"flag":"create","announcement_title":"meeting2","announcement_description":"meeting2","announcement_datetime":"2222-02-02","latitude":"22.723228","longitude":"75.875230","address":"test","role_id":"2"}')
--  select fn_web_crud_announcement_management('{"flag":"update","announcement_id":"1","announcement_title":"meetingupdate","announcement_description":"meetingupd","announcement_datetime":"2222-02-02","latitude":"22.723228","longitude":"75.875230","address":"test","role_id":"2"}')
--  select fn_web_crud_announcement_management('{"flag":"fetch_id","announcement_id":"1"}')
--  select fn_web_crud_announcement_management('{"flag":"fetch"}')
--  select fn_web_crud_announcement_management('{"flag":"delete","announcement_id":"1"}')

	raise notice '%',userjson;
	userJsonObject := cast(userjson AS JSON) ;
    
	_announcement_title := userJsonObject ->> 'announcement_title';
    RAISE NOTICE 'announcement_title: %', _announcement_title;

    _announcement_description := userJsonObject ->> 'announcement_description';
    RAISE NOTICE 'announcement_description: %', _announcement_description;

    _latitude := userJsonObject ->> 'latitude';
    RAISE NOTICE 'latitude: %', _latitude;

    _longitude := userJsonObject ->> 'longitude';
    RAISE NOTICE 'longitude: %', _longitude;

    _address := userJsonObject ->> 'address';
    RAISE NOTICE 'address: %', _address;

    _role_id := (userJsonObject ->> 'role_id')::INT;
    RAISE NOTICE 'role_id: %', _role_id;

    _announcement_datetime :=  to_timestamp(userJsonObject ->> 'announcement_datetime', 'YYYY-MM-DD');
    RAISE NOTICE 'announcement_datetime: %', _announcement_datetime;

    _flag := userJsonObject ->> 'flag';
    RAISE NOTICE 'flag: %', _flag;

    _announcement_id := (userJsonObject ->> 'announcement_id')::INT;
    RAISE NOTICE 'announcement_id: %', _announcement_id;
	
	IF (_flag = _CREATE_FLAG)-- insert
	THEN
	RAISE NOTICE 'ss';
	 	IF EXISTS (SELECT announcement_id FROM public.tbl_web_announcement WHERE (announcement_title = ''|| _announcement_title ||'' AND announcement_datetime = _announcement_datetime)  ) 
		THEN	
        	raise notice 'announcement for same date and title is already exists';
			sql_query :=  'SELECT json_build_object(''responseCode'',201,''responseMessage'',''announcement for same date and title is already exists.'')::text as data;';
		ELSE
		RAISE NOTICE 'ss _>';
			INSERT INTO public.tbl_web_announcement(
	         			announcement_title, announcement_description, announcement_datetime , latitude,  longitude,  address,  role_id, created_datetime)
	        VALUES (_announcement_title,   _announcement_description, _announcement_datetime ,_latitude, _longitude, _address, _role_id, now());
			sql_query := 'SELECT json_build_object(''responseCode'',200,''responseMessage'',''Announcement created successfully created successfully'')::text as data;';			
			raise notice 'announcement inserted';
		END IF;
	ELSEIF (_flag = _UPDATE_FLAG)
	THEN	
			IF EXISTS (SELECT announcement_id FROM public.tbl_web_announcement WHERE announcement_id = _announcement_id  )
			THEN
				UPDATE public.tbl_web_announcement
				SET announcement_title  = _announcement_title   	,         
				announcement_description= _announcement_description	,
                latitude                = _latitude					,
                longitude 				= _longitude				,
                address 				= _address					,
                announcement_datetime	= _announcement_datetime	,
                role_id 				= _role_id;

				sql_query := 'SELECT json_build_object(''responseCode'',200,''responseMessage'',''announcement updated successfully'')::text as data;';
				raise notice 'announcement updated';
			ELSE
			sql_query :=  'SELECT json_build_object(''responseCode'',201,''responseMessage'',''announcement is not available.'')::text as data;';
			raise notice 'announcement not updated';
			END IF;
	ELSEIF (_flag = _DELETE_FLAG)--delete
	THEN	
			IF EXISTS (SELECT announcement_id FROM public.tbl_web_announcement WHERE announcement_id = _announcement_id ) THEN
				DELETE FROM public.tbl_web_announcement 
				WHERE announcement_id = _announcement_id;
							sql_query :=  'SELECT json_build_object(''responseCode'',200,''responseMessage'',''announcement deleted successfully.'')::text as data;';
							raise notice 'announcement delete';
			ELSE
							sql_query :=  'SELECT json_build_object(''responseCode'',201,''responseMessage'',''announcement is not available.'')::text as data;';
							raise notice 'announcement noot updated';
			END IF;		
	ELSEIF (_flag = _FETCHID_FLAG) ---- FOR FETCH by id
	THEN
		sql_query := 'SELECT json_build_object(''responseCode'',200,''data'',COALESCE(to_json(array_agg(data1)), 
		''[]''),''responseMessage'',''ok'')::text as data
		FROM (
			SELECT  
			    announcement_title,  
				announcement_description,
				created_datetime,        
				latitude ,               
				longitude 	,			
				address ,				
				announcement_datetime	,
				role_id ,
				(SELECT role_name FROM tbl_web_role_master WHERE tbl_web_role_master.role_id = tbl_web_announcement.role_id) as role_name
			    from tbl_web_announcement  WHERE announcement_id ='''|| _announcement_id||'''
		     )data1;';
		raise notice 'announcement fetch by id';	 
			
	ELSEIF (_flag = _FETCH_FLAG) ---- FOR FETCH all data 
	THEN
		sql_query := 'SELECT json_build_object(''responseCode'',200,''data'',COALESCE(to_json(array_agg(data1)), 
		''[]''),''responseMessage'',''ok'')::text as data
		FROM (SELECT 
				announcement_id	,
			    announcement_title,  
				announcement_description,
				created_datetime,        
				latitude ,               
				longitude 	,			
				address ,				
				announcement_datetime	,
				role_id ,
				(SELECT role_name FROM tbl_web_role_master WHERE tbl_web_role_master.role_id = tbl_web_announcement.role_id) as role_name
			    from tbl_web_announcement )data1;';  
		   raise notice 'announcement fetch all';	 
	END IF;
		
	RETURN QUERY EXECUTE sql_query;
		raise notice 'locha hai';
	EXCEPTION WHEN OTHERS 
	THEN
		DECLARE p_errormessage VARCHAR(4000);
		DECLARE p_errorstate VARCHAR(4000);
		DECLARE p_errorline VARCHAR(4000);

		BEGIN									
			p_errormessage:= SQLERRM;
			p_errorstate:= SQLSTATE;
			GET STACKED DIAGNOSTICS p_errorline = PG_EXCEPTION_CONTEXT;
				
			INSERT INTO tbl_error_log(error_name,error_callstack,error_method,created_on)		
			SELECT p_errorline,p_errormessage||':fn_web_crud_announcement_management',p_errorstate,timezone('Asia/Kolkata'::text, now());
			
			sql_query := 'SELECT json_build_object(''responseCode'',201,''data'',''failed'', ''responseMessage'', '''||p_errormessage||''')::text as data';
	END;
	RETURN QUERY EXECUTE sql_query;
END;
$BODY$;



































=============================================================13/6/24
-- FUNCTION: public.fn_web_search_layer(text)

-- DROP FUNCTION public.fn_web_search_layer(text);

CREATE OR REPLACE FUNCTION public.fn_web_search_layer(
	userjson text)
    RETURNS TABLE(data text) 
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
    ROWS 1000

AS $BODY$
DECLARE
	_keyword text;
	_table_name text;
exists_flag BOOLEAN;
			
	sql_query text;
	userJsonObject JSON;
		--select * from public."metro_station_old" limit 10
BEGIN	-- select from fn_web_search_layer('{"keyword":"mint","table_name":"metro_station_old"}')
		-- SELECT * from tbl_parent_layer_master 
	-- 		-- SELECT * from tbl_web_layer_master 
		-- SELECT * from tbl_error_log order by created_on desc limit 10
		
-- 		SELECT json_build_object('responseCode', 200, 'data', COALESCE(to_json(array_agg(data1)), '[]'), 'responseMessage', 'ok')::text as data
--                            FROM (
--                                SELECT distinct ward,name,uid,layer,prabhag,height_m,zone,survey_status,geom FROM public.bridge_old WHERE name ILIKE  '%f%'
--                            ) data1;

	raise notice '%',userjson;
   	userJsonObject=jsonb_strip_nulls(CAST(userjson AS JSONB));
    RAISE NOTICE 'announcement_title: %', userJsonObject;
	_keyword := userJsonObject ->> 'keyword';
    RAISE NOTICE 'announcement_title: %', _keyword;
	_table_name:= userJsonObject ->> 'table_name';
    RAISE NOTICE 'announcement_title: %', _table_name;
	
	

    EXECUTE format('
        SELECT EXISTS (
            SELECT 1 FROM %I WHERE REPLACE(REPLACE(name, '' '', ''''), ''_'', '''') ILIKE %L
        )', _table_name, '%' || REPLACE(REPLACE(_keyword, ' ', ''), '_', '') || '%') INTO exists_flag;

 
    IF exists_flag THEN
        sql_query := format('
            SELECT json_build_object(
                ''responseCode'', 200, 
                ''data'', COALESCE(to_json(array_agg(data1)), ''[]''), 
                ''responseMessage'', ''ok''
            )::text as data
            FROM (
                SELECT DISTINCT 
                    gid,
                    name,
                    geom
                FROM %I
                WHERE REPLACE(REPLACE(name, '' '', ''''), ''_'', '''') ILIKE %L
            ) data1;', 
            _table_name, '%' || REPLACE(REPLACE(_keyword, ' ', ''), '_', '') || '%'
        );

        RAISE NOTICE 'Query: %', sql_query;
        RAISE NOTICE 'Rows exist in table % matching the keyword %.', _table_name, _keyword;
        RETURN QUERY EXECUTE sql_query;
    ELSE
        sql_query := '
            SELECT json_build_object(
                ''responseCode'', 201, 
                ''responseMessage'', ''layer name does not exist.''
            )::text as data;
        ';

        RAISE NOTICE 'No rows found in table % matching the keyword %.', _table_name, _keyword;
        RETURN QUERY EXECUTE sql_query;
    END IF;

	RAISE NOTICE 'qq-> %' , sql_query;
    -- Execute the query
  
    -- Execute the query

	EXCEPTION WHEN OTHERS 
	THEN
		DECLARE p_errormessage VARCHAR(4000);
		DECLARE p_errorstate VARCHAR(4000);
		DECLARE p_errorline VARCHAR(4000);

		BEGIN									
			p_errormessage:= SQLERRM;
			p_errorstate:= SQLSTATE;
			GET STACKED DIAGNOSTICS p_errorline = PG_EXCEPTION_CONTEXT;
				
			INSERT INTO tbl_error_log(error_name,error_callstack,error_method,created_on)		
			SELECT p_errorline,p_errormessage||':fn_web_search_layer',p_errorstate,timezone('Asia/Kolkata'::text, now());
			
			sql_query := 'SELECT json_build_object(''responseCode'',201,''data'',''failed'', ''responseMessage'', '''||p_errormessage||''')::text as data';
	END;
	RETURN QUERY EXECUTE sql_query;
END;
$BODY$;

ALTER FUNCTION public.fn_web_search_layer(text)
    OWNER TO postgres;

````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
		@ApiIgnore
	@RequestMapping(value = "/search_layer", method = RequestMethod.POST)
	public ResponseEntity<?> searchLayer(@RequestBody String json, HttpServletRequest request ) {
		try {
			String result = dashService.searchLayer(json);
			return ResponseEntity.ok(result);
		} catch (Exception e) {
			e.printStackTrace();
			return ResponseEntity.ok(CustomMessages.getMessage(CustomMessages.RESPONSE_MESSAGE_500));
		}
	}
````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
	@Override
	public String searchLayer(String json) {
		String result;
		try {
			result = jdbcTemplate.queryForObject(SPUtility.FN_WEB_SEARCH_LAYER, new Object[] { json },
					String.class);
			return result;
		} catch (Exception e) {
			LoggerUtil.setError(this.getClass(), "Error in getDrawFeatureData ");
			e.printStackTrace();
			return null;
		}
	}
✔seach api

________________________________________________________________________________________________________________________________________________________________________________
14/6/24

-- FUNCTION: public.fn_web_get_point_layer_data()

-- DROP FUNCTION public.fn_web_get_point_layer_data();

CREATE OR REPLACE FUNCTION public.fn_web_get_point_layer_data(
	)
    RETURNS TABLE(data text) 
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
    ROWS 1000

AS $BODY$
DECLARE-- SELECT fn_web_get_point_layer_data();
			-- SELECT * from public.tbl_web_layer_master
			-- SELECT * from tbl_error_log order by created_on desc limit 10
			-- select * from ward_boundary
			
		sql_query text;
		
	BEGIN
			

			raise notice 'cs%', sql_query;
			sql_query := 'SELECT json_build_object(''responseCode'', 200, ''data'', COALESCE(to_json(array_agg(data1)), ''[]''), ''responseMessage'', ''ok'')::text as data
             FROM (
                 SELECT
                     id,
                     layer_name,
                     table_name,
                     status,
                     service_url
                 FROM tbl_web_layer_master
                 WHERE status IS TRUE
                   AND geometry_type = ''Point''
                 ORDER BY layer_name
             ) data1;';

		    raise notice '%', sql_query;
		RETURN QUERY EXECUTE sql_query;							 
			EXCEPTION WHEN OTHERS 
			THEN
				DECLARE p_errormessage VARCHAR(4000);
				DECLARE p_errorstate VARCHAR(4000);
				DECLARE p_errorline VARCHAR(4000);

				BEGIN									
					p_errormessage:= SQLERRM;
					p_errorstate:= SQLSTATE;
					GET STACKED DIAGNOSTICS p_errorline = PG_EXCEPTION_CONTEXT;

					INSERT INTO public.tbl_error_log(error_name,error_callstack,error_method,created_on)		
					SELECT p_errorline,p_errormessage||':fn_web_get_point_layer_data',p_errorstate,timezone('Asia/Kolkata'::text, now());

				END;
				sql_query := 'SELECT json_build_object(''responseCode'',201,''responseMessage'',''failed'')::text as data';
				RETURN QUERY EXECUTE sql_query;
	END;
$BODY$;

ALTER FUNCTION public.fn_web_get_point_layer_data()
    OWNER TO postgres;
`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
	@ApiIgnore
	@RequestMapping(value = "/get_point_layers", method = RequestMethod.GET)
	public ResponseEntity<?> getPointLayer( HttpServletRequest request ) {
		try {
			String result = dashService.getPointLayer();
			return ResponseEntity.ok(result);
		} catch (Exception e) {
			e.printStackTrace();
			return ResponseEntity.ok(CustomMessages.getMessage(CustomMessages.RESPONSE_MESSAGE_500));
		}
	}
```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
	@Override
	public String getPointLayer( ) {
		String result;
		try {
			result = jdbcTemplate.queryForObject(SPUtility.FN_WEB_GET_POINT_LAYER, new Object[] {  },
					String.class);
			return result;
		} catch (Exception e) {
			LoggerUtil.setError(this.getClass(), "Error in getDrawFeatureData ");
			e.printStackTrace();
			return null;
		}
	}
	


✔get point layer api done



































________________________________________________________________________________________________________________________________________________________________________________
<div style="display:flex; justify-content: start;">
  <kendo-dropdownlist rounded="full"
  [data]="listItems"
  [(ngModel)]="selectedValue" 
>select</kendo-dropdownlist>
<div ></div>
<kendo-autocomplete #autocomplete [data]="searchResultNames"  (change)="onsearchchange($event)">
</kendo-autocomplete>

</div>
✔added kendo auto complete search bar

```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
 getSearchResultNames(): any[] {
    return this.searchResult.map(result => result.name);
  }
  onsearchchange(event: any) {
    const searchKeyword = event.target.value;
     this.searchResultNames = []; 
    if (searchKeyword !== '') {
      this.searchResult = []; 
     
      this.loading = true;
  
      console.log(this.layerData);
      this.layerData.forEach(element => {
        if (element.layer_name === this.selectedValue) {
          
            
            const formData = {
              "keyword":searchKeyword,
              "table_name": element.table_name
            };
            console.log('formdata',formData)
            this.commonService.searchChildlayer(JSON.stringify(formData)).subscribe(
              (data: any) => {
               
                if (data.responseCode === 200) {
                  const result = data.data;
                  result.forEach(row=> {
                    console.log("row",row);
                    this.searchResult.push({name:row.name,geom:row.geom});
                    console.log("search array",this.searchResult);
                    this.searchResultNames.push(row.name);
                  });
                 
                }
                this.loading = false; // Reset loading state
              },
              (error) => {
                console.error("API Error:", error);
                this.toastr.error('Something went wrong while fetching roles.');
                this.loading = false; // Reset loading state
              }
            );
         
      
        }
      });
      console.log(this.searchResult);
    }

✔integrated ui with api

🤔issue with getting data and loading into search bar -exploring alternatives

__________________________________________________________________________________________________________________________________________________________________________________________________________

18/6/24
// angular import
import { Component, OnInit } from '@angular/core';

// project import
import { SharedModule } from 'src/app/theme/shared/shared.module';
import { MapController } from '../utils/mapController';
import { DropDownsModule } from "@progress/kendo-angular-dropdowns";
import { InputsModule } from "@progress/kendo-angular-inputs";

import * as Cesium from 'cesium';
import { CommonsService } from 'src/app/services/commons.service';
import { ToastrService } from 'ngx-toastr';

declare const AmCharts: any;

@Component({
  selector: 'app-dashboard',
  standalone: true,
  imports: [SharedModule, DropDownsModule, InputsModule],
  templateUrl: './dashboard.component.html',
  styleUrls: ['./dashboard.component.scss'],
  providers: [MapController]
})
export default class DashboardComponent implements OnInit {
  foods = { "values": [1, 2, 3, 4] };
  //public mapConroller: any;
  public viewer: any;
  selectedValue: any;
  public listItems:Array<string> [];
  searchList: Array<string> = [];
  currentLayerName: any;
  layerData: any;
  searchResult: { name: any, geom: any }[] = [];
  loading: boolean;
  searchResultNames: any[] = [];
  layerName: any;
  constructor(private mapConroller: MapController, private commonService: CommonsService, private toastr: ToastrService) {
    //this.mapConroller = mapConroller1;
  }

  ngOnInit() {
    this.mapConroller.initMap();

    this.mapConroller.temp_data_new();
    this.loadDropdown();
  }
  loadDropdown() {
    this.commonService.getLayerData().subscribe(
      (data: any) => {
        console.log("load layers", data);
        if (data.responseCode === 200) {
          this.layerData = data.data;
          this.listItems = this.layerData.map(element => element.layer_name);
          console.log('Loaded layer names:', this.listItems);
        } else {
          console.error("Error fetching layers:", data.responseMessage);
          this.toastr.error('Error fetching layers');
        }
      },
      (error) => {
        console.error("API Error:", error);
        this.toastr.error('Something went wrong while fetching layers.');
      }
    );
  }
  
  onselect(parentlayer) {

    if (parentlayer!='') {
console.log(this.selectedValue);

    }
  }
  getSearchResultNames(): any[] {
    return this.searchResult.map(result => result.name);
  }
  onsearchchange(event: any) {
    const searchKeyword = event.target.value;
     this.searchResultNames = []; 
    if (searchKeyword !== '') {
      this.searchResult = []; 
     
      this.loading = true;
  
      console.log(this.layerData);
      this.layerData.forEach(element => {
        if (element.layer_name === this.selectedValue) {
          
            
            const formData = {
              "keyword":searchKeyword,
              "table_name": element.table_name
            };
            console.log('formdata',formData)
            this.commonService.searchChildlayer(JSON.stringify(formData)).subscribe(
              (data: any) => {
               
                if (data.responseCode === 200) {
                  const result = data.data;
                  result.forEach(row=> {
                    console.log("row",row);
                    this.searchResult.push({name:row.name,geom:row.geom});
                    console.log("search array",this.searchResult);
                    this.searchResultNames.push(row.name);
                  });
                 
                }
                this.loading = false; // Reset loading state
              },
              (error) => {
                console.error("API Error:", error);
                this.toastr.error('Something went wrong while fetching roles.');
                this.loading = false; // Reset loading state
              }
            );
         
      
        }
      });
      console.log(this.searchResult);
    }



  }
}

```````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
<div style="display:flex; justify-content: start;">
  


  <kendo-dropdownlist rounded="full"
  [data]="listItems"
  [(ngModel)]="selectedValue" 
>select</kendo-dropdownlist>

<kendo-autocomplete
  #autocomplete
  [data]="searchResultNames"
  (filterChange)="onSearchInputChange($event)"
  [filterable]="true"

  (valueChange)="onValueChange($event)"
  [(value)]="selectedOption"
 
></kendo-autocomplete>
</div>


<div id="cesiumContainer"></div>

++++// angular import
import { Component, OnInit, ViewChild, OnDestroy } from '@angular/core';

// project import
import { SharedModule } from 'src/app/theme/shared/shared.module';
import { MapController } from '../utils/mapController';
import { DropDownsModule } from "@progress/kendo-angular-dropdowns";
import { InputsModule } from "@progress/kendo-angular-inputs";

import * as Cesium from 'cesium';
import { CommonsService } from 'src/app/services/commons.service';
import { ToastrService } from 'ngx-toastr';
import { debounceTime, distinctUntilChanged, switchMap, tap } from 'rxjs/operators';
import { AutoCompleteComponent } from '@progress/kendo-angular-dropdowns';
import { Subject, forkJoin, of } from 'rxjs';
import {  Subscription } from 'rxjs';

declare const AmCharts: any;

@Component({
  selector: 'app-dashboard',
  standalone: true,
  imports: [SharedModule, DropDownsModule, InputsModule],
  templateUrl: './dashboard.component.html',
  styleUrls: ['./dashboard.component.scss'],
  providers: [MapController]
})
export default class DashboardComponent implements OnInit, OnDestroy {
  foods = { "values": [1, 2, 3, 4] };
  //public mapConroller: any;
  public viewer: any;
  selectedValue: any;
  public listItems: Array<string> = [];
  searchList: Array<string> = [];
  currentLayerName: any;
  layerData: any;
  searchResult: { name: any, geom: any }[] = [];
  loading: boolean;
  searchResultNames: any[] = [];
  layerName: any;
  
  // searchInput = new Subject<string>();
  private searchInput = new Subject<any>()
  subscription: Subscription = this.searchInput.pipe(debounceTime(1200), distinctUntilChanged(), tap(value => console.log("debounced value: " + value))).subscribe();
  @ViewChild('autocomplete', { static: true }) autocomplete: AutoCompleteComponent;
  selectedGeom: any;
  selectedName: any;
  selectedOption:any;
  
  constructor(
    private mapController: MapController, 
    private commonService: CommonsService, 
    private toastr: ToastrService
  ) {
    
  }

  ngOnInit() {
    this.mapController.initMap();
    this.mapController.temp_data_new();
    this.loadDropdown();
    this.searchInput.pipe(
      debounceTime(300),
      distinctUntilChanged(),
      switchMap((searchTerm: string) => of(this.performSearch(searchTerm)))
    ).subscribe();
  }
  
  ngOnDestroy() {
    this.searchInput.complete();
  }
  
  loadDropdown() {
    this.commonService.getLayerData().subscribe(
      (data: any) => {
        console.log("load layers", data);
        if (data.responseCode === 200) {
          this.layerData = data.data;
          this.listItems = this.layerData.map(element => element.layer_name);
          console.log('Loaded layer names:', this.listItems);
        } else {
          console.error("Error fetching layers:", data.responseMessage);
          this.toastr.error('Error fetching layers');
        }
      },
      (error) => {
        console.error("API Error:", error);
        this.toastr.error('Something went wrong while fetching layers.');
      }
    );
  }
  
  onSearchInputChange(eventValue: any) {
    
    this.searchInput.next(eventValue)

    console.log("logging search value", eventValue);
    console.log("selectedOption", this.selectedOption);

    this.performSearch(eventValue);
 
    
  }
  onValueChange(event: string) {
    const selectedItem = this.searchResult.find(item => item.name === event);
    if (selectedItem) {
      this.selectedValue = selectedItem;
      alert(`Selected: ${selectedItem.name}`);
    }
  }
  onSelectionChange() {
    // alert(this.selectedOption);
    // const selectedItem = this.searchResult.find(item => item.name === event);
    // if (selectedItem) {
    //   this.selectedValue = selectedItem;
    // }
  }

  performSearch(searchTerm: string) {
    const matchingLayers = this.layerData.filter(element => element.layer_name === this.selectedValue);
    this.searchResult = [];
    this.searchResultNames = [];
    this.loading = true; 
    const searchObservables = matchingLayers.map(element => {
      const formData = {
        keyword: searchTerm,
        table_name: element.table_name
      };
      return this.commonService.searchChildlayer(JSON.stringify(formData));
    });
    // ForkJoin to wait for all observables to complete
    forkJoin(searchObservables).subscribe(
      (results: any[]) => {
        results.forEach(data => {
          if (data.responseCode === 200) {
            const result = data.data;
            console.log('search result',result)
            result.forEach(row => {
              this.searchResult.push({ name: row.name, geom: row.geom });
              console.log('searchResult result',this.searchResult)
              this.searchResultNames.push(row.name);

              console.log('searchResultNames result', this.searchResultNames)
            });
          } else {
            console.error("API Error:", data); // Log API error
            this.toastr.error('name not found');
          }
        });
        this.loading = false; // Reset loading state
      },
      error => {
        console.error("API Error:", error);
        this.toastr.error('Something went wrong while fetching data.');
        this.loading = false; // Reset loading state
      }
    );
  }

  
}
✔debouncing done




































____________________________________________________________________________________________________________________________________________________________________________________
19/6/24

moving search from dashboard


<!-- <div appCesium></div> -->
<div style="display:flex; justify-content: start;">
  


  <kendo-dropdownlist rounded="full"
  [data]="listItems"
  [(ngModel)]="selectedValue" 
>select</kendo-dropdownlist>

<kendo-autocomplete
  #autocomplete
  [data]="searchResultNames"
  (filterChange)="onSearchInputChange($event)"
  [filterable]="true"

  (valueChange)="onValueChange($event)"
  [(value)]="selectedOption"
 
></kendo-autocomplete>
</div>
<div id="map"></div>

<div class="SubCursorBar">
  <div class="content">
    <div class="DisabledContent" is-disabled="false">
      <div class="CursorBarControl" is-disabled="false" is-selected="true" title="Pan">
        
        <mat-button-toggle-group name="ingredients" aria-label="Ingredients">
          <mat-button-toggle (click)="gotoFtn()"  title="Go-To"><i class="fas fa-map-marker-alt fa-2x"></i></mat-button-toggle>
          <mat-button-toggle (click)="addLineStringMeasurement()"  title="LineString"><mat-icon>timeline</mat-icon></mat-button-toggle>
          <mat-button-toggle (click)="addPolygonMeasurement()" title="Polygon" ><i class="fas fa-draw-polygon fa-2x"></i></mat-button-toggle>
            <mat-button-toggle (click)="featureInfo()" title="Info"><mat-icon>info</mat-icon></mat-button-toggle>
            <mat-button-toggle title="Take Screenshot" (click)="takeSS()"><i class="fas fa-camera-retro fa-2x"></i></mat-button-toggle>
            <mat-button-toggle (click)="clearDrawnFeature()" title="Erase"><i class="fas fa-eraser fa-2x"></i></mat-button-toggle>
       
        </mat-button-toggle-group>
      </div>
    </div>
    </div>
</div>

<button type="button" (click)="togglePanel()">Layer</button>
<div class="row" [@widthGrow]="state">
  <div class="col-sm-12">

    <div class="layer-popup resize-popup" id="layers">
      <div class="layers" id="layersheader">
        <div class="layer-title-main w-100 align-items-center">
          <h3 class="layer-title me-auto">
            <label id="total_layer_cnt" style="color: aliceblue;" data-translate="_layer_popup">Layer</label>
          </h3> 

          <a class="layer-close side-layer-resize ms-2 me-2" href="javascript:void(0);">
            <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1"
              id="Layer_1" x="0px" y="0px" width="16" height="16" viewBox="0 0 50 50" enable-background="new 0 0 50 50"
              xml:space="preserve">
              <g>
                <g>

                  <polyline fill-rule="evenodd" clip-rule="evenodd" fill="none" stroke="#FFFFFF" stroke-width="3.5"
                    stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="22.9256"
                    points="    47.5,1.832 22.191,27.15 22.191,16.419   " />

                  <line fill-rule="evenodd" clip-rule="evenodd" fill="none" stroke="#FFFFFF" stroke-width="3.5"
                    stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="22.9256" x1="22.191" y1="27.15"
                    x2="32.919" y2="27.15" />
                </g>

                <polyline fill-rule="evenodd" clip-rule="evenodd" fill="none" stroke="#FFFFFF" stroke-width="3.5"
                  stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="22.9256"
                  points="   44.878,18.451 44.878,48.168 2.5,48.168 2.5,5.802 31.722,5.802  " />
              </g>
            </svg>
          </a>

        </div>
        <div class="layer-content" id="layer_master">
          <div class="accordion" id="accordionExample">
            <div *ngFor="let parentLayer of data.data">
              <div class='accordion-item'>
                <h2 class='accordion-header'>
                  <button class='accordion-button collapsed' type='button'
                    (click)="toggleCollapse(parentLayer.parent_layer_id)">
                    {{ parentLayer.parent_layer_name }}
                  </button>
                </h2>
                <div [id]="'panelsStayOpen-collapse' + parentLayer.parent_layer_id" class='accordion-collapse collapse'>
                  <div class='accordion-body'>
                    <div *ngFor="let childLayer of parentLayer.child_layer">
                      <div class="form-check">
                        <input class="form-check-input" name="child_layer_name" (change)="showHideData($event)"
                        [attr.layer_id]="childLayer.layer_id"
                          [attr.mobile_service_url]="childLayer.mobile_service_url"
                          [attr.parent_layer]="childLayer.parent_layer" [attr.defination]="childLayer.defination"
                          [attr.layer_name]="childLayer.layer_name"
                          [attr.combined_service]="childLayer.is_combined_service"
                          [attr.service-url]="childLayer.service_url" [attr.dataid]="childLayer.geometry_type"
                          data-id="Image" type="checkbox" [attr.value]="childLayer.layer_id"
                          [attr.Id]="'flexCheckDefault' + childLayer.layer_id"
                          [attr.layer_name]="childLayer.layer_name">
                        <label class="form-check-label">{{ childLayer.layer_name }}</label>
                      </div>
                    </div>  
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

      </div>
    </div>

  </div>
</div>

=================================================
import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';
import { SharedModule } from 'src/app/theme/shared/shared.module';
import { RouterOutlet } from '@angular/router';
import { CommonModule } from '@angular/common'; import { NgModule } from '@angular/core';
import { trigger, transition, style, animate, state } from '@angular/animations';
import * as glob from '../../../environments/environment';
import { HttpHeaders, HttpClient } from '@angular/common/http';
import { CommonsService } from 'src/app/services/commons.service';
import { MatButtonToggleModule } from '@angular/material/button-toggle';
import { MatIconModule } from '@angular/material/icon';
import axios from 'axios';
import html2canvas from 'html2canvas';
// search 
import { ToastrService } from 'ngx-toastr';
import { debounceTime, distinctUntilChanged, switchMap, tap } from 'rxjs/operators';
import { AutoCompleteComponent } from '@progress/kendo-angular-dropdowns';
import { Subject, forkJoin, of } from 'rxjs';
import {  Subscription } from 'rxjs';
import { DropDownsModule } from "@progress/kendo-angular-dropdowns";
import { InputsModule } from "@progress/kendo-angular-inputs";


@Component({
  selector: 'app-map',
  standalone: true,
  imports: [SharedModule, MatButtonToggleModule, MatIconModule,SharedModule, DropDownsModule, InputsModule],
  templateUrl: './2d.component.html',
  styleUrls: ['./2d.component.scss'],
  animations: [
    trigger('widthGrow', [
      state('closed', style({
        height: 0,
      })),
      state('open', style({
        height: 500
      })),
      transition('* => *', animate(900))
    ]),
  ]
})

export default class _2D {
  
  data: any;
  ol: any = window['ol'];
  state = "closed";
  osm: any;
  map: any;
  table_name: any
  mobile_service_url: any
  current_layer: any;
  layer_id: any
  Measuredraw: any = null;
  GoToVectorLayer: any = null;
  location_mark : any;
  view: any;
  clickHandler: any;

  curr_layer_source_arr: any[] = [];
  curr_layer_source: any =  null;
  goto_click = false;
  info_click = false;

  projection = this.ol.proj.get('EPSG:3857');
  projectionExtent = this.projection.getExtent();
  size = this.ol.extent.getWidth(this.projectionExtent) / 256;
  resolutions = new Array(25);
  matrixIds = new Array(25);
  map_layers: any[] = [];
  vector_arr: any[] = [];
  drawsource: any;

  drawvector: any;
  // search
  selectedValue: any;
  public listItems: Array<string> = [];
  searchList: Array<string> = [];
  currentLayerName: any;
  layerData: any;
  searchResult: { name: any, geom: any }[] = [];
  loading: boolean;
  searchResultNames: any[] = [];
  layerName: any;
  
 


  container: any = document.getElementById('popup') as HTMLElement;
  content: any = document.getElementById('popup-content') as HTMLElement;
  closer: any = document.getElementById('popup-closer') as HTMLElement;
  calculated_measurement: any = "";

  overlay = new this.ol.Overlay({
    element: this.container,
    autoPan: {
      animation: {
        duration: 250,
      },
    },
  });

  gridarr: any[] = [];
  gridInfoKeys: any;

   // searchInput = new Subject<string>();
   private searchInput = new Subject<any>()
   subscription: Subscription = this.searchInput.pipe(debounceTime(1200), distinctUntilChanged(), tap(value => console.log("debounced value: " + value))).subscribe();
   @ViewChild('autocomplete', { static: true }) autocomplete: AutoCompleteComponent;
   selectedGeom: any;
   selectedName: any;
   selectedOption:any;
 
   source = new this.ol.source.Vector();
 
   vector = new this.ol.layer.Vector({
     source: this.source,
     style: new this.ol.style.Style({        
       stroke: new this.ol.style.Stroke({
         color: '#0e97fa',
         width:4
       })
     })
   });

  private baseUrl1 = glob.environment.baseUrl;
  constructor(private http: HttpClient, private commonService: CommonsService,  private toastr: ToastrService) {

   }

  ngOnInit(): void {

    this.get_layer_panel_data("2D", "");

    this.osm = new this.ol.layer.Tile({
      source: new this.ol.source.OSM()
    });

    this.view = new this.ol.View({
      projection: 'EPSG:3857',
      center: this.ol.proj.fromLonLat([72.893189, 19.076986]),
      zoom: 12,
    });

    this.map = new this.ol.Map({
      layers: [this.osm],
      target: 'map',
      view: this.view
    });

    this.map.addLayer(this.vector);		

    for (let z = 0; z < 25; ++z) {
      this.resolutions[z] = this.size / Math.pow(2, z);
      this.matrixIds[z] = z;
    }
    this.map.addOverlay(this.overlay);
    //this.map.addLayer(this.drawvector);
// search
this.loadDropdown();
this.searchInput.pipe(
  debounceTime(300),
  distinctUntilChanged(),
  switchMap((searchTerm: string) => of(this.performSearch(searchTerm)))
).subscribe();

  }
  ngOnDestroy() {
    this.searchInput.complete();
  }


  toggleCollapse(parentLayerId: number) {
    const collapseId = 'panelsStayOpen-collapse' + parentLayerId;
    const collapseElement = document.getElementById(collapseId);
    if (collapseElement) {
      collapseElement.classList.toggle('show');
    }
  }

  togglePanel() {
    (this.state == "closed") ? this.state = "open" : this.state = "closed";
  }


  get_layer_panel_data(pageName, stateId) {
    this.data = [];
    var formData = {
      flag: "fetch_all",
      layer_type: "2D"
    }


    this.commonService.getLayerAndImagePanel(formData).subscribe((data: any) => {
      this.data = data;
      console.log(this.data);
    });


  }
  url: any;
  layer_name: any;
  all_layer = new Array();

  showHideData(event) {
    this.url = event.target.getAttribute("service-url");
    this.layer_name = event.target.getAttribute("layer_name");
    this.layer_id = event.target.getAttribute("layer_id");

    const flag_status =           event.target.getAttribute("dataid");
    const service_url =           event.target.getAttribute("service-url");
    const mobile_service_url =    event.target.getAttribute("mobile_service_url");
    const is_combined_service =   event.target.getAttribute("combined_service");
    const is_info_popup =         event.target.getAttribute("is_info_popup");
    const is_attribute_info =     event.target.getAttribute("is_attribute_info");
    const layer_name =            event.target.getAttribute("layer_name");
    const defination =            event.target.getAttribute("defination");
    const parent_layer =          event.target.getAttribute("parent_layer");
    const table_name =            event.target.getAttribute("value");


    if (event.target.checked == true) {


      let curr_layer_source = new this.ol.source.TileWMS({
        url: service_url,
                    params: { 'LAYERS': "MIDC:" + table_name , 'TILED': true },
                    serverType: 'geoserver',
                    transition: 0, 
        })
      
      this.curr_layer_source_arr.push(curr_layer_source);
      
      let current_layer:any = new this.ol.layer.Tile({
        source: curr_layer_source
      })

            this.map.addLayer(current_layer);
            this.map_layers[table_name] = current_layer;


    }
    else {

      this.map.removeLayer(this.map_layers[table_name]);
      if (this.all_layer.includes(this.layer_name)) {
        delete this.all_layer[this.layer_id];
      }
    }
  }


  /** GOTO STARTS */


  gotoFtn() {

    if (this.GoToVectorLayer != null) {
      this.map.removeLayer(this.GoToVectorLayer);
    }


    if(this.goto_click == true){
      this.goto_click = false;
    }
    else{
      this.goto_click = true;
    }
    
    this.info_click = false;

    this.clickHandler = (evt) => {



      if (!this.goto_click) {
        return;
      }
      else {
        if (this.GoToVectorLayer != null) {
          this.map.removeLayer(this.GoToVectorLayer);
        }

        console.info(evt.pixel);
        console.info(this.map.getPixelFromCoordinate(evt.coordinate));
        console.info(this.ol.proj.fromLonLat(evt.coordinate));

        var know_your_coordinate = this.ol.proj.fromLonLat(evt.coordinate, 'EPSG:4326', 'EPSG:3857');

        console.log(know_your_coordinate);
        const iconFeature = new this.ol.Feature({
          geometry: new this.ol.geom.Point(know_your_coordinate)
        });

        const vectorSource = new this.ol.source.Vector({
          features: [iconFeature],
        });

        this.GoToVectorLayer = new this.ol.layer.Vector({
          source: vectorSource,
          //style: location_mark,
        });
        this.map.addLayer(this.GoToVectorLayer);


        this.view.animate({
          projection: 'EPSG: 4326',
          center: [know_your_coordinate[0], know_your_coordinate[1]],
          duration: 2000,
          zoom: 20
        });
      }

    }

    this.map.on('click', this.clickHandler);

  }

  /** INFO STARTS */

  featureInfo() {

    this.info_click = true;
    this.goto_click = false;

    if (!this.info_click) {
      return;
    }
    else {



      this.clickHandler = (evt) => {

        var clickedFeatures = [];
        this.map.forEachFeatureAtPixel(evt.pixel, function (feature) {
          clickedFeatures.push(feature);
        });

        for (let k = 0; k < this.curr_layer_source_arr.length; k++) {
          const viewResolution = /** @type {number} */ (this.view.getResolution());
          const url = this.curr_layer_source_arr[k].getFeatureInfoUrl(evt.coordinate, viewResolution, 'EPSG:3857', { 'INFO_FORMAT': 'application/json' });
          if (url) {

            axios.get(url)
              .then(response => {

                if(response.data.features[0].properties != null || response.data.features[0].properties != ""){

                  this.gridInfoKeys = Object.keys(response.data.features[0].properties);


                    this.gridarr = response.data.features[0].properties;

                }

                var id = document.querySelectorAll('#tbl_info');
                id.forEach(e => e.remove());

                var content = '<table id="property_tbl" class="table table-striped ng-tns-c3968409143-0" style="display: block;"><tbody _ngcontent-ng-c3968409143="" class="ng-tns-c3968409143-0">';

                for (var i = 0; i < this.gridInfoKeys.length; i++) {

                  if (this.gridInfoKeys[i] != 'orientation') {
                    
                    this.gridInfoKeys[i].replace("/_/g" , " ");

                    content += '<tr><th>' + this.gridInfoKeys[i] + '</th>' + '<td>' + this.gridarr[this.gridInfoKeys[i]] + '</td></tr>';
                    
                  }

                }

                this.addPropertyInfoPopup(content , evt.coordinate);

                console.log(response);
              })
              .catch(error => {

                console.error(error);
              });
          }
        }

      }
    }

    this.map.on('click', this.clickHandler);

  }


  /** INFO ENDS */


  takeSS(){

    var captureElement: any = document.querySelector("#map");

    html2canvas(captureElement , {allowTaint: false, useCORS: true,}).then((canvas) => {
   
      const imageData = canvas.toDataURL("image/png");

      const link = document.createElement("a");
      link.setAttribute("download", "Map.png");
      link.setAttribute("href", imageData);
      link.click();
    });
  
  }

  /** GOTO ENDS */

  addDrawInteraction(geometryType) {   

    this.drawsource = new this.ol.source.Vector({ wrapX: false });

    this.drawvector = new this.ol.layer.Vector({
      source: this.drawsource,
      style: new this.ol.style.Style({        
        stroke: new this.ol.style.Stroke({
          color: '#0e97fa',
          width:4
        })
      })
    });


    this.Measuredraw = new this.ol.interaction.Draw({
      source: this.drawsource,
      //type: geometryType,
      type: /** @type {ol.geom.GeometryType} */ (geometryType)
    });
    this.map.addInteraction(this.Measuredraw);
    this.map.addLayer(this.drawvector);
    
    this.vector_arr.push(this.drawvector);
    var measurementFormatted;
    this.Measuredraw.on('drawstart', function (event) {
      

      event.feature.on('change', function (event) {
        var measurement = geometryType === 'Polygon' ? event.target.getGeometry().getArea() : event.target.getGeometry().getLength();

        measurementFormatted = measurement > 1000 ? (measurement / 1000).toFixed(2) + 'km' : measurement.toFixed(2) + 'm';

        console.log(measurementFormatted);

      });
    });

    this.Measuredraw.on('drawend', (event) => {
      const geometry = event.feature.getGeometry();
      const coordinate = geometry.getLastCoordinate();

      if (measurementFormatted) {
        this.addPopupOverlay(measurementFormatted, coordinate);
      }

    });
  }

  clearDrawnFeature(){

    if (this.Measuredraw != null) {
      this.map.removeInteraction(this.Measuredraw);
      this.Measuredraw = null; 
    }
  
    var id = document.querySelectorAll('#ol-popup');
    id.forEach(e => e.remove());

    var id = document.querySelectorAll('#tbl_info');
    id.forEach(e => e.remove());
   
    console.log(this.vector_arr);

    for (var i = 0; i < this.vector_arr.length; i++) {      
      this.map.removeLayer(this.vector_arr[i]); 
    }
  

    this.vector_arr = [];
  
    this.map.removeLayer(this.GoToVectorLayer);

  }

  addPopupOverlay(content: string, coordinate: any): void {
    
    const popupElement = document.createElement('div');
    popupElement.id = 'ol-popup';
    popupElement.innerHTML = content;

    const popupOverlay = new this.ol.Overlay({
      element: popupElement,
      position: coordinate,
      positioning: 'bottom-center',
      stopEvent: true,
    });

    this.map.addOverlay(popupOverlay);

    document.getElementById('ol-popup').setAttribute('style' , 'background-color: white;    border-radius: 10px;     border: 1px solid black;      padding: 5px 10px !important;')

  }
  
  addLineStringMeasurement(): void {
    if(this.Measuredraw != null){
      this.map.removeInteraction(this.Measuredraw);
    }
    
    this.addDrawInteraction('LineString');
  }

  addPolygonMeasurement(): void {
   
    if(this.Measuredraw != null){
      this.map.removeInteraction(this.Measuredraw);
    }
    this.addDrawInteraction('Polygon');
  }

  addPropertyInfoPopup(content , coordinate){

    const popupElement = document.createElement('div');
    popupElement.id = 'tbl_info';
    popupElement.innerHTML = content;

    const popupOverlay = new this.ol.Overlay({
      element: popupElement,
      position: coordinate,
      positioning: 'bottom-center',
      stopEvent: true,
    });

    this.map.addOverlay(popupOverlay);


    document.getElementById('tbl_info').setAttribute('style' , 'background-color: white;    border-radius: 10px;     border: 1px solid black;      padding: 5px 10px !important;');


  }
  // search
  loadDropdown() {
    this.commonService.getLayerData().subscribe(
      (data: any) => {
        console.log("load layers", data);
        if (data.responseCode === 200) {
          this.layerData = data.data;
          this.listItems = this.layerData.map(element => element.layer_name);
          console.log('Loaded layer names:', this.listItems);
        } else {
          console.error("Error fetching layers:", data.responseMessage);
          this.toastr.error('Error fetching layers');
        }
      },
      (error) => {
        console.error("API Error:", error);
        this.toastr.error('Something went wrong while fetching layers.');
      }
    );
  }
  
  onSearchInputChange(eventValue: any) {
    
    this.searchInput.next(eventValue)

    console.log("logging search value", eventValue);
    console.log("selectedOption", this.selectedOption);

    this.performSearch(eventValue);
 
    
  }
  onValueChange(event: string) {
    const selectedItem = this.searchResult.find(item => item.name === event);
    if (selectedItem) {
      this.selectedValue = selectedItem;
      this.selectedName=this.selectedValue.name;
      this.selectedGeom=this.selectedValue.geom;
      alert(`Selected: ${selectedItem.name}`);
    }
  }
  onSelectionChange() {
    // alert(this.selectedOption);
    // const selectedItem = this.searchResult.find(item => item.name === event);
    // if (selectedItem) {
    //   this.selectedValue = selectedItem;
    // }
  }

  performSearch(searchTerm: string) {
    const matchingLayers = this.layerData.filter(element => element.layer_name === this.selectedValue);
    this.searchResult = [];
    this.searchResultNames = [];
    this.loading = true; 
    const searchObservables = matchingLayers.map(element => {
      const formData = {
        keyword: searchTerm,
        table_name: element.table_name
      };
      return this.commonService.searchChildlayer(JSON.stringify(formData));
    });
    // ForkJoin to wait for all observables to complete
    forkJoin(searchObservables).subscribe(
      (results: any[]) => {
        results.forEach(data => {
          if (data.responseCode === 200) {
            const result = data.data;
            console.log('search result',result)
            result.forEach(row => {
              this.searchResult.push({ name: row.name, geom: row.geom });
              console.log('searchResult result',this.searchResult)
              this.searchResultNames.push(row.name);

              console.log('searchResultNames result', this.searchResultNames)
            });
          } else {
            console.error("API Error:", data); // Log API error
            this.toastr.error('name not found');
          }
        });
        this.loading = false; // Reset loading state
      },
      error => {
        console.error("API Error:", error);
        this.toastr.error('Something went wrong while fetching data.');
        this.loading = false; // Reset loading state
      }
    );
  }


}
✔ search working good.
✔getting name and geom on selecting name

====================================
CREATE OR REPLACE FUNCTION public.get_coords(input_geom geometry)
    RETURNS text 
    LANGUAGE plpgsql
AS $$
DECLARE
    result_json text;
	--select get_coords
BEGIN
    SELECT 
        json_build_object(
            'responseCode', 200,
            'data', COALESCE(to_json(array_agg(data1)), '[]'),
            'responseMessage', 'ok'
        )::text
    INTO
        result_json
    FROM (
        SELECT 
            ST_X(ST_Transform(ST_Centroid((ST_Dump(input_geom)).geom), 4326))::numeric AS long,
            ST_Y(ST_Transform(ST_Centroid((ST_Dump(input_geom)).geom), 4326))::numeric AS lat
    ) AS data1;

    RETURN result_json;
END;
$$;
✔get coords

@Override
	public String registerNewUser(String json) {
		String result = "";
		try {
			result = jdbcTemplate.queryForObject(SPUtility.FN_WEB_CRUD_USER_MANAGEMENT, new Object[] { json },
					String.class);
			if (result != null && !result.isEmpty()) {
				return result;
			} else {
				return null;
			}
		} catch (Exception e) {
			LoggerUtil.setError(this.getClass(), "Error in UserDaoImpl ::  removeUserToken()");
			e.printStackTrace();
		}
		return null;
	}

	@ApiOperation(value = "User Login API which validates the and authenticates valid users through web")
	@RequestMapping(value = "/weblogin", method = RequestMethod.POST, produces = "application/json", consumes = "application/json")
	public ResponseEntity<?> loginWebUser(@RequestBody String json) throws JSONException {

		String username = "";
		String password = "";
		try {
			JSONObject obj = new JSONObject(json);

			username = obj.getString("user_name").toString(); // pass json key as Username
			password = obj.getString("password").toString();
			System.out.println("username " + username + "  password " + password);

			// validation for checking weather its empty or not
			if ((username.equalsIgnoreCase(" ") || username.equalsIgnoreCase(""))
					&& (password.equalsIgnoreCase(" ") || password.equalsIgnoreCase(""))) {
				return ResponseEntity
						.ok(CustomMessages.getMessage(CustomMessages.RESPONSE_MESSAGE_NULL_MOBORUNAME_PASS));

			} else if (username.equalsIgnoreCase(" ") || username.equalsIgnoreCase("")) {

				return ResponseEntity
						.ok(CustomMessages.getMessage(CustomMessages.RESPONSE_MESSAGE_NULL_MOBILE_OR_UNAME));

			} else if (password.equalsIgnoreCase(" ") || password.equalsIgnoreCase("")) {
				return ResponseEntity.ok(CustomMessages.getMessage(CustomMessages.RESPONSE_MESSAGE_NULL_PASSWORD));

			}

			else {
//				String decryptedPassword = CryptoHelper.decrypt(password);
				System.out.println("Authentication..........");
				Authentication authentication = authenticationManager
						.authenticate(new UsernamePasswordAuthenticationToken(username, password));

				SecurityContextHolder.getContext().setAuthentication(authentication);

				String jwt = jwtProvider.generateJwtToken(authentication);

				// Get User all Details
				UserProfileModel userProfileModel = getwebUserDetails(username);

				userService.addWebUserToken(username, jwt);

				UserDetails userDetails = (UserDetails) authentication.getPrincipal();

				// Send Response with token and user_name
				JSONArray arr = new JSONArray();

				JSONObject jwtResponse = new JSONObject(
						new JwtResponse("Bearer " + jwt, userDetails.getAuthorities(), username));
				jwtResponse.put("user_id", userProfileModel.getUser_id());
				jwtResponse.put("name", userProfileModel.getName());
				jwtResponse.put("user_name", userProfileModel.getUser_name());
				jwtResponse.put("email_id", userProfileModel.getEmail_id());
				jwtResponse.put("role_id", userProfileModel.getRole_id());
				jwtResponse.put("role_name", userProfileModel.getRole_name());
				jwtResponse.put("modules", userProfileModel.getModules());
				arr.put(jwtResponse);

				JSONObject responseObj = new JSONObject();
				responseObj.put("responseCode", 200);
				responseObj.put("data", arr);
				responseObj.put("responseMessage", "Login Successful.");

				return ResponseEntity.ok(responseObj.toString());
			}

		} catch (Exception e) {
			System.out.println("ERROR while login ::: " + e);
			return ResponseEntity
					.ok(CustomMessages.getMessage(CustomMessages.RESPONSE_MESSAGE_FOR_USERNAME_OR_PASSWORD_INCORRECT));
		}

	}

---------------------------------------------------------------------------------------------------------------------->>26/6/24
<div class="bg-light dark:bg-transparent min-vh-100 d-flex flex-row align-items-center">
  <c-container>
    <c-row class="justify-content-center">
      <c-col lg="7" md="9" xl="6">
        <c-card class="mx-4">
          <c-card-body class="p-4">
            <form cForm  [formGroup]="registerForm" (ngSubmit)="onSubmit()" >
              <h1>Register</h1>
              <p class="text-body-secondary">Create your account</p>
              <c-input-group class="mb-3">
                <span cInputGroupText>
                  <svg cIcon name="cilUser"></svg>
                </span>
                <input  class="form-control" formControlName="username"  autoComplete="name" cFormControl placeholder="Username" />
              </c-input-group>
              <c-input-group class="mb-3">
                <span cInputGroupText>&#64;</span>
                <input  class="form-control" formControlName="email"  autoComplete="email" cFormControl placeholder="Email" />
              </c-input-group>
              <c-input-group class="mb-3">
                <span cInputGroupText>
                  <svg cIcon name="cilLockLocked"></svg>
                </span>
                <input  class="form-control" formControlName="password"  autoComplete="new-password" cFormControl placeholder="Password" type="password" />
              </c-input-group>
              <c-input-group class="mb-4">
                <span cInputGroupText>
                  <svg cIcon name="cilLockLocked"></svg>
                </span>
                <input  class="form-control" formControlName="role"  autoComplete="new-password" cFormControl placeholder="role"  />
              </c-input-group>
              <div class="d-grid">
                <button cButton type="submit"color="success">Create Account</button>
              </div>
            </form>
          </c-card-body>
        </c-card>
      </c-col>
    </c-row>
  </c-container>
</div>
import { Component, OnInit } from '@angular/core';
import { IconDirective } from '@coreui/icons-angular';
import { ContainerComponent, RowComponent, ColComponent, TextColorDirective, CardComponent, CardBodyComponent, FormDirective, InputGroupComponent, InputGroupTextDirective, FormControlDirective, ButtonDirective } from '@coreui/angular';
import { RouterModule, Router } from '@angular/router';
import { ReactiveFormsModule, FormBuilder, FormGroup, Validators } from '@angular/forms';
import { UserService } from 'src/services/user.service';
// import {User }  from 'src/models/user'
import { HttpClientModule,HttpClient } from '@angular/common/http';
@Component({
    selector: 'app-register',
    templateUrl: './register.component.html',
    styleUrls: ['./register.component.scss'],
    standalone: true,
    imports: [HttpClientModule,ReactiveFormsModule,RouterModule,ContainerComponent, RowComponent, ColComponent, TextColorDirective, CardComponent, CardBodyComponent, FormDirective, InputGroupComponent, InputGroupTextDirective, IconDirective, FormControlDirective, ButtonDirective],
    providers:[HttpClient,UserService]
})
export class RegisterComponent implements OnInit{
  registerForm: FormGroup;
  constructor(private fb: FormBuilder,private service:UserService,private router: Router) {
    this.registerForm = this.fb.group({
      username: ['', Validators.required],
      email: ['', [Validators.required, Validators.email]],
      password: ['', Validators.required],
      role: [[]]
    });
  }
  ngOnInit(): void {
   
  }

  onSubmit() {
    if (this.registerForm.valid) {
      console.log(this.registerForm.value);
      // let user = new User(
      //   this.registerForm.value['username'],
      //   this.registerForm.value['email'],
      //   this.registerForm.value['password'],
      //   this.registerForm.value['role']
      // );
      let formdata = {
        username: this.registerForm.get('username')?.value,
        email: this.registerForm.get('email')?.value,
        password: this.registerForm.get('password')?.value,
        role: ['user']// Assuming 'user' role by default
      };
      this.service.signUp(formdata).subscribe((data: any) => {
        alert(data.message);
        this.router.navigate(['/login']);
    
      });
    } else {
      console.log('Form is invalid');
    }
  }

}
............................................................

<div class="bg-light dark:bg-transparent min-vh-100 d-flex flex-row align-items-center">
  <c-container breakpoint="md">
    <c-row class="justify-content-center">
      <c-col lg="10" xl="8">
        <c-card-group>
          <c-card class="p-4">
            <c-card-body>
              <form cForm [formGroup]="loginForm" (ngSubmit)="onSubmit()">
                <h1>Login</h1>
                <p class="text-body-secondary">Sign In to your account</p>
                <c-input-group class="mb-3">
                  <span cInputGroupText>
                    <svg cIcon name="cilUser"></svg>
                  </span>
                  <input  class="form-control" formControlName="username" autoComplete="username" cFormControl placeholder="Username" />
                </c-input-group>
                <c-input-group class="mb-4">
                  <span cInputGroupText>
                    <svg cIcon name="cilLockLocked"></svg>
                  </span>
                  <input  class="form-control" formControlName="password"
                    autoComplete="current-password"
                    cFormControl
                    placeholder="Password"
                    type="password"
                  />
                </c-input-group>
                <c-row>
                  <c-col xs="6">
                    <button type="submit" cButton class="px-4" color="primary">
                      Login
                    </button>
                  </c-col>
                  <c-col class="text-right" xs="6">
                    <button cButton class="px-0" color="link">
                      Forgot password?
                    </button>
                  </c-col>
                </c-row>
              </form>
            </c-card-body>
          </c-card>
          <c-card [ngStyle]="{'minWidth.%': 44}" class="text-white bg-primary py-5">
            <c-card-body class="text-center">
              <div>
                <h2>Sign up</h2>
                <p>
                  create new account
                </p>
                <button  [active]="true" cButton class="mt-3" color="primary" >
                  Register Now!
                </button>
              </div>
            </c-card-body>
          </c-card>
        </c-card-group>
      </c-col>
    </c-row>
  </c-container>
</div>
import { Component } from '@angular/core';
import { NgStyle } from '@angular/common';
import { IconDirective } from '@coreui/icons-angular';
import { ContainerComponent, RowComponent, ColComponent, CardGroupComponent, TextColorDirective, CardComponent, CardBodyComponent, FormDirective, InputGroupComponent, InputGroupTextDirective, FormControlDirective, ButtonDirective } from '@coreui/angular';
import { RouterModule, Router } from '@angular/router';
import { FormGroup, Validators, FormBuilder, ReactiveFormsModule } from '@angular/forms';
import { HttpClient, HttpClientModule } from '@angular/common/http';
import { UserService } from 'src/services/user.service';

@Component({
    selector: 'app-login',
    templateUrl: './login.component.html',
    styleUrls: ['./login.component.scss'],
    standalone: true,
    providers:[HttpClient,UserService],
    imports: [HttpClientModule,ReactiveFormsModule,RouterModule,RouterModule,ContainerComponent, RowComponent, ColComponent, CardGroupComponent, TextColorDirective, CardComponent, CardBodyComponent, FormDirective, InputGroupComponent, InputGroupTextDirective, IconDirective, FormControlDirective, ButtonDirective, NgStyle]
})
export class LoginComponent {
  loginForm: FormGroup;
  constructor(private fb: FormBuilder,private service:UserService,private router: Router) {
    this.loginForm = this.fb.group({
      username: ['', Validators.required],
      password: ['', Validators.required],
    });
  }
  ngOnInit(): void {
   
  }

  onSubmit() {
    if (this.loginForm.valid) {
      console.log(this.loginForm.value);
   
      let formdata = {
        username: this.loginForm.get('username')?.value,
        password: this.loginForm.get('password')?.value,
      };
      this.service.signIn(formdata).subscribe((data: any) => {
        
        this.router.navigate(['/dashboard']);
        localStorage.setItem('isLoggedIn', "true");
        localStorage.setItem('id', data.id);
        localStorage.setItem('username', data.username);
        localStorage.setItem('email', data.email);
        localStorage.setItem('roles', data.roles);
        localStorage.setItem('tokenType', data.tokenType);
        localStorage.setItem('accessToken', data.accessToken);
      
        // this.authorizationCheckService.modules = data.data[0].modules;
        alert('Login Success');
    
      });
    } else {
      console.log('Form is invalid');
    }
  }

}






































import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Router } from '@angular/router';
import { HttpClientModule } from '@angular/common/http'; // Import HttpClientModule
import * as env from 'src/environments/environment'
@Injectable({
  providedIn: 'root'
})
export class UserService {
  private  url =  env.environment.baseUrl;  
  headers = new HttpHeaders().set('Content-Type','application/json');
  constructor(private http:HttpClient,private router:Router) { }
  signUp(jsonData :any)
  {   
      // http://localhost:8080/adminPanel/api/auth/signup
    return this.http.post( 'http://localhost:8080/adminPanel/api/auth/signup', jsonData);  
      
  }
  signIn(jsonData :any)
  {   
      // http://localhost:8080/adminPanel/api/auth/signin
    return this.http.post(  'http://localhost:8080/adminPanel/api/auth/signin', jsonData);  
      
  }logout() {
   
    
    localStorage.clear();

    // Navigate to the login page or another appropriate page
    this.router.navigate(['/login']);
  }

  

}



































import { Injectable } from '@angular/core';
import { Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';
@Injectable({
  providedIn: 'root'
})
export class AuthorizeService implements CanActivate {

 
  constructor(private router: Router) { }
  public modules = [];

  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {
      //If token data exist, user may login to application

      // if (this.modules.length == 0) {
      //     this.modules = localStorage.getItem('modules').split(',');
      // }
      
      // let redirectedURL = state.url.replace('/', '');
      // && this.modules.includes(redirectedURL)
      const token = localStorage.getItem('accessToken');
      if (token) {
        return true;
      } else {
        alert('unauthorize');
        localStorage.clear();
        this.router.navigate(['/login']);
        return false;
      }
    }}


































import { Routes } from '@angular/router';
import { DefaultLayoutComponent } from './layout';
import { HttpClientModule,HttpClient } from '@angular/common/http';
// import { authGuard } from '../auth/auth.guard';
 import { AuthorizeService } from '../services/authorize.service';


export const routes: Routes = [
  {
    path: '',
    redirectTo: 'login',
    pathMatch: 'full'
  },
  {
    path: '',
    component: DefaultLayoutComponent,
    canActivate: [AuthorizeService],
    data: {
      title: 'Home'
    },
    children: [
      {
        path: 'dashboard',
        loadChildren: () => import('./views/dashboard/routes').then((m) => m.routes),
        canActivate: [AuthorizeService],
      },
      {
        path: 'user-management',
        loadComponent: () => import('../components/user-management/user-management.component').then(m => m.UserManagementComponent),
        canActivate: [AuthorizeService],
        pathMatch: 'full'
      },
      {
        path: 'theme',
        loadChildren: () => import('./views/theme/routes').then((m) => m.routes)
      },
      {
        path: 'base',
        loadChildren: () => import('./views/base/routes').then((m) => m.routes)
      },
      {
        path: 'buttons',
        loadChildren: () => import('./views/buttons/routes').then((m) => m.routes)
      },
      {
        path: 'forms',
        loadChildren: () => import('./views/forms/routes').then((m) => m.routes)
      },
      {
        path: 'icons',
        loadChildren: () => import('./views/icons/routes').then((m) => m.routes)
      },
      {
        path: 'notifications',
        loadChildren: () => import('./views/notifications/routes').then((m) => m.routes)
      },
      {
        path: 'widgets',
        loadChildren: () => import('./views/widgets/routes').then((m) => m.routes)
      },
      {
        path: 'charts',
        loadChildren: () => import('./views/charts/routes').then((m) => m.routes)
      },
      {
        path: 'pages',
        loadChildren: () => import('./views/pages/routes').then((m) => m.routes)
      }
    ]
  },
  {
    path: '404',
    loadComponent: () => import('./views/pages/page404/page404.component').then(m => m.Page404Component),
    data: {
      title: 'Page 404'
    }
  },
  {
    path: '500',
    loadComponent: () => import('./views/pages/page500/page500.component').then(m => m.Page500Component),
    data: {
      title: 'Page 500'
    }
  },
  {
    path: 'login',
    loadComponent: () => import('./views/pages/login/login.component').then(m => m.LoginComponent),
    data: {
      title: 'Login Page'
    }
  },
  {
    path: 'register',
    loadComponent: () => import('./views/pages/register/register.component').then(m => m.RegisterComponent),
    data: {
      title: 'Register Page'
    }
  },
  { path: '**', redirectTo: 'dashboard' }
];



































import { Routes } from '@angular/router';
import { DefaultLayoutComponent } from './layout';
import { HttpClientModule,HttpClient } from '@angular/common/http';
// import { authGuard } from '../auth/auth.guard';
 import { AuthorizeService } from '../services/authorize.service';


export const routes: Routes = [
  {
    path: '',
    redirectTo: 'login',
    pathMatch: 'full'
  },
  {
    path: '',
    component: DefaultLayoutComponent,
    canActivate: [AuthorizeService],
    data: {
      title: 'Home'
    },
    children: [
      {
        path: 'dashboard',
        loadChildren: () => import('./views/dashboard/routes').then((m) => m.routes),
        canActivate: [AuthorizeService],
      },
      {
        path: 'user-management',
        loadComponent: () => import('../components/user-management/user-management.component').then(m => m.UserManagementComponent),
        canActivate: [AuthorizeService],
        pathMatch: 'full'
      },
      {
        path: 'theme',
        loadChildren: () => import('./views/theme/routes').then((m) => m.routes)
      },
      {
        path: 'base',
        loadChildren: () => import('./views/base/routes').then((m) => m.routes)
      },
      {
        path: 'buttons',
        loadChildren: () => import('./views/buttons/routes').then((m) => m.routes)
      },
      {
        path: 'forms',
        loadChildren: () => import('./views/forms/routes').then((m) => m.routes)
      },
      {
        path: 'icons',
        loadChildren: () => import('./views/icons/routes').then((m) => m.routes)
      },
      {
        path: 'notifications',
        loadChildren: () => import('./views/notifications/routes').then((m) => m.routes)
      },
      {
        path: 'widgets',
        loadChildren: () => import('./views/widgets/routes').then((m) => m.routes)
      },
      {
        path: 'charts',
        loadChildren: () => import('./views/charts/routes').then((m) => m.routes)
      },
      {
        path: 'pages',
        loadChildren: () => import('./views/pages/routes').then((m) => m.routes)
      }
    ]
  },
  {
    path: '404',
    loadComponent: () => import('./views/pages/page404/page404.component').then(m => m.Page404Component),
    data: {
      title: 'Page 404'
    }
  },
  {
    path: '500',
    loadComponent: () => import('./views/pages/page500/page500.component').then(m => m.Page500Component),
    data: {
      title: 'Page 500'
    }
  },
  {
    path: 'login',
    loadComponent: () => import('./views/pages/login/login.component').then(m => m.LoginComponent),
    data: {
      title: 'Login Page'
    }
  },
  {
    path: 'register',
    loadComponent: () => import('./views/pages/register/register.component').then(m => m.RegisterComponent),
    data: {
      title: 'Register Page'
    }
  },
  { path: '**', redirectTo: 'dashboard' }
];





















































































































































































// This file can be replaced during build by using the `fileReplacements` array.
// `ng build` replaces `environment.ts` with `environment.prod.ts`.
// The list of file replacements can be found in `angular.json`.


import packageInfo from '../../package.json';

export const environment = {
  appVersion: packageInfo.version,
  production: false,

//   KENDO_UI_LICENSE: 'eyJhbGciOiJSUzI1NiIsInR5cCI6IkxJQyJ9.eyJwcm9kdWN0cyI6W3sidHJpYWwiOmZhbHNlLCJjb2RlIjoiS0VORE9VSVJFQUNUIiwibGljZW5zZUV4cGlyYXRpb25EYXRlIjoxNzM5ODYxMDkzfSx7InRyaWFsIjpmYWxzZSwiY29kZSI6IktFTkRPVUlDT01QTEVURSIsImxpY2Vuc2VFeHBpcmF0aW9uRGF0ZSI6MTczOTg2MTA5M30seyJ0cmlhbCI6ZmFsc2UsImNvZGUiOiJLRU5ET1VJVlVFIiwibGljZW5zZUV4cGlyYXRpb25EYXRlIjoxNzM5ODYxMDkzfSx7InRyaWFsIjpmYWxzZSwiY29kZSI6IktFTkRPVUlBTkdVTEFSIiwibGljZW5zZUV4cGlyYXRpb25EYXRlIjoxNzM5ODYxMDkzfV0sImludGVncml0eSI6Iko4cDBhblZXVzE5XC9UYnViN3pESnJvam1Zblk9IiwibGljZW5zZUhvbGRlciI6ImFydmluZEBhbW5leC5jb20iLCJpYXQiOjE3MDkxOTA2MjYsImF1ZCI6Im1hdWxpa0BhbW5leC5jb20iLCJ1c2VySWQiOiJkZTk4NWU5OS1kOTE4LTQ3YmMtODA3MC1hYTlmZmIyMTUwNGQifQ.QMFdhyXCmhsmSlX-i_DVbsrmIDbGMa5np6ioPgP53KwJHC8CKz7lzH0GBxxp_qS-Icws0vsPyUKX3tGiCE7_tWM41Q9xZRWJ-UZrlv2VBpS76tCTdEw_wVOY65ovcCCJPbiXEmac5arg0MQ5_RpIfMKOXhN3rvpYx0E-sbYXg3jHOuqq8es5DyXFbF293tsO3NlqKY8CVrns1kPaoWIaOwLtcl5ZIZg5da6WhOuSYmDHDTVdmxQV4Oj6kJCdFVhVba_xIdQbyqr3RtpLJkdECSLddcrRPPPr5Gd4fq1apaZHluoCd9BYc5ZjE0GVYXSfkUOtdXS_vuot-pleT9KBJg',

  // Local Server
  baseUrl:'http://localhost:8090/adminPanel/',
  //baseUrl:'http://localhost:9090/midcgis/',

  // Staging Server - digitaltwin
  //baseUrl:'https://apagri.infinium.management/digitaltwin/',

};
/*
 * For easier debugging in development mode, you can import the following file
 * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.
 *
 * This import should be commented out in production mode because it will have a negative impact
 * on performance if an error is thrown.
 */
// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.






































---------------------------------------------------------------------------------------------------------------------->>27/6/24
-- FUNCTION: public.fn_web_insert_re_instegration_data(text)

-- DROP FUNCTION public.fn_web_insert_re_instegration_data(text);

CREATE OR REPLACE FUNCTION public.fn_web_insert_update_streetlight_arms(
	jsonarray text)
    RETURNS TABLE(data text) 
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
    ROWS 1000

AS $BODY$
DECLARE

	
	_gid integer;
	_pole_id text;
	_smart_asse text;
	_pole_type text;
	_arrangemen text;
	_bracket_ty text;
	_pole_heigh text;
	_date_of_in text;
	_cost text;
	_pole_owner text;
	_maintained text;
	_last_paint text;
	_number_of_ text;
	_number_of1 text;
	_ploe_light text;
	_geom text;
	
	_street_arm_id integer;
	_position text;
	_status Boolean;
	_width integer;
	_status_ON_OFF text;
	_street_light_arms_data text;

	
	jsonObject JSON;
	json JSON;
	sql_query text;
	
		
			
	BEGIN
	RAISE NOTICE 'value of a ' ; 
-- 		select * from public.tbl_web_street_arms limit 10;
-- 		select * from public.shp_street_lights limit 10;
-- select fn_web_insert_streetlight_arms('{"gid":1,"position":"left","status":false,"width":"4","status_ON_OFF":"ON"}');
-- SELECT * FROM fn_web_insert_streetlight_arms('{"street_arm_id":12,"position":"left","status":"false","width":"4","status_ON_OFF":"ON"}');
-- 
-- 				 INSERT INTO public.shp_street_lights( gid)
-- 				 VALUES (_gid);
-- select * from tbl_error_log order by created_on desc limit 10
		jsonObject := cast(jsonArray AS JSON) :: JSON;
		RAISE NOTICE 'value of a%',jsonObject ;
		
		_gid                      := jsonObject ->> 'gid';
		RAISE NOTICE 'value of a:%',_gid ;
		
		_street_arm_id            := jsonObject ->> 'street_arm_id';
		RAISE NOTICE 'value of a%',_street_arm_id ;
		
		_street_light_arms_data   := jsonObject ->> 'data';
		RAISE NOTICE 'value of a%',_street_light_arms_data ;
		
		_position                 := jsonObject ->> 'position';
		RAISE NOTICE 'value of a%',_position ;
		
		_status                   := jsonObject ->> 'status';
		RAISE NOTICE 'value of a%',_status ;
		
		_width                    := jsonObject ->> 'width';
		RAISE NOTICE 'value of a%',_width ;
		
		_status_ON_OFF            := jsonObject ->> 'status_ON_OFF';
		RAISE NOTICE 'value of a%',_status_ON_OFF ;
		
         IF EXISTs(select * from shp_street_lights where gid=_street_arm_id)
		 then
		 		IF EXISTS (SELECT street_arm_id from tbl_web_street_arms WHERE street_arm_id = _street_arm_id) 
			THEN
				RAISE NOTICE 'update' ;
				UPDATE public.tbl_web_street_arms
				SET street_arm_id=_street_arm_id, 
				"position"=_position,
				width=_width, 
				status=_status, 
				"status_ON_OFF"=_status_ON_OFF
				 WHERE street_arm_id = _street_arm_id;
				 		RAISE NOTICE 'update end' ;
				 sql_query := 'SELECT json_build_object(''responseCode'',200,''responseMessage'',''Compained data updated successfully'',''status'',''success'')::text as data;';
	        ELSE
				RAISE NOTICE 'insert' ;
				
				
				INSERT INTO public.tbl_web_street_arms(
				street_arm_id, "position", width, status, "status_ON_OFF")
				VALUES (_street_arm_id, _position,_width, _status, _status_ON_OFF);
				
				 		RAISE NOTICE 'insert end' ;
				 sql_query := 'SELECT json_build_object(''responseCode'',200,''responseMessage'',''Compained data inserted successfully'',''status'',''success'')::text as data;';
			END IF;	
					sql_query := 'SELECT json_build_object(''responseCode'',200,''responseMessage'',''gid not present in parent table'',''status'',''success'')::text as data;';
		 ELSE
		 		
		 END IF;
			
		RETURN QUERY EXECUTE sql_query;
			EXCEPTION WHEN OTHERS 
		THEN
			DECLARE p_errormessage VARCHAR(4000);
			DECLARE p_errorstate VARCHAR(4000);
			DECLARE p_errorline VARCHAR(4000);
			BEGIN									
				p_errormessage:= SQLERRM;
				p_errorstate:= SQLSTATE;
				GET STACKED DIAGNOSTICS p_errorline = PG_EXCEPTION_CONTEXT;

				INSERT INTO tbl_error_log
				(
					error_name,error_callstack,error_method,created_on
				)		
				SELECT p_errorline,p_errormessage||'fn_web_insert_update_streetlight_arms',p_errorstate,timezone('Asia/Kolkata'::text, now());
				sql_query := 'SELECT json_build_object(''responseCode'',201,''responseMessage'',''failed'')::text as data';																					 
				RETURN QUERY EXECUTE sql_query;
			END;
			

	END;
$BODY$;

ALTER FUNCTION public.fn_web_insert_re_instegration_data(text)
    OWNER TO postgres;
........................................................................................................................................................................













-- FUNCTION: public.fn_web_insert_re_instegration_data(text)

-- DROP FUNCTION public.fn_web_insert_re_instegration_data(text);

CREATE OR REPLACE FUNCTION public.fn_web_insert_update_streetlight_arms(
	jsonarray text)
    RETURNS TABLE(data text) 
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
    ROWS 1000

AS $BODY$
DECLARE

	
	_gid integer;
	_pole_id text;
	_smart_asse text;
	_pole_type text;
	_arrangemen text;
	_bracket_ty text;
	_pole_heigh text;
	_date_of_in text;
	_cost text;
	_pole_owner text;
	_maintained text;
	_last_paint text;
	_number_of_ text;
	_number_of1 text;
	_ploe_light text;
	_geom text;
	
	_street_arm_id integer;
	_position text;
	_status Boolean;
	_width integer;
	_status_ON_OFF text;
	_street_light_arms_data text;

	
	jsonObject JSON;
	json JSON;
	sql_query text;
	
		
			
	BEGIN
	RAISE NOTICE 'value of a ' ; 
-- 		select * from public.tbl_web_street_arms limit 10;
-- 		select * from public.shp_street_lights limit 10;
-- select fn_web_insert_streetlight_arms('{"gid":1,"position":"left","status":false,"width":"4","status_ON_OFF":"ON"}');
-- SELECT * FROM fn_web_insert_streetlight_arms('{"street_arm_id":12,"position":"left","status":"false","width":"4","status_ON_OFF":"ON"}');
-- 
-- 				 INSERT INTO public.shp_street_lights( gid)
-- 				 VALUES (_gid);
-- select * from tbl_error_log order by created_on desc limit 10
		jsonObject := cast(jsonArray AS JSON) :: JSON;
		RAISE NOTICE 'value of a%',jsonObject ;
		
		_gid                      := jsonObject ->> 'gid';
		RAISE NOTICE 'value of a:%',_gid ;
		
		_street_arm_id            := jsonObject ->> 'street_arm_id';
		RAISE NOTICE 'value of a%',_street_arm_id ;
		
		_street_light_arms_data   := jsonObject ->> 'data';
		RAISE NOTICE 'value of a%',_street_light_arms_data ;
		
		_position                 := jsonObject ->> 'position';
		RAISE NOTICE 'value of a%',_position ;
		
		_status                   := jsonObject ->> 'status';
		RAISE NOTICE 'value of a%',_status ;
		
		_width                    := jsonObject ->> 'width';
		RAISE NOTICE 'value of a%',_width ;
		
		_status_ON_OFF            := jsonObject ->> 'status_ON_OFF';
		RAISE NOTICE 'value of a%',_status_ON_OFF ;
		
         IF EXISTs(select * from shp_street_lights where gid=_street_arm_id)
		 then
		 		IF EXISTS (SELECT street_arm_id from tbl_web_street_arms WHERE street_arm_id = _street_arm_id) 
			THEN
				RAISE NOTICE 'update' ;
				UPDATE public.tbl_web_street_arms
				SET street_arm_id=_street_arm_id, 
				"position"=_position,
				width=_width, 
				status=_status, 
				"status_ON_OFF"=_status_ON_OFF
				 WHERE street_arm_id = _street_arm_id;
				 		RAISE NOTICE 'update end' ;
				 sql_query := 'SELECT json_build_object(''responseCode'',200,''responseMessage'',''Compained data updated successfully'',''status'',''success'')::text as data;';
	        ELSE
				RAISE NOTICE 'insert' ;
				IF EXISTS(SELECT gid from shp_street_lights WHERE  = _street_arm_id)
				then
				
					INSERT INTO public.tbl_web_street_arms(
					street_arm_id, "position", width, status, "status_ON_OFF")
					VALUES (_street_arm_id, _position,_width, _status, _status_ON_OFF);
				ELSE 
				
					INSERT INTO public.shp_street_lights(gid)
					VALUES (_street_arm_id);
					
					INSERT INTO public.tbl_web_street_arms(
					street_arm_id, "position", width, status, "status_ON_OFF")
					VALUES (_street_arm_id, _position,_width, _status, _status_ON_OFF);

				END IF;
				


				
				
				 		RAISE NOTICE 'insert end' ;
				 sql_query := 'SELECT json_build_object(''responseCode'',200,''responseMessage'',''Compained data inserted successfully'',''status'',''success'')::text as data;';
			END IF;	
					sql_query := 'SELECT json_build_object(''responseCode'',200,''responseMessage'',''gid not present in parent table'',''status'',''success'')::text as data;';
		 ELSE
		 		
		 END IF;
			
		RETURN QUERY EXECUTE sql_query;
			EXCEPTION WHEN OTHERS 
		THEN
			DECLARE p_errormessage VARCHAR(4000);
			DECLARE p_errorstate VARCHAR(4000);
			DECLARE p_errorline VARCHAR(4000);
			BEGIN									
				p_errormessage:= SQLERRM;
				p_errorstate:= SQLSTATE;
				GET STACKED DIAGNOSTICS p_errorline = PG_EXCEPTION_CONTEXT;

				INSERT INTO tbl_error_log
				(
					error_name,error_callstack,error_method,created_on
				)		
				SELECT p_errorline,p_errormessage||'fn_web_insert_update_streetlight_arms',p_errorstate,timezone('Asia/Kolkata'::text, now());
				sql_query := 'SELECT json_build_object(''responseCode'',201,''responseMessage'',''failed'')::text as data';																					 
				RETURN QUERY EXECUTE sql_query;
			END;
			

	END;
$BODY$;

ALTER FUNCTION public.fn_web_insert_re_instegration_data(text)
    OWNER TO postgres;




































________________________________________________________________________________________________________________________28/6/24

CREATE OR REPLACE FUNCTION public.fn_web_insert_update_streetlight_arms(
	jsonarray text)
    RETURNS TABLE(data text) 
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
    ROWS 1000

AS $BODY$
DECLARE

	_gid integer;
	_pole_id text;
	_smart_asse integer;
	_pole_type text;
	_arrangemen text;
	_bracket_ty text;
	_pole_heigh  double precision;
	_date_of_in text;
	_cost  double precision;
	_pole_owner text;
	_maintained text;
	_last_paint text;
	_number_of_ text;
	_number_of1 text;
	_ploe_light text;
	_geom text;
	_fitting_wa double precision;
	_fitting_ty text;
	
	_street_arm_id integer;
	_position text;
	_status Boolean;
	_width integer;
	_status_ON_OFF text;
	_street_light_arms_data text;
	
	jsonObject JSON;
	pole_arms_json JSON;
	json JSON;
	sql_query text = 'SELECT json_build_object(''responseCode'',201,''responseMessage'',''error'',''status'',''fail'')::text as data;';
	i json;
			
	BEGIN
		RAISE NOTICE 'start' ;
-- 		select * from public.tbl_web_street_arms order by gid desc limit 10;
-- 		select * from public.shp_street_lights order by gid desc limit 10;
--      select * from tbl_error_log order by created_on desc limit 10
 

		jsonObject := cast(jsonArray AS JSON) :: JSON;
		RAISE NOTICE 'value of jsonObject:%',jsonObject ;
		
		pole_arms_json := jsonObject -> 'pole_arms';
		RAISE NOTICE 'value of pole_arms:%',pole_arms_json ;
		
					_gid       := jsonObject ->> 'gid';          RAISE NOTICE '_gid:%',_gid ;
				_pole_id       := jsonObject ->> 'pole_id';			RAISE NOTICE '_pole_id:%',_pole_id ;
				_smart_asse    := jsonObject ->> 'smart_asse';RAISE NOTICE '_smart_asse:%',_smart_asse ;
				_pole_type     := jsonObject ->> 'pole_type';RAISE NOTICE '_pole_type:%',_pole_type ;
				_arrangemen    := jsonObject ->> 'arrangemen';RAISE NOTICE '_arrangemen:%',_arrangemen ;
				_bracket_ty    := jsonObject ->> 'bracket_ty';RAISE NOTICE '_bracket_ty:%',_bracket_ty ;
				_pole_heigh    := jsonObject ->> 'pole_heigh';RAISE NOTICE '_pole_heigh:%',_pole_heigh ;
				_date_of_in    := jsonObject ->> 'date_of_in';RAISE NOTICE '_date_of_in:%',_date_of_in ;
				_cost          := jsonObject ->> 'cost';RAISE NOTICE '_cost:%',_cost ;
				_maintained    := jsonObject ->> 'maintained';RAISE NOTICE '_maintained:%',_maintained ;
				_last_paint    := jsonObject ->> 'last_paint';RAISE NOTICE '_last_paint:%',_last_paint ;
				_number_of_    := jsonObject ->> 'number_of_';RAISE NOTICE '_number_of_:%',_number_of_ ;
				_number_of1    := jsonObject ->> 'number_of1';RAISE NOTICE '_number_of1:%',_number_of1 ;
				_ploe_light    := jsonObject ->> 'ploe_light';RAISE NOTICE '_ploe_light:%',_ploe_light ;
				_geom          := jsonObject ->> 'geom';RAISE NOTICE '_geom:%',_geom ;
				_fitting_wa    := jsonObject ->> 'fitting_wa';RAISE NOTICE '_fitting_wa:%',_fitting_wa ;
				_fitting_ty   := jsonObject ->> 'fitting_type';RAISE NOTICE '_fitting_ty:%',_fitting_ty ;
		
		IF _gid NOTNULL
		then
			   	RAISE NOTICE 'update parent' ;
				UPDATE public.shp_street_lights
	  			SET  
				pole_id     =_pole_id, 
				smart_asse  =_smart_asse, 
				pole_type   =_pole_type, 
				fitting_ty  =_fitting_ty, 
				arrangemen	=_arrangemen ,
				bracket_ty	=_bracket_ty, 
				pole_heigh	=_pole_heigh ,
				fitting_wa	=_fitting_wa ,
				date_of_in	=_date_of_in ,
				cost		=_cost, 
				pole_owner	=_pole_owner ,
				maintained	=_maintained ,
				last_paint	=_last_paint?, 
				number_of_	=_number_of_ ,
				number_of1	=_number_of1?, 
				ploe_light	=_ploe_light ,
				geom		=_geom
				WHERE gid=_gid;
				sql_query := 'SELECT json_build_object(''responseCode'',200,''responseMessage'',''shp_street_lights data updated successfully'',''status'',''success'')::text as data;';
				RAISE NOTICE 'update parent' ;
				FOR i IN SELECT * FROM json_array_elements(pole_arms_json)
			    LOOP
			   			RAISE NOTICE 'output from space %', i;
							_street_arm_id            := i ->> 'street_arm_id';
							_street_light_arms_data   := i ->> 'data';
							_position                 := i ->> 'position';
							_width                    := i ->> 'width';
							_status_ON_OFF            := i ->> 'status_ON_OFF';
					
						IF _street_arm_id NOTNULL 
						then
								RAISE NOTICE 'update child' ;
								UPDATE public.tbl_web_street_arms
								SET street_arm_id=_street_arm_id,
								gid=_gid,
								"position"=_position,
								width=_width, 
								status=_status, 
								status_ON_OFF=_status_ON_OFF
								 WHERE street_arm_id = _street_arm_id; 
								
								sql_query := 'SELECT json_build_object(''responseCode'',200,''responseMessage'',''tbl_web_street_arms data updated successfully'',''status'',''success'')::text as data;';
								RAISE NOTICE 'update child' ;
						ELSE 
								 RAISE NOTICE 'insert child' ;
								INSERT INTO public.tbl_web_street_arms(
										gid, "position", width, status, status_ON_OFF)
								VALUES (_gid, _position,_width, _status, _status_ON_OFF);
								sql_query := 'SELECT json_build_object(''responseCode'',200,''responseMessage'',''tbl_web_street_arms data inserted successfully'',''status'',''success'')::text as data;';
                                RAISE NOTICE 'insert child' ;
						END IF;
			   
			   END LOOP;

		ELSE  
		
				 INSERT INTO public.shp_street_lights 
				 		(pole_id, smart_asse, pole_type, fitting_ty, arrangemen, bracket_ty, pole_heigh, fitting_wa, date_of_in, cost, pole_owner, maintained, last_paint, number_of_, number_of1, ploe_light, geom)
				 VALUES (_pole_id,_smart_asse, _pole_type, _fitting_ty, _arrangemen, _bracket_ty, _pole_heigh, _fitting_wa, _date_of_in, _cost, _pole_owner, _maintained, _last_paint, _number_of_, _number_of1, _ploe_light, _geom)
				 returning gid into _gid;				
				 sql_query := 'SELECT json_build_object(''responseCode'',200,''responseMessage'',''data inserted in shp_street_lights'',''status'',''success'')::text as data;';
					
			 	 FOR i IN SELECT * FROM json_array_elements(pole_arms_json)
				 LOOP
							
							RAISE NOTICE 'output from space %', i->>'type';
							_street_arm_id            := i ->> 'street_arm_id';
							_street_light_arms_data   := i ->> 'data';
							_position                 := i ->> 'position';
							_width                    := i ->> 'width';
							_status_ON_OFF            := i ->> 'status_ON_OFF';
							
				 		INSERT INTO public.tbl_web_street_arms(
								gid, position, width, status, status_ON_OFF)
						VALUES (_gid, _position,_width, _status, _status_ON_OFF);
						
				 END LOOP;
				 sql_query := 'SELECT json_build_object(''responseCode'',200,''responseMessage'',''tbl_web_street_arms data inserted successfully'',''status'',''success'')::text as data;';

		END IF;
	
		RETURN QUERY EXECUTE sql_query;
			EXCEPTION WHEN OTHERS 
		THEN
			DECLARE p_errormessage VARCHAR(4000);
			DECLARE p_errorstate VARCHAR(4000);
			DECLARE p_errorline VARCHAR(4000);
			BEGIN									
				p_errormessage:= SQLERRM;
				p_errorstate:= SQLSTATE;
				GET STACKED DIAGNOSTICS p_errorline = PG_EXCEPTION_CONTEXT;

				INSERT INTO tbl_error_log
				(
					error_name,error_callstack,error_method,created_on
				)		
				SELECT p_errorline,p_errormessage||'fn_web_insert_update_streetlight_arms',p_errorstate,timezone('Asia/Kolkata'::text, now());
				sql_query := 'SELECT json_build_object(''responseCode'',201,''responseMessage'',''failed'')::text as data';																					 
				RETURN QUERY EXECUTE sql_query;
			END;
			

	END;
$BODY$;

--------------------------________________________________________________________________________________________________1/7/24
select * from shp_street_lights order by gid desc limit 10
select * from 	public.tbl_web_street_arms limit 10
select * from shp_street_lights limit 10


ALTER TABLE public.tbl_web_street_arms
ADD CONSTRAINT pk_pole_id(pol)
FOREIGN KEY (gid)
REFERENCES public.shp_street_lights (gid)
ON DELETE CASCADE
ON UPDATE CASCADE;


ALTER TABLE public.tbl_web_street_arms
add CONSTRAINT pk_street_light_id primary key (street_arm_id)


_________________________________________________________________________________________________________________5/7/24
<div id="map" (click)='findCoords($event)'></div>

  findCoords(evt:any) {

    const coordinate = this.map.getEventCoordinate(evt);
    alert(coordinate);

   

};
✔ find lat long on click
-------------------------------------------------------------------------------------
ol: any = window['ol'];
  osm: any;
  map: any;
  pointStyle:any;
  view: any;
  vector: any;
  source: any;
  geojsondata:any;
  // orsDirections: any;
  

constructor(private http:HttpClient){};

  ngOnInit(): void {
    this.osm = new this.ol.layer.Tile({
      source: new this.ol.source.OSM()
    });

    this.view = new this.ol.View({
      projection: 'EPSG:4326',
      center: [75.352478, 19.901054],
      zoom: 12
    });

    this.map = new this.ol.Map({
      layers: [this.osm],
      target: 'map',
      view: this.view
    });
    this.pointStyle = new this.ol.style.Style({
      image: new this.ol.style.Icon({
          anchor: [0.5, 1],
          src: 'https://apagri.infinium.management/temp/point_icon.png',
      })
  });
   
  }

✔plot ol layer map  
--------------------------------------------------------

 findCoords(evt:any) {

    const coordinate = this.map.getEventCoordinate(evt);
    console.log(coordinate);
    const transformedCoordinate = this.ol.proj.toLonLat(coordinate);
    console.log(transformedCoordinate);
    let addMarkserFeature = new this.ol.Feature({
      geometry: new this.ol.geom.Point(this.ol.proj.fromLonLat(transformedCoordinate)),
      featureProjection: 'EPSG:4326',
  });
✔find coords
-------------------------------------------------------------

 let addMarkserFeature = new this.ol.Feature({
      geometry: new this.ol.geom.Point(this.ol.proj.fromLonLat(transformedCoordinate)),
      featureProjection: 'EPSG:4326',
  });

    var vector_layer = new this.ol.layer.Vector({
      source: new this.ol.source.Vector({ features: [addMarkserFeature] })
    });

    addMarkserFeature.setStyle(this.pointStyle);
    this.map.addLayer(vector_layer);


✔plot marker->1)new feature with feature projection 
		2)new vectorlayer to new source
		3)addStyle
-----------------------------------------------------------

 
    this.http.get("https://api.openrouteservice.org/v2/directions/driving-car?api_key=5b3ce3597851110001cf624837d0d92fba7048cd85a8893a7148bfdb&start=72.508511,23.027203&end=70.801009,21.973743").subscribe((data)=>{
      const format = new this.ol.format.GeoJSON();
      const features = format.readFeatures(data, {
        featureProjection: 'EPSG:3857' // Ensure the projection is correct
      });
      this.source.addFeatures(features);
    }, error => {
      console.error('Error fetching route data:', error);
    });
  
    this.map.addLayer(this.vector);
✔  create path using coords (ors api used)

another method of ors to create path:

    this.orsDirections = new Openrouteservice.Directions({
      api_key: "5b3ce3597851110001cf624837d0d92fba7048cd85a8893a7148bfdb",
      host: "https://api.openrouteservice.org"
    });

    this.getDirections([75.352478, 19.901054], [72.877426, 19.076090]);

✔  create path using coords (ors api and method used)
------------------------------------------------------------------
working code on 3-7-24

import { Component, OnInit } from '@angular/core';
import Openrouteservice from 'openrouteservice-js';
import GeoJSON from 'geojson';
import { HttpClient } from '@angular/common/http';


@Component({
  selector: 'app-direction',
  standalone: true,
  templateUrl: './direction.component.html',
  styleUrls: ['./direction.component.scss']
})
export class DirectionComponent implements OnInit {
  ol: any = window['ol'];
  state = "closed";
  osm: any;
  map: any;
  source = new this.ol.source.Vector();

  vector = new this.ol.layer.Vector({
    source: this.source,
    style: new this.ol.style.Style({
      stroke: new this.ol.style.Stroke({
        color: '#0efa7d',
        width: 4
      })
    })
  });

  view: any;
  orsDirections: any;
  geojsondata:any;
constructor(private http:HttpClient){};

  ngOnInit(): void {
    this.osm = new this.ol.layer.Tile({
      source: new this.ol.source.OSM()
    });

    this.view = new this.ol.View({
      projection: 'EPSG:3857',
      center: this.ol.proj.fromLonLat([75.352478, 19.901054]),
      zoom: 12
    });

    this.map = new this.ol.Map({
      layers: [this.osm],
      target: 'map',
      view: this.view
    });

   
    this.http.get("https://api.openrouteservice.org/v2/directions/driving-car?api_key=5b3ce3597851110001cf624837d0d92fba7048cd85a8893a7148bfdb&start=72.508511,23.027203&end=70.801009,21.973743").subscribe((data)=>{
      const format = new this.ol.format.GeoJSON();
      const features = format.readFeatures(data, {
        featureProjection: 'EPSG:3857' // Ensure the projection is correct
      });
      this.source.addFeatures(features);
    }, error => {
      console.error('Error fetching route data:', error);
    });
  
    this.map.addLayer(this.vector);
    // this.orsDirections = new Openrouteservice.Directions({
    //   api_key: "5b3ce3597851110001cf624837d0d92fba7048cd85a8893a7148bfdb",
    //   host: "https://api.openrouteservice.org"
    // });

    // Example of fetching directions
    // this.getDirections([75.352478, 19.901054], [72.877426, 19.076090]);
  }

  getDirections(start: number[], end: number[]): void {
    this.orsDirections.calculate({
      coordinates: [start, end],
      profile: 'driving-car',
      format: 'geojson'
    })
    .then((json: any) => {
      console.log(json);

      // Assuming geojson contains a feature collection
      const features = new this.ol.format.GeoJSON().readFeatures(json, {
        featureProjection: 'EPSG:3857'
      });

      this.source.addFeatures(features);
    })
    .catch((error: any) => {
      console.error(error);
    });
  }
}
----------------------------------------------
5-7-24 todays cod enot working

import { Component, OnInit } from '@angular/core';
import Openrouteservice from 'openrouteservice-js';
import GeoJSON from 'geojson';
import { HttpClient } from '@angular/common/http';
import { SharedModule } from 'src/app/theme/shared/shared.module';
import { NgbDropdownModule } from '@ng-bootstrap/ng-bootstrap';
import { fromLonLat,toLonLat, transform } from 'ol/proj';

@Component({
  selector: 'app-direction',
  imports:[SharedModule, NgbDropdownModule],
  standalone: true,
  templateUrl: './direction.component.html',
  styleUrls: ['./direction.component.scss']
})
export class DirectionComponent implements OnInit {
  ol: any = window['ol'];
  osm: any;
  map: any;
  pointStyle:any;
  view: any;
  vector: any;
  source: any;
  geojsondata:any;
  orsDirections: any;
  

constructor(private http:HttpClient){

  this.orsDirections = new Openrouteservice.Directions({
    api_key: "5b3ce3597851110001cf624837d0d92fba7048cd85a8893a7148bfdb",
    host: "https://api.openrouteservice.org"
  });
};

ngOnInit(): void {
  // Initialize OpenStreetMap layer
  this.osm = new this.ol.layer.Tile({
    source: new this.ol.source.OSM()
  });

  // Initialize map view with EPSG:3826 projection
  this.view = new this.ol.View({
    projection: 'EPSG:3826',
    center: [12982929.22, 4832347.66], // Example center coordinates in EPSG:3826
    zoom: 12
  });

  // Initialize vector source for features
  this.source = new this.ol.source.Vector();

  // Initialize vector layer for displaying features
  this.vector = new this.ol.layer.Vector({
    source: this.source
  });

  // Initialize the map with layers and view
  this.map = new this.ol.Map({
    layers: [this.osm, this.vector],
    target: 'map',
    view: this.view
  });

  // Style for the marker point
  this.pointStyle = new this.ol.style.Style({
    image: new this.ol.style.Icon({
      anchor: [0.5, 1],
      src: 'https://apagri.infinium.management/temp/point_icon.png',
    })
  });

  // Fetch and display directions
  this.getDirections([12982929.22, 4832347.66], [13023921.18, 4826952.83]); // Example coordinates in EPSG:3826
}

 
  getDirections(start: number[], end: number[]): void {
    this.orsDirections.calculate({
      coordinates: [transform(start, 'EPSG:3826', 'EPSG:4326'), transform(end, 'EPSG:3826', 'EPSG:4326')],
      profile: 'driving-car',
      format: 'geojson'
    })
    .then((json: any) => {
      console.log(json);

      // Assuming geojson contains a feature collection
      const features = new this.ol.format.GeoJSON().readFeatures(json, {
        featureProjection: 'EPSG:3826'
      });

      this.source.addFeatures(features);
    })
    .catch((error: any) => {
      console.error(error);
    });
  }

  

  findCoords(evt: any): void {
    const coordinate = this.map.getEventCoordinate(evt);
    console.log('Event coordinate:', coordinate);
  
    const transformedCoordinate = transform(coordinate, 'EPSG:4326', 'EPSG:3826');
    console.log('Transformed coordinate:', transformedCoordinate);
  
    let addMarkerFeature = new this.ol.Feature({
      geometry: new this.ol.geom.Point(transformedCoordinate)
    });
  
    addMarkerFeature.setStyle(this.pointStyle);
  
    this.source.addFeature(addMarkerFeature);
  }
  

}
// findPath(){ 
//   this.http.get("https://api.openrouteservice.org/v2/directions/driving-car?api_key=5b3ce3597851110001cf624837d0d92fba7048cd85a8893a7148bfdb&start=72.508511,23.027203&end=70.801009,21.973743").subscribe((data)=>{
//     const format = new this.ol.format.GeoJSON();
//     const features = format.readFeatures(data, {featureProjection: 'EPSG:3857' });
//     this.source.addFeatures(features);
//   }, error => {
//     console.error('Error fetching route data:', error);
//   });
//   this.map.addLayer(this.vector);
// }


































________________________________________________________________________________________________________8/7/24


Coordinate Systems: The first pair [72.5086395, 23.0208241] appears to be in decimal degrees, commonly used in geographic coordinates (latitude and longitude). The second pair [8071624.827253043, 2634537.1545541277] seems to be in meters or another projected coordinate system, which could be used in mapping and GIS applications.

Units: The first pair uses degrees (latitude and longitude), where the numbers represent angular measurements on the Earth's surface. The second pair uses meters or another linear unit, representing distances from a specific origin point in a projected coordinate system.

Context: The interpretation of these coordinates depends on the context in which they are used. Geographic coordinates (like the first pair) are used for locating positions on the Earth's surface, while projected coordinates (like the second pair) are used for mapping and measuring distances in a specific region or projection.

✔understand lat long -> degrees wale for positioning and meters wale for measuring



--------------------------------------------------------------------
import { Component, OnInit, ElementRef, ViewChild } from '@angular/core';
import Openrouteservice from 'openrouteservice-js';
import { transform } from 'ol/proj';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import GeoJSON from 'ol/format/GeoJSON';
import VectorSource from 'ol/source/Vector';
import VectorLayer from 'ol/layer/Vector';
import Style from 'ol/style/Style';
import Stroke from 'ol/style/Stroke';
@Component({
  selector: 'app-direction',
  standalone: true,
  imports: [CommonModule,],
  templateUrl: './direction.component.html',
  styleUrls: ['./direction.component.scss']
})
export class DirectionComponent implements OnInit {
  ol: any = window['ol'];
  state = "closed";
  osm: any;
  map: any;
  source = new this.ol.source.Vector();

  vector = new this.ol.layer.Vector({
    source: this.source,
    style: new this.ol.style.Style({
      stroke: new this.ol.style.Stroke({
        color: '#0e97fa',
        width: 4
      })
    })
  });

  view: any;
  orsDirections: any;
  pointStyle: any;
  start: any[];
  end: any[];
  current_coords: number[];
  @ViewChild('input_start') source_element: ElementRef | undefined;
  @ViewChild('input_end') destination_element: ElementRef | undefined;
  ngOnInit(): void {
    this.osm = new this.ol.layer.Tile({
      source: new this.ol.source.OSM()
    });

    this.view = new this.ol.View({
      projection: 'EPSG:3857',
      center: this.ol.proj.fromLonLat([75.352478, 19.901054]),
      zoom: 12
    });

    this.map = new this.ol.Map({
      layers: [this.osm],
      target: 'map',
      view: this.view
    });
    this.pointStyle = new this.ol.style.Style({
      image: new this.ol.style.Icon({
        anchor: [0.5, 1],
        src: 'https://apagri.infinium.management/temp/point_icon.png',
      })
    });

    this.map.addLayer(this.vector);

    this.orsDirections = new Openrouteservice.Directions({
      api_key: "5b3ce3597851110001cf624837d0d92fba7048cd85a8893a7148bfdb",
      host: "https://api.openrouteservice.org"
    });

    // Example of fetching directions
    // this.getDirections([75.352478, 19.901054], [72.877426, 19.076090]);
  }

  getDirections(start: number[], end: number[]): void {
    this.orsDirections.calculate({
      coordinates: [start, end],
      profile: 'driving-car',
      format: 'geojson'
    })
    .then((json: any) => {
      console.log(json);

      let features = new this.ol.format.GeoJSON().readFeatures(json, {
        featureProjection: 'EPSG:3857'
      });

      this.source.addFeatures(features);
      this.count=0;
    })
    .catch((error: any) => {
      console.error(error);
    });
  }
count=0
  findCoords(evt: any) {
    if(this.isSourcePickActive){
      const coordinate = this.map.getEventCoordinate(evt);
      console.log('Event coordinate:', coordinate);
    
      const transformedCoordinate = this.ol.proj.toLonLat(coordinate);
      console.log('Transformed coordinate:', transformedCoordinate);
 return transformedCoordinate 
    }
  }

addMarker(geo_coords){

  let addMarkserFeature = new this.ol.Feature({
    geometry: new this.ol.geom.Point(this.ol.proj.fromLonLat(geo_coords)),
    featureProjection: 'EPSG:3826',
});

  var vector_layer = new this.ol.layer.Vector({
    source: new this.ol.source.Vector({ features: [addMarkserFeature] })
  });

  addMarkserFeature.setStyle(this.pointStyle);
  this.map.addLayer(vector_layer);
  

}

  isSourcePickActive: boolean = false;
  isDestinationPickActive: boolean = false;

  pickLocation(value:any,event:any) {
    if(value=='start')
    {
      this.isSourcePickActive = !this.isSourcePickActive;
       this.start=this.findCoords(event);
       console.log(this.start);
       this.source_element.nativeElement.value =  this.start;
       this.addMarker(this.start);
      this.isSourcePickActive = !this.isSourcePickActive;
    }
    else{
      this.isDestinationPickActive = !this.isDestinationPickActive;
      this.end=this.findCoords(event);
      console.log(this.end);
      this.destination_element.nativeElement.value =  this.end;
      this.addMarker(this.end);
      this.isDestinationPickActive = !this.isDestinationPickActive;
    }
   
  }

 

  getCurrentLocation(value:any): void {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(position => {
        this.current_coords = [position.coords.longitude, position.coords.latitude];
        console.log('coords',this.current_coords);
        this.addMarker(this.current_coords);
        if(value=='start'){
          this.start=this.current_coords;
          console.log(this.start);
          this.source_element.nativeElement.value =  this.start;
        }
        else{

          this.end=this.current_coords;
          console.log(this.end);
          this.destination_element.nativeElement.value =  this.end;
        }
        

        // const currentLocation = this.ol.proj.fromLonLat(coords);
        // console.log('currentLocation',currentLocation);
      
      //   const marker =  new this.ol.Feature({
      //     geometry: new this.ol.geom.Point(currentLocation),featureProjection: 'EPSG:3826'
      //   });

      //   const vectorSource = new  this.ol.source.VectorSource({
      //     features: [marker]
      //   });
      //   const vectorLayer = new this.ol.layerVectorLayer({
      //     source: vectorSource
      //   });
      //   marker.setStyle(this.pointStyle);
      //   this.map.addLayer(vectorLayer);

      //   // Center map on current location
      //   this.map.getView().setCenter(currentLocation);
      //   this.map.getView().setZoom(18);

      //   // Use ORS API to get routing information
      //   const ors = new Openrouteservice({
      //     api_key: '5b3ce3597851110001cf624837d0d92fba7048cd85a8893a7148bfdb' // Replace with your ORS API key
      //   });

      //   ors.directions({
      //     coordinates: [
      //       coords, // current location
      //       [8.681495, 49.41461] // end point (Heidelberg, Germany)
      //     ],
      //     profile: 'driving-car',
      //     format: 'geojson'
      //   }).then((response: any) => {
      //     const routeGeoJSON = new GeoJSON().readFeatures(response);
      //     const routeVectorSource = new VectorSource({
      //       features: routeGeoJSON
      //     });
      //     const routeVectorLayer = new VectorLayer({
      //       source: routeVectorSource,
      //       style: new Style({
      //         stroke: new Stroke({
      //           color: '#ffcc33',
      //           width: 5
      //         })
      //       })
      //     });
      //     this.map.addLayer(routeVectorLayer);
      //   }).catch((error: any) => {
      //     console.error('Error fetching routing information:', error);
      //   });

      // }, error => {
      //   console.error('Geolocation error:', error);
      });
    }
     else {
      alert('Geolocation is not supported by your browser.');
    }
  }

  findRoute(){
    console.log('this.start, this.end',this.start, this.end)
    this.getDirections(this.start, this.end);
  }
  clear(){
    this.start=[''];
    this.end=[''];
    this.source_element.nativeElement.value =  this.start;
    this.destination_element.nativeElement.value =  this.end;
   
  }
}
✔inital code for direction componenet(not working)
_________________________________________________________________9/7/24

						sql_query := 'SELECT json_build_object(''responseCode'',200,''data'',COALESCE(to_json(array_agg(data1)), 
										''[]''),''responseMessage'',''ok'')::text as data
										FROM (
											SELECT  
											p.parent_layer_id,
											p.parent_layer_name,
											p.status,

											(array_to_json(array( select json_build_object(
														''id'',lm.id,
														''layer_name'',lm.layer_name,
														''visible'',lm.visible,
														''table_name'',lm.table_name,
														''layer_id'',lm.layer_id,
														''geometry_type'',lm.geometry_type,
														''service_url'',lm.service_url,
														''mobile_service_url'',lm.mobile_service_url,
														''parent_layer'',(select parent_layer_name from public.tbl_parent_layer_master pm WHERE pm.parent_layer_id = lm.parent_layer),
														''is_combined_service'',lm.is_combined_service,
														''is_info_popup'',lm.is_info_popup,
														''is_attribute_info'',lm.is_attribute_info,
														''defination'',lm.defination 
														) FROM public.tbl_web_layer_master AS lm WHERE lm.status is true and lm.parent_layer = p.parent_layer_id order by lm.layer_seq desc
											))) AS child_layer

										from public.tbl_parent_layer_master p WHERE p.status is true and p.parent_layer_name in (''Public Service'' , ''Property'', ''Health'' , ''New Projects'' , ''City Amenities'' , ''Education Department'' , ''Health Department'' , ''Layers'',''Classified Satellite Image'',''Satellite Image'',''Elevation Model'',''Disaster Management'',''Assessment Department'') order by p.parent_layer_id)data1;';
	 >>make it work
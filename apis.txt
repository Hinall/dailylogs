25/5/24
	        @ApiIgnore
			@RequestMapping(value = "/get_files", method = RequestMethod.POST)
	    public ResponseEntity<?> getFile(@RequestBody String jsonInput) {
	  		  JSONObject jsonObject = new JSONObject(jsonInput);
	        String fileName = jsonObject.getString("images");
	        String directoryPath = jsonObject.getString("directorypath");
	        String[] fileNameArr = fileName.split(",");
	        File dir = new File(directoryPath);
	        Map<String, byte[]> filesContent = new HashMap<>();

	        try {
	            for (String name : fileNameArr) {
	                Path path = Paths.get(dir + File.separator + name);
	                byte[] fileBytes = Files.readAllBytes(path);
	                filesContent.put(path.getFileName().toString(), fileBytes);
	            }
	            return ResponseEntity.ok(filesContent);
	        } catch (IOException e) {
	            e.printStackTrace();
	            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("File not found");
	        }
	    }
	

	  @ApiIgnore
		@RequestMapping(value = "/delete_files", method = RequestMethod.POST)
	    public ResponseEntity<?> deleteSpecifiedFiles(@RequestBody String jsonInput) {
		  JSONObject jsonObject = new JSONObject(jsonInput);
	        String fileNames = jsonObject.getString("images");
	        String uploadDir = jsonObject.getString("directorypath");
	        String[] fileNameArr = fileNames.split(",");
	        List<String> deletedFiles = new ArrayList<>();
	        List<String> notFoundFiles = new ArrayList<>();
	        for (String fileName : fileNameArr) {
	            Path path = Paths.get(uploadDir, fileName);
	            try {
	                if (Files.exists(path)) {
	                    Files.delete(path);
	                    deletedFiles.add(fileName);
	                } else {
	                    notFoundFiles.add(fileName);
	                }
	            } catch (IOException e) {
	                e.printStackTrace();
	                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Failed to delete files");
	            }
	        }

	        Map<String, List<String>> response = new HashMap<>();
	        response.put("deletedFiles", deletedFiles);
	        response.put("notFoundFiles", notFoundFiles);

	        return ResponseEntity.ok(response);
	    }
29-05-24
        @ApiIgnore
			@RequestMapping(path = "/get_files/{imagetype}/{imagename}", method = RequestMethod.GET)
	    public ResponseEntity<?> getFile(@PathVariable("imagetype") String imageType,
	    		@PathVariable("imagename") String imageName) throws IOException {

	        	byte[] fileContent = null;
	        	Path path = Paths.get("D:/Amnex/digital_twin-Angular/digital_twin_frontend/src/app/demo/project-management/images", imageType,imageName);
	        	System.out.println("Image " +path.toString());
	            if (Files.exists(path)) {
	            	fileContent = Files.readAllBytes(path);
	          
	                System.out.println("Image " +path.toString());
	            } else {
	                throw new IOException("File not found: " + imageName);
	            }
	            HttpHeaders headers = new HttpHeaders();
                headers.setContentType(MediaType.parseMediaType("image/png"));
                headers.add("Content-Disposition", "inline;filename=" + imageName);
                headers.setCacheControl("must-revalidate, post-check=0, pre-check=0");
                return new ResponseEntity<byte[]>(fileContent, headers, HttpStatus.OK);
	    }
30april
   <div class="container mt-5">
            <ngb-carousel (slide)="slideActivate($event)">
                <ng-template ngbSlide>
                    <div class="picsum-img-wrapper">
                        <img src="http://localhost:8090/digitaltwin/dashboard/get_files/hh.png" alt="Angular Carousel 1"
                            class="d-block w-100" />
                    </div>
                    <div class="carousel-caption">
                        <h3>Title Goes Here</h3>
                        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>
                    </div>
                </ng-template>
                <ng-template ngbSlide>
                    <div class="picsum-img-wrapper">
                        <img src="http://localhost:8090/digitaltwin/dashboard/get_files/ss.png"
                            alt="Angular Carousel 2" />
                    </div>
                    <div class="carousel-caption">
                        <h3>Title Goes Here</h3>
                        <p>Consectetur tortor volutpat pretium.</p>
                    </div>
                </ng-template>
            </ngb-carousel>
        </div>
	31april
//save
	    private void saveFile(MultipartFile file, String directory) throws IOException {
	        String filename = file.getOriginalFilename();
	        File dir = new File(directory);
	        if (!dir.exists()) {
	            dir.mkdirs();
	        }
	        Path filePath = Paths.get(directory, filename);
	        Files.delete(filePath);
	    }
//	delete    
	    private void deleteFile(String filename, String directory) throws IOException {
	   
	        File dir = new File(directory);
	        if (!dir.exists()) {
	            dir.mkdirs();
	        }
	        Path filePath = Paths.get(directory, filename);
	        Files.delete(filePath);
	    }  
//		fetch   
	    private ResponseEntity<byte[]> fetchFile(String filename, String directory) throws IOException {
	   
	    	Path path = Paths.get(directory);
            if (Files.exists(path)) {
            	return ResponseEntity.ok(Files.readAllBytes(path));
            } else {
                throw new IOException("File not found: " + filename);
            }
           
	    } 
       @DeleteMapping("/delete_files/{foldername}/{filename}")
	        public ResponseEntity<?> deleteSpecifiedFiles(
	                @PathVariable("filename") String fileName,
	                @PathVariable("foldername") String folderName) {

	            String dir;
	            if ("images".equals(folderName)) {
	                dir = "D:/Amnex/digital_twin-Angular/digital_twin_frontend/src/app/demo/project-management/images";
	            } else {
	                dir = "D:/Amnex/digital_twin-Angular/digital_twin_frontend/src/app/demo/project-management/documents";
	            }

	            try {
	                deleteFile(fileName, dir);
	                return ResponseEntity.status(HttpStatus.OK).body("File deleted successfully.");
	            } catch (IOException e) {
	                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error while deleting file: " + e.getMessage());
	            }
	        }
//	    	delete    
	 	   
	        private void deleteFile(String fileName, String dir) throws IOException {
	            Path path = Paths.get(dir, fileName);
	            Files.deleteIfExists(path);
	        }

---------------------------------------------------------------------
	        @ApiIgnore
			@RequestMapping(path = "/get_files/{foldername}/{filename}", method = RequestMethod.GET)
	    public ResponseEntity<?> getFile(
	    		@PathVariable("filename") String imageName,@PathVariable("foldername") String foldername) throws IOException {
	        	String dir="";
	        	if(foldername=="images") {
	        		dir="D:/Amnex/digital_twin-Angular/digital_twin_frontend/src/app/demo/project-management/images";
	        	}
	        	else {
	        		dir="D:/Amnex/digital_twin-Angular/digital_twin_frontend/src/app/demo/project-management/documents";

	        	}
	        	try {
	        		 byte[] fileContent = fetchFile(imageName, dir);
	                 ByteArrayResource resource = new ByteArrayResource(fileContent);

	                 HttpHeaders headers = new HttpHeaders();
	                 headers.add(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" + imageName + "\"");
	                 headers.add(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_OCTET_STREAM_VALUE);

	                 return ResponseEntity.ok()
	                         .headers(headers)
	                         .contentLength(fileContent.length)
	                         .body(resource);
	        	
	        } catch (IOException e) {
	            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Error while fetching file: " + e.getMessage());
	        }        	
	    }
//			fetch   
		    private byte[] fetchFile(String filename, String directory) throws IOException {
		   
		    	Path path = Paths.get(directory);
	            if (Files.exists(path)) {
	            	return Files.readAllBytes(path);
	            } else {
	                throw new IOException("File not found: " + filename);
	            }
	           
		    }
-------------------------------------------------------------------------------
	
	  @RequestMapping(value = "/upload_files", method = RequestMethod.POST, consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
	    public ResponseEntity<?> addfile(
	            @RequestParam(value = "images", required = false) MultipartFile[] images,
	            @RequestParam(value = "documents", required = false) MultipartFile[] documents,
	            @RequestParam(value = "jsonData", required = true) String folderName,
	            HttpServletRequest httpServletRequest,
	            HttpServletResponse httpServletResponse) {

	        String imageDirectory = "D:/Amnex/digital_twin-Angular/digital_twin_frontend/src/app/demo/project-management/images";
	        String documentDirectory = "D:/Amnex/digital_twin-Angular/digital_twin_frontend/src/app/demo/project-management/documents";

	        try {
	            // Process uploaded images
	            if (images != null) {
	                for (MultipartFile file : images) {
	                    saveFile(file, imageDirectory);
	                }
	            }

	            // Process uploaded documents
	            if (documents != null) {
	                for (MultipartFile file : documents) {
	                    saveFile(file, documentDirectory);
	                }
	            }

	        } catch (IOException e) {
	            e.printStackTrace();
	            return ResponseEntity.status(HttpServletResponse.SC_INTERNAL_SERVER_ERROR)
	                    .body("Error occurred while uploading files: " + e.getMessage());
	        }

	        return ResponseEntity.ok("Files uploaded successfully.");
	    }
//save
	    private void saveFile(MultipartFile file, String directory) throws IOException {
	        String filename = file.getOriginalFilename();
	        File dir = new File(directory);
	        if (!dir.exists()) {
	            dir.mkdirs();
	        }
	        Path filePath = Paths.get(directory, filename);
	        Files.delete(filePath);
	    }


<mat-tab-group>
    <mat-tab md-colors="{color:'#76ee59'}" label="Projects">

        <div class="row">
            <kendo-grid [kendoGridBinding]="projectData" [style.height.%]="100" [pageSize]="10" filterable="menu"
                [skip]="0" [pageable]="true" [sortable]="true">
                <ng-template kendoGridToolbarTemplate>
                    <div class="export-template">
                        <button class=" btn btn-dark export-new excel" (click)="exportExcel(excelexport)">Export
                            toExcel</button>
                    </div>
                    <div class="export-template">
                        <button class="export-new excel btn btn-dark" (click)="openEditDialog('add',0)">Add new
                            project</button>
                    </div>
                </ng-template>
                <ng-container *ngFor="let data of grid_fields">
                    <kendo-grid-column *ngFor="let data of grid_fields" field="{{data.fields}}" title="{{data.title}}"
                        [hidden]="data.hide" [width]="250"></kendo-grid-column>
                </ng-container>
                <kendo-grid-column field="Action" title="Action" [width]="200" [sticky]="true" [columnMenu]="false">
                    <ng-template kendoGridCellTemplate let-dataItem>
                        <div class="d-flex gap-2">
                            <button kendoButton size="small" class="d-flex align-items-center btn btn-dark"
                                rounded="small" fillMode="outline" themeColor="base"
                                (click)="openEditDialog('edit',dataItem.project_id)">
                                Edit
                            </button>
                            <button class="d-flex align-items-center  btn btn-dark"
                                (click)="delete(dataItem.project_id)">
                                delete
                            </button>
                        </div>
                    </ng-template>
                </kendo-grid-column>
                <!-- Excel -->
                <kendo-excelexport fileName="Reports.xlsx" [data]="projectData" #excelexport>
                    <ng-container *ngFor="let data of grid_fields">
                        <kendo-excelexport-column field="{{data.fields}}" title="{{data.title}}">
                        </kendo-excelexport-column>
                    </ng-container>
                </kendo-excelexport>
            </kendo-grid>
        </div>

        <!-- project form dialog -->
        <kendo-dialog class="custom-dialog handler-dialog" title="form" *ngIf="editDialog" [minWidth]="250"
            [width]="1024" (close)="closeEditDialog()">
            <h1>{{btnName}}</h1>

            <form [formGroup]="projectForm" (ngSubmit)="onSubmit(btnSubmit)" style="height: 600px; overflow-y: auto;"
                enctype="multipart/form-data">
                <div>
                    <div class="form-group">
                        <label for="first-name"> Project Name</label>
                        <input type="text" id="username" class="form-control" formControlName="project_name">
                        <div *ngIf="projectForm.get('project_name').invalid && (projectForm.get('project_name').dirty ||projectForm.get('project_name').touched)"
                            class="alert alert-danger">
                            <div *ngIf="projectForm.get('project_name').errors?.['required']">
                                project name is required.
                            </div>
                        </div>
                    </div>
                </div>
                <div>
                    <div class="form-group">
                        <label for="first-name">Location Name</label>
                        <input type="text" id="location_name" class="form-control" formControlName="location_name">
                        <div *ngIf="projectForm.get('location_name').invalid && (projectForm.get('location_name').dirty ||projectForm.get('location_name').touched)"
                            class="alert alert-danger">
                            <div *ngIf="projectForm.get('location_name').errors?.['required']">
                                location name is required.
                            </div>
                        </div>
                    </div>
                </div>

                <div>
                    <div class="form-group">
                        <label for="first-name">contractor_name</label>
                        <input type="text" id="contractor_name" class="form-control" formControlName="contractor_name">
                        <div *ngIf="projectForm.get('contractor_name').invalid && (projectForm.get('contractor_name').dirty ||projectForm.get('contractor_name').touched)"
                            class="alert alert-danger">
                            <div *ngIf="projectForm.get('contractor_name').errors?.['required']">
                                contractor_name is required.
                            </div>
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <label for="contractor_number">contractor_number</label>
                    <input type="text" id="" class="form-control" formControlName="contractor_number">

                    <div *ngIf="projectForm.get('contractor_number').invalid && (projectForm.get('contractor_number').dirty || projectForm.get('contractor_number').touched)"
                        class="alert alert-danger">
                        <div *ngIf="projectForm.get('contractor_number').errors?.['required']">
                            contactno is required.
                        </div>
                        <div *ngIf="projectForm.get('contractor_number').errors?.['pattern']">Invalid contact
                            number (should be a
                            10-digit number)</div>
                    </div>
                </div>

                <br />

                <div class="form-group">
                    <label for="contractor_email">Email: </label>
                    <input type="text" formControlName="contractor_email" class="form-control" autocomplete="noac">
                    <div *ngIf="projectForm.get('contractor_email').invalid && (projectForm.get('contractor_email').dirty || projectForm.get('contractor_email').touched)"
                        class="alert alert-danger">
                        <div *ngIf="projectForm.get('contractor_email').errors['required']">Email is
                            required
                        </div>

                        <div *ngIf="projectForm.get('contractor_email').errors['email']">Please enter a
                            valid email address</div>
                    </div>
                </div>
                <br>
                <div *ngIf="isAdd">


                </div>
                <br>
                <div style="display: flex; justify-content: space-between;">
                    <div class="form-group" style="flex: 1; margin-right: 10px;">
                        <label>Start Date</label>
                        <mat-form-field style="width: 100%;">
                            <input matInput [matDatepicker]="startPicker" formControlName="start_date">
                            <mat-datepicker-toggle matSuffix [for]="startPicker"></mat-datepicker-toggle>
                            <mat-datepicker #startPicker></mat-datepicker>
                        </mat-form-field>
                        <div *ngIf="projectForm.get('start_date').invalid && (projectForm.get('start_date').dirty || projectForm.get('start_date').touched)"
                            class="alert alert-danger">
                            <div *ngIf="projectForm.get('start_date').errors?.['required']">
                                start_date is required.
                            </div>
                        </div>
                    </div>
                    <div class="form-group" style="flex: 1; margin-left: 10px;">
                        <label>End Date</label>
                        <mat-form-field style="width: 100%;">
                            <input matInput [matDatepicker]="endPicker" formControlName="end_date">
                            <mat-datepicker-toggle matSuffix [for]="endPicker"></mat-datepicker-toggle>
                            <mat-datepicker #endPicker></mat-datepicker>
                        </mat-form-field>
                        <div *ngIf="projectForm.get('end_date').invalid && (projectForm.get('end_date').dirty || projectForm.get('end_date').touched)"
                            class="alert alert-danger">
                            <div *ngIf="projectForm.get('end_date').errors?.['required']">
                                End date is required.
                            </div>
                        </div>
                    </div>
                </div>

                <br>




                <br>
                <div>
                    <div class="form-group">
                        <label for="first-name">total cost</label>
                        <input type="text" id="total_cost" class="form-control" formControlName="total_cost">
                        <div *ngIf="projectForm.get('total_cost').invalid && (projectForm.get('total_cost').dirty ||projectForm.get('total_cost').touched)"
                            class="alert alert-danger">
                            <div *ngIf="projectForm.get('total_cost').errors?.['required']">
                                total_cost is required.
                            </div>
                        </div>
                    </div>
                </div>


                <!--  -->
                <button class="btn btn-dark" type="submit">{{btnSubmit}}</button>
                <button class="btn btn-dark" (click)="closeEditDialog()">close</button>
            </form>

            {{this.projectForm.value|json}}
        </kendo-dialog>




    </mat-tab>

    <mat-tab label="Milestones">
        <div class="form-group">
            <label style="color: #48c1f1; font-size: larger;"> select project:</label>
            <select style="border-color: #48c1f1; " id="project_id" (change)="loadMilestoneOnChange($event)"
                class="form-control">
                <option value="">none</option>
                <option class="form-control" *ngFor="let p of projects" [value]="p.project_id">{{ p.project_name }}
                </option>
            </select>
        </div>


        <!-- grid -->
        <div class="row">

            <kendo-grid [kendoGridBinding]="milestoneData" [style.height.%]="100" [pageSize]="10" filterable="menu"
                [skip]="0" [pageable]="true" [sortable]="true">

                <ng-template kendoGridToolbarTemplate let-dataItem>
                    <div class="export-template">
                        <button class=" btn btn-dark export-new excel" (click)="exportExcel(excelexport)">Export to
                            Excel</button>
                    </div>

                    <div class="export-template">
                        <button class="export-new excel btn btn-dark" (click)="openEditDialogMilestone('add','0')">Add
                            new
                            Milestone</button>
                    </div>
                </ng-template>
                <ng-container>
                    <!-- Container element to handle both *ngFor and *ngIf -->
                    <ng-container *ngFor="let data of grid_fields_milestone">
                        <kendo-grid-column *ngIf="data.fields !== 'image' && data.fields !== 'document'"
                            [field]="data.fields" [title]="data.title" [hidden]="data.hide" [width]="250">
                        </kendo-grid-column>
                    </ng-container>

                    <!-- Image Column -->
                    <kendo-grid-column field="image" title="Image" [hidden]="false" [width]="150">
                        <ng-template kendoGridCellTemplate let-dataItem>
                            {{dataItem.image}}
                            <button kendoButton size="small" class="btn btn-dark"
                                (click)="fetchImageDocs(dataItem.milestone_id , 'image')">
                                View Image
                            </button>
                        </ng-template>
                    </kendo-grid-column>

                    <!-- Document Column -->
                    <kendo-grid-column field="document" title="Document" [hidden]="false" [width]="150">
                        <ng-template kendoGridCellTemplate let-dataItem>
                            {{dataItem.document}}
                            <button kendoButton size="small" class="btn btn-dark"
                                (click)="fetchImageDocs(dataItem.milestone_id , 'document')">
                                View Document
                            </button>
                        </ng-template>
                    </kendo-grid-column>

                    <!-- Action Button Column -->
                    <kendo-grid-column field="Action" title="Action" [width]="150" [sticky]="true" [columnMenu]="false">
                        <ng-template kendoGridCellTemplate let-dataItem>
                            <div class="d-flex gap-2">
                                <button kendoButton size="small" class="d-flex align-items-center btn btn-dark"
                                    rounded="small" fillMode="outline" themeColor="base"
                                    (click)="openEditDialogMilestone('edit', dataItem.milestone_id)">
                                    Edit
                                </button>
                                <button class="d-flex align-items-center btn btn-dark"
                                    (click)="deleteMilestone(dataItem.milestone_id)">
                                    Delete
                                </button>
                            </div>
                        </ng-template>
                    </kendo-grid-column>
                </ng-container>


                <kendo-excelexport fileName="Reports.xlsx" [data]="milestoneData" #excelexport>
                    <ng-container *ngFor="let data of grid_fields_milestone">
                        <kendo-excelexport-column field="{{data.fields}}" title="{{data.title}}">
                        </kendo-excelexport-column>
                    </ng-container>
                </kendo-excelexport>
            </kendo-grid>
        </div>

    </mat-tab>


</mat-tab-group>
<kendo-dialog class="custom-dialog handler-dialog" title="form" *ngIf="editDialogMilestone" [minWidth]="250" [width]="1024" (close)="closeEditDialog()">
    <h1>{{btnNameMilestone}}</h1>

    <form [formGroup]="milestoneForm" (ngSubmit)="onSubmitMilestone(btnSubmitMilestone)" style="height: 600px; overflow-y: auto;">
        <div>
            <div class="form-group">
                <label for="first-name"> Milestone Name</label>
                <input type="text" class="form-control" formControlName="milestone_name">
                <div *ngIf="milestoneForm.get('milestone_name').invalid && (milestoneForm.get('milestone_name').dirty || milestoneForm.get('milestone_name').touched)" class="alert alert-danger">
                    <div *ngIf="milestoneForm.get('milestone_name').errors?.['required']">
                        Milestone is required.
                    </div>
                </div>
            </div>
        </div>

        <div class="form-group">
            <label for="description">Description</label>
            <input type="text" id="description" class="form-control" formControlName="description">
            <div *ngIf="milestoneForm.get('description').invalid && (milestoneForm.get('description').dirty || milestoneForm.get('description').touched)" class="alert alert-danger">
                <div *ngIf="milestoneForm.get('description').errors?.['required']">
                    Description is required.
                </div>
            </div>
        </div>

        <div class="form-group">
            <label for="status">Is Approved: </label>
            <select formControlName="is_approved" class="form-control">
                <option value="true">TRUE</option>
                <option value="false">FALSE</option>
            </select>
        </div>

        <div class="form-group">
            <label>Milestone Status:</label>
            <select class="form-control" formControlName="milestone_status">
                <option value="">Select</option>
                <option *ngFor="let s of status_list" [value]="s.status_id">{{ s.status_name }}</option>
            </select>
            <div *ngIf="milestoneForm.get('milestone_status').invalid && (milestoneForm.get('milestone_status').dirty || milestoneForm.get('milestone_status').touched)" class="alert alert-danger">
                <div *ngIf="milestoneForm.get('milestone_status').errors?.['required']">Milestone status is required.</div>
            </div>
        </div>

        <div class="form-group">
            <label>Remarks</label>
            <input type="text" class="form-control" formControlName="remarks">
            <div *ngIf="milestoneForm.get('remarks').invalid && (milestoneForm.get('remarks').dirty || milestoneForm.get('remarks').touched)" class="alert alert-danger">
                <div *ngIf="milestoneForm.get('remarks').errors?.['required']">
                    Remark is required.
                </div>
            </div>
        </div>

        <div style="display: flex; justify-content: space-between;">
            <div class="form-group" style="flex: 1; margin-right: 10px;">
                <label>Image</label>
            
                <input id="imageInput" type="file" multiple="multiple" accept="image/png,image/jpeg" (change)="onImageChange($event)" formControlName="image">
                <p *ngIf="isimgVisible">{{ milestoneForm.get('image').value  }}</p>
                <div *ngIf="milestoneForm.get('image').invalid && (milestoneForm.get('image').dirty || milestoneForm.get('image').touched)" class="alert alert-danger">
                    <div *ngIf="milestoneForm.get('image').errors?.['required']">
                        Image is required.
                    </div>
                </div>
            </div>
            <div class="form-group" style="flex: 1; margin-left: 10px;">
                <label>Document</label>
       
                <input id="docInput" class="hidden" title="sg" type="file" multiple="multiple" (change)="onDocumentChange($event)" formControlName="document">
                <p *ngIf="isdocVisible">{{ milestoneForm.get('document').value }}</p>
                <div *ngIf="milestoneForm.get('document').invalid && (milestoneForm.get('document').dirty || milestoneForm.get('document').touched)" class="alert alert-danger">
                    <div *ngIf="milestoneForm.get('document').errors?.['required']">
                        Document is required.
                    </div>
                </div>
            </div>
        </div>

        <br>
        <div style="display: flex; justify-content: space-between;">
            <div class="form-group" style="flex: 1; margin-right: 10px;">
                <label>Start Date</label>
                <mat-form-field style="width: 100%;">
                    <input matInput [matDatepicker]="mstartPicker" formControlName="start_date">
                    <mat-datepicker-toggle matSuffix [for]="mstartPicker"></mat-datepicker-toggle>
                    <mat-datepicker #mstartPicker></mat-datepicker>
                </mat-form-field>
                <div *ngIf="milestoneForm.get('start_date').invalid && (milestoneForm.get('start_date').dirty || milestoneForm.get('start_date').touched)" class="alert alert-danger">
                    <div *ngIf="milestoneForm.get('start_date').errors?.['required']">
                        Start date is required.
                    </div>
                </div>
            </div>
            <div class="form-group" style="flex: 1; margin-left: 10px;">
                <label>End Date</label>
                <mat-form-field style="width: 100%;">
                    <input matInput [matDatepicker]="mendPicker" formControlName="end_date">
                    <mat-datepicker-toggle matSuffix [for]="mendPicker"></mat-datepicker-toggle>
                    <mat-datepicker #mendPicker></mat-datepicker>
                </mat-form-field>
                <div *ngIf="milestoneForm.get('end_date').invalid && (milestoneForm.get('end_date').dirty || milestoneForm.get('end_date').touched)" class="alert alert-danger">
                    <div *ngIf="milestoneForm.get('end_date').errors?.['required']">
                        End date is required.
                    </div>
                </div>
            </div>
        </div>

     
        <button class="btn btn-dark" type="submit">{{btnSubmitMilestone}}</button>
        <button class="btn btn-dark" type="button" (click)="closeEditDialog()">Close</button>
    </form>


    <pre>{{milestoneForm.value | json}}</pre>
    <pre>{{milestoneForm.valid | json}}</pre>
</kendo-dialog>
<div class="container mt-5">
    <ngb-carousel *ngIf="fetchedDocuments && fetchedDocuments.length" (slide)="slideActivate($event)">
      <ng-template ngbSlide *ngFor="let item of fetchedDocuments">
        <div class="carousel-item-wrapper">
          <div class="picsum-img-wrapper">
            <img [src]="'D:/Amnex/digital_twin-Angular/digital_twin_frontend/src/app/demo/project-management/images' + item" class="d-block w-100 carousel-image" alt="{{item}}" />
            <p>{{ item }}</p>
          </div>
          <div class="carousel-caption">
            <h3>Title Goes Here</h3>
            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>
          </div>
        </div>
      </ng-template>
    </ngb-carousel>
  </div>
  <div class="container mt-5">
    <ngb-carousel *ngIf="fetchedImages && fetchedImages.length" (slide)="slideActivate($event)">
      <ng-template ngbSlide *ngFor="let item of fetchedImages">
        <div class="carousel-item-wrapper">
          <div class="picsum-img-wrapper">
            <img [src]="'D:/Amnex/digital_twin-Angular/digital_twin_frontend/src/app/demo/project-management/documents/' + item" class="d-block w-100 carousel-image" alt="{{item}}" />
            <p>{{ item }}</p>
          </div>
          <div class="carousel-caption">
            <h3>Title Goes Here</h3>
            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>
          </div>
        </div>
      </ng-template>
    </ngb-carousel>
  </div>



----------------------------
9:15
<mat-tab-group>
    <mat-tab md-colors="{color:'#76ee59'}" label="Projects">

        <div class="row">
            <kendo-grid [kendoGridBinding]="projectData" [style.height.%]="100" [pageSize]="10" filterable="menu"
                [skip]="0" [pageable]="true" [sortable]="true">
                <ng-template kendoGridToolbarTemplate>
                    <div class="export-template">
                        <button class=" btn btn-dark export-new excel" (click)="exportExcel(excelexport)">Export
                            toExcel</button>
                    </div>
                    <div class="export-template">
                        <button class="export-new excel btn btn-dark" (click)="openEditDialog('add',0)">Add new
                            project</button>
                    </div>
                </ng-template>
                <ng-container *ngFor="let data of grid_fields">
                    <kendo-grid-column *ngFor="let data of grid_fields" field="{{data.fields}}" title="{{data.title}}"
                        [hidden]="data.hide" [width]="250"></kendo-grid-column>
                </ng-container>
                <kendo-grid-column field="Action" title="Action" [width]="200" [sticky]="true" [columnMenu]="false">
                    <ng-template kendoGridCellTemplate let-dataItem>
                        <div class="d-flex gap-2">
                            <button kendoButton size="small" class="d-flex align-items-center btn btn-dark"
                                rounded="small" fillMode="outline" themeColor="base"
                                (click)="openEditDialog('edit',dataItem.project_id)">
                                Edit
                            </button>
                            <button class="d-flex align-items-center  btn btn-dark"
                                (click)="delete(dataItem.project_id)">
                                delete
                            </button>
                        </div>
                    </ng-template>
                </kendo-grid-column>
                <!-- Excel -->
                <kendo-excelexport fileName="Reports.xlsx" [data]="projectData" #excelexport>
                    <ng-container *ngFor="let data of grid_fields">
                        <kendo-excelexport-column field="{{data.fields}}" title="{{data.title}}">
                        </kendo-excelexport-column>
                    </ng-container>
                </kendo-excelexport>
            </kendo-grid>
        </div>

        <!-- project form dialog -->
        <kendo-dialog class="custom-dialog handler-dialog" title="form" *ngIf="editDialog" [minWidth]="250"
            [width]="1024" (close)="closeEditDialog()">
            <h1>{{btnName}}</h1>

            <form [formGroup]="projectForm" (ngSubmit)="onSubmit(btnSubmit)" style="height: 600px; overflow-y: auto;"
                enctype="multipart/form-data">
                <div>
                    <div class="form-group">
                        <label for="first-name"> Project Name</label>
                        <input type="text" id="username" class="form-control" formControlName="project_name">
                        <div *ngIf="projectForm.get('project_name').invalid && (projectForm.get('project_name').dirty ||projectForm.get('project_name').touched)"
                            class="alert alert-danger">
                            <div *ngIf="projectForm.get('project_name').errors?.['required']">
                                project name is required.
                            </div>
                        </div>
                    </div>
                </div>
                <div>
                    <div class="form-group">
                        <label for="first-name">Location Name</label>
                        <input type="text" id="location_name" class="form-control" formControlName="location_name">
                        <div *ngIf="projectForm.get('location_name').invalid && (projectForm.get('location_name').dirty ||projectForm.get('location_name').touched)"
                            class="alert alert-danger">
                            <div *ngIf="projectForm.get('location_name').errors?.['required']">
                                location name is required.
                            </div>
                        </div>
                    </div>
                </div>

                <div>
                    <div class="form-group">
                        <label for="first-name">contractor_name</label>
                        <input type="text" id="contractor_name" class="form-control" formControlName="contractor_name">
                        <div *ngIf="projectForm.get('contractor_name').invalid && (projectForm.get('contractor_name').dirty ||projectForm.get('contractor_name').touched)"
                            class="alert alert-danger">
                            <div *ngIf="projectForm.get('contractor_name').errors?.['required']">
                                contractor_name is required.
                            </div>
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <label for="contractor_number">contractor_number</label>
                    <input type="text" id="" class="form-control" formControlName="contractor_number">

                    <div *ngIf="projectForm.get('contractor_number').invalid && (projectForm.get('contractor_number').dirty || projectForm.get('contractor_number').touched)"
                        class="alert alert-danger">
                        <div *ngIf="projectForm.get('contractor_number').errors?.['required']">
                            contactno is required.
                        </div>
                        <div *ngIf="projectForm.get('contractor_number').errors?.['pattern']">Invalid contact
                            number (should be a
                            10-digit number)</div>
                    </div>
                </div>

                <br />

                <div class="form-group">
                    <label for="contractor_email">Email: </label>
                    <input type="text" formControlName="contractor_email" class="form-control" autocomplete="noac">
                    <div *ngIf="projectForm.get('contractor_email').invalid && (projectForm.get('contractor_email').dirty || projectForm.get('contractor_email').touched)"
                        class="alert alert-danger">
                        <div *ngIf="projectForm.get('contractor_email').errors['required']">Email is
                            required
                        </div>

                        <div *ngIf="projectForm.get('contractor_email').errors['email']">Please enter a
                            valid email address</div>
                    </div>
                </div>
                <br>
                <div *ngIf="isAdd">


                </div>
                <br>
                <div style="display: flex; justify-content: space-between;">
                    <div class="form-group" style="flex: 1; margin-right: 10px;">
                        <label>Start Date</label>
                        <mat-form-field style="width: 100%;">
                            <input matInput [matDatepicker]="startPicker" formControlName="start_date">
                            <mat-datepicker-toggle matSuffix [for]="startPicker"></mat-datepicker-toggle>
                            <mat-datepicker #startPicker></mat-datepicker>
                        </mat-form-field>
                        <div *ngIf="projectForm.get('start_date').invalid && (projectForm.get('start_date').dirty || projectForm.get('start_date').touched)"
                            class="alert alert-danger">
                            <div *ngIf="projectForm.get('start_date').errors?.['required']">
                                start_date is required.
                            </div>
                        </div>
                    </div>
                    <div class="form-group" style="flex: 1; margin-left: 10px;">
                        <label>End Date</label>
                        <mat-form-field style="width: 100%;">
                            <input matInput [matDatepicker]="endPicker" formControlName="end_date">
                            <mat-datepicker-toggle matSuffix [for]="endPicker"></mat-datepicker-toggle>
                            <mat-datepicker #endPicker></mat-datepicker>
                        </mat-form-field>
                        <div *ngIf="projectForm.get('end_date').invalid && (projectForm.get('end_date').dirty || projectForm.get('end_date').touched)"
                            class="alert alert-danger">
                            <div *ngIf="projectForm.get('end_date').errors?.['required']">
                                End date is required.
                            </div>
                        </div>
                    </div>
                </div>

                <br>




                <br>
                <div>
                    <div class="form-group">
                        <label for="first-name">total cost</label>
                        <input type="text" id="total_cost" class="form-control" formControlName="total_cost">
                        <div *ngIf="projectForm.get('total_cost').invalid && (projectForm.get('total_cost').dirty ||projectForm.get('total_cost').touched)"
                            class="alert alert-danger">
                            <div *ngIf="projectForm.get('total_cost').errors?.['required']">
                                total_cost is required.
                            </div>
                        </div>
                    </div>
                </div>


                <!--  -->
                <button class="btn btn-dark" type="submit">{{btnSubmit}}</button>
                <button class="btn btn-dark" (click)="closeEditDialog()">close</button>
            </form>

            {{this.projectForm.value|json}}
        </kendo-dialog>




    </mat-tab>

    <mat-tab label="Milestones">
        <div class="form-group">
            <label style="color: #48c1f1; font-size: larger;"> select project:</label>
            <select style="border-color: #48c1f1; " id="project_id" (change)="loadMilestoneOnChange($event)"
                class="form-control">
                <option value="">none</option>
                <option class="form-control" *ngFor="let p of projects" [value]="p.project_id">{{ p.project_name }}
                </option>
            </select>
        </div>


        <!-- grid -->
        <div class="row">

            <!-- <kendo-grid [kendoGridBinding]="milestoneData" [style.height.%]="100" [pageSize]="10" filterable="menu" [skip]="0" [pageable]="true" [sortable]="true">
  
        <ng-template kendoGridToolbarTemplate>
          <div class="export-template">
              <button type="button" kendoGridExcelCommand svg="file-excel" class="export-new excel" (click)="exportExcel(excelexport)">Export to Excel</button>
          </div>
        </ng-template>      
        <ng-container *ngFor="let data of grid_fields_milestone">
            <kendo-grid-column field="{{data.fields}}" title="{{data.title}}" [hidden]="data.hide" [width]="250"></kendo-grid-column>
        </ng-container>        
        
        <kendo-grid-column field="Action" title="Action" [width]="200" [columnMenu]="true">
          <ng-template kendoGridCellTemplate let-dataItem>
            <div class="d-flex gap-2">
              <button kendoButton size="small" class="d-flex align-items-center" size="small" rounded="small" fillMode="outline"
                themeColor="base">
                Delete
              </button>
              <button kendoButton size="small" class="d-flex align-items-center" id="Edit" size="small" rounded="small" fillMode="outline"
              themeColor="base">
              Edit
            </button>
            </div>
          </ng-template>
        </kendo-grid-column>
      
      </kendo-grid> -->




            <kendo-grid [kendoGridBinding]="milestoneData" [style.height.%]="100" [pageSize]="10" filterable="menu"
                [skip]="0" [pageable]="true" [sortable]="true">

                <ng-template kendoGridToolbarTemplate let-dataItem>
                    <div class="export-template">
                        <button class=" btn btn-dark export-new excel" (click)="exportExcel(excelexport)">Export to
                            Excel</button>
                    </div>

                    <div class="export-template">
                        <button class="export-new excel btn btn-dark" (click)="openEditDialogMilestone('add','0')">Add
                            new
                            Milestone</button>
                    </div>
                </ng-template>
                <ng-container>
                    <!-- Container element to handle both *ngFor and *ngIf -->
                    <ng-container *ngFor="let data of grid_fields_milestone">
                        <kendo-grid-column *ngIf="data.fields !== 'image' && data.fields !== 'document'"
                            [field]="data.fields" [title]="data.title" [hidden]="data.hide" [width]="250">
                        </kendo-grid-column>
                    </ng-container>

                    <!-- Image Column -->
                    <kendo-grid-column field="image" title="Image" [hidden]="false" [width]="150">
                        <ng-template kendoGridCellTemplate let-dataItem>
                            {{dataItem.image}}
                            <button kendoButton size="small" class="btn btn-dark"
                                (click)="fetchImageDocs(dataItem.milestone_id , 'image')">
                                View Image
                            </button>
                        </ng-template>
                    </kendo-grid-column>

                    <!-- Document Column -->
                    <kendo-grid-column field="document" title="Document" [hidden]="false" [width]="150">
                        <ng-template kendoGridCellTemplate let-dataItem>
                            {{dataItem.document}}
                            <button kendoButton size="small" class="btn btn-dark"
                                (click)="fetchImageDocs(dataItem.milestone_id , 'document')">
                                View Document
                            </button>
                        </ng-template>
                    </kendo-grid-column>

                    <!-- Action Button Column -->
                    <kendo-grid-column field="Action" title="Action" [width]="150" [sticky]="true" [columnMenu]="false">
                        <ng-template kendoGridCellTemplate let-dataItem>
                            <div class="d-flex gap-2">
                                <button kendoButton size="small" class="d-flex align-items-center btn btn-dark"
                                    rounded="small" fillMode="outline" themeColor="base"
                                    (click)="openEditDialogMilestone('edit', dataItem.milestone_id)">
                                    Edit
                                </button>
                                <button class="d-flex align-items-center btn btn-dark"
                                    (click)="deleteMilestone(dataItem.milestone_id)">
                                    Delete
                                </button>
                            </div>
                        </ng-template>
                    </kendo-grid-column>
                </ng-container>


                <kendo-excelexport fileName="Reports.xlsx" [data]="milestoneData" #excelexport>
                    <ng-container *ngFor="let data of grid_fields_milestone">
                        <kendo-excelexport-column field="{{data.fields}}" title="{{data.title}}">
                        </kendo-excelexport-column>
                    </ng-container>
                </kendo-excelexport>
            </kendo-grid>
        </div>

    </mat-tab>


</mat-tab-group>

<kendo-dialog class="custom-dialog handler-dialog" title="form" *ngIf="editDialogMilestone" [minWidth]="250"
    [width]="1024" (close)="closeEditDialog()">
    <h1>{{btnNameMilestone}}</h1>

    <form [formGroup]="milestoneForm" (ngSubmit)="onSubmitMilestone(btnSubmitMilestone)"
        style="height: 600px; overflow-y: auto;">
        <div>
            <div class="form-group">
                <label for="first-name"> Milestone Name</label>
                <input type="text" class="form-control" formControlName="milestone_name">
                <div *ngIf="milestoneForm.get('milestone_name').invalid && (milestoneForm.get('milestone_name').dirty ||milestoneForm.get('milestone_name').touched)"
                    class="alert alert-danger">
                    <div *ngIf="milestoneForm.get('milestone_name').errors?.['required']">
                        milestone is required.
                    </div>
                </div>
            </div>
        </div>

        <div class="form-group">
            <label for="description">Description</label>
            <input type="text" id="description" class="form-control" formControlName="description">
            <div *ngIf="milestoneForm.get('description').invalid && (milestoneForm.get('description').dirty ||milestoneForm.get('description').touched)"
                class="alert alert-danger">
                <div *ngIf="milestoneForm.get('description').errors?.['required']">
                    Description is required.
                </div>
            </div>
        </div>

        <div class="form-group">
            <label for="status">Is Approved: </label>
            <select formControlName="is_approved" class="form-control">
                <option value="true">TRUE</option>
                <option value="false">FALSE</option>
            </select>

            <!-- <div *ngIf="userForm.get('status').invalid && (userForm.get('status').dirty || userForm.get('status').touched)"
              class="alert alert-danger">
              <div *ngIf="userForm.get('status').errors['required']">Status is required</div>
            </div> -->
        </div>

        <div class="form-group">
            <label>Milestone status:</label>
            <select class="form-control" formControlName="milestone_status">
                <option value="">Select</option>
                <option *ngFor="let s of status_list" [value]="s.status_id">{{ s.status_name }}</option>
            </select>
            <!-- <div
              *ngIf="userForm.get('role_id').invalid && (userForm.get('role_id').dirty || userForm.get('role_id').touched)"
              class="alert alert-danger">
              <div *ngIf="userForm.get('role_id').errors['required']">role id is required</div>
            </div> -->
        </div>

        <div>
            <div class="form-group">
                <label>Remarks</label>
                <input type="text" class="form-control" formControlName="remarks">
                <!-- <div *ngIf="milestoneForm.get('remarks').invalid && (milestoneForm.get('remarks').dirty ||milestoneForm.get('remarks').touched)"
                    class="alert alert-danger">
                    <div *ngIf="milestoneForm.get('remarks').errors?.['required']">
                        Remark is required.
                    </div>
                </div> -->
            </div>
        </div>

        <div style="display: flex; justify-content: space-between;">
            <div class="form-group" style="flex: 1; margin-right: 10px;">
                <label>Image</label>
                <input id="imageInput" type="file" multiple="multiple" accept="image/png,image/jpeg" (change)="onImageChange($event)">
                <p *ngIf="isimgVisible">{{ milestoneForm.get('image').value  }}</p>
                <!-- <div *ngIf="milestoneForm.get('image').invalid && (milestoneForm.get('image').dirty ||milestoneForm.get('image').touched)"
                    class="alert alert-danger">
                    <div *ngIf="milestoneForm.get('image').errors?.['required']">
                        Image is required.
                    </div>
                </div> -->
            </div>
            <div class="form-group" style="flex: 1; margin-left: 10px;">
                <label>Document</label>
                <!-- <input type="text" class="form-control" formControlName="document"> -->
                <input id="docInput" type="file" multiple="multiple" (change)="onDocumentChange($event)">
                <p *ngIf="isdocVisible">{{ milestoneForm.get('document').value }}</p>
                <!-- <div *ngIf="milestoneForm.get('document').invalid && (milestoneForm.get('document').dirty ||milestoneForm.get('document').touched)"
                    class="alert alert-danger">
                    <div *ngIf="milestoneForm.get('document').errors?.['required']">
                        Document is required.
                    </div>
                </div> -->
            </div>
        </div>

        <br>
        <div *ngIf="isAdd">

        </div>
        <br>
        <div style="display: flex; justify-content: space-between;">
            <div class="form-group" style="flex: 1; margin-right: 10px;">
                <label>Start Date</label>

                <mat-form-field style="width: 100%;">
                    <input matInput [matDatepicker]="mstartPicker" formControlName="start_date">
                    <mat-datepicker-toggle matSuffix [for]="mstartPicker"></mat-datepicker-toggle>
                    <mat-datepicker #mstartPicker></mat-datepicker>
                </mat-form-field>
                <!-- <div *ngIf="milestoneForm.get('start_date').invalid && (milestoneForm.get('start_date').dirty || milestoneForm.get('start_date').touched)"
                   class="alert alert-danger">
                <div *ngIf="milestoneForm.get('start_date').errors?.['required']">
                  Start date is required.
                </div>
              </div> -->
            </div>
            <div class="form-group" style="flex: 1; margin-left: 10px;">
                <label>End Date</label>
                <mat-form-field style="width: 100%;">
                    <input matInput [matDatepicker]="mendPicker" formControlName="end_date">
                    <mat-datepicker-toggle matSuffix [for]="mendPicker"></mat-datepicker-toggle>
                    <mat-datepicker #mendPicker></mat-datepicker>
                </mat-form-field>
                <!-- <div *ngIf="milestoneForm.get('end_date').invalid && (milestoneForm.get('end_date').dirty || milestoneForm.get('end_date').touched)"
                   class="alert alert-danger">
                <div *ngIf="milestoneForm.get('end_date').errors?.['required']">
                  End date is required.
                </div> -->
            </div>
        </div>

        <!--  -->
        <button class="btn btn-dark" type="submit">{{btnSubmitMilestone}}</button>
        <button class="btn btn-dark" (click)="closeEditDialog()">close</button>
    </form>
    {{this.milestoneForm.value|json}}
</kendo-dialog>
<!-- image popup dialog -->
<div>
    <kendo-dialog class="custom-dialog handler-dialog" title="Images" *ngIf="ImageDialog" [minWidth]="250"
        [width]="1024" (close)="closeEditDialog()">

        Image Carousel

        
        <div class="container mt-5"  >
            <div>
                <ngb-carousel  (slide)="slideActivate($event)">
                    <ng-template *ngFor="let item of fetchedImages" ngbSlide>
                        <div class="picsum-img-wrapper">
                            <img src="http://localhost:8090/digitaltwin/dashboard/get_files/images/{{item}}" class="d-block w-100" />
                            <p>{{item}}</p>
                        </div>
                        <div class="carousel-caption">
                            <h3>Title Goes Here</h3>
                            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>
                        </div>
                    </ng-template>
        
                </ngb-carousel>
            </div>
        </div>

        <kendo-dialog-actions>
            <button kendoButton (click)="closeEditDialog()">Close</button>
        </kendo-dialog-actions>
    </kendo-dialog>
</div>

<!-- document popup dialog -->

<div>
    <kendo-dialog class="custom-dialog handler-dialog" *ngIf="documentDialog" title="document" [minWidth]="250"
        [width]="1024" (close)="closeEditDialog()">
        <div class="container mt-5"  >
            <div>
                <ngb-carousel  (slide)="slideActivate($event)">
                    <ng-template *ngFor="let item of fetchedDocuments" ngbSlide>
                        <div class="picsum-img-wrapper">
                            <img src="http://localhost:8090/digitaltwin/dashboard/get_files/d/{{item}}" class="d-block w-100" />
                            <p>{{item}}</p>
                        </div>
                        <div class="carousel-caption">
                            <h3>Title Goes Here</h3>
                            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>
                        </div>
                    </ng-template>
        
                </ngb-carousel>
            </div>
        </div>
       


        
         

        <kendo-dialog-actions>
            <button kendoButton (click)="closeEditDialog()">Close</button>
        </kendo-dialog-actions>
    </kendo-dialog>
</div>

<!-- <img src="http://localhost:8090/digitaltwin/dashboard/get_files/hh.png"> -->

==========================================================================
3-6-24
CREATE TABLE public.tbl_web_announcement
(
    announcement_id serial NOT NULL ,
    announcement_title text,
    announcement_description text,
    created_datetime timestamp with time zone,
    latitude double precision,
    longitude double precision,
    address text,
    announcement_datetime timestamp with time zone,
    role_id integer,
    CONSTRAINT tbl_web_announcement_pkey PRIMARY KEY (announcement_id),
    CONSTRAINT role_id_fk FOREIGN KEY (role_id)
        REFERENCES public.tbl_web_role_master (role_id)
)
✔


CREATE OR REPLACE FUNCTION public.fn_web_crud_announcement_management(
	userjson text)
    RETURNS TABLE(data text) 
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
    ROWS 1000

AS $BODY$
DECLARE
	_title text;
	_description text;
	_latitude double precision;
	_longitude double precision;
	_address text;
	_role_id integer;
	_announcement_datetime timestamp with time zone;
			
	sql_query text;
	userJsonObject JSON;
	_flag TEXT;
	_filter TEXT DEFAULT '';
	_CREATE_FLAG TEXT DEFAULT 'create';
	_DELETE_FLAG TEXT DEFAULT 'delete';
	_UPDATE_FLAG TEXT DEFAULT 'update';
	_FETCH_FLAG TEXT DEFAULT 'fetch';

BEGIN

	 raise notice '%',userjson;
	userJsonObject := cast(userjson AS JSON) :: JSON;
	
	_title:= userJsonObject ->>'title';
	_description := userJsonObject ->>'description';
	_latitude := userJsonObject ->>'latitude';
	_longitude := userJsonObject ->>'longitude';
	_address := userJsonObject ->>'address';
	_role_id := userJsonObject ->>'role_id';
	_announcement_datetime := userJsonObject ->>'announcement_datetime';
	_flag := userJsonObject ->> 'flag';	

	
    raise notice '%',_title;
    raise notice '%',_latitude;
    raise notice '%',_role_id;

	IF (_flag = _CREATE_FLAG)
	THEN
	 
	 	IF EXISTS (SELECT announcement_id FROM public.tbl_web_announcement WHERE (announcement_title = ''|| _announcement_title ||'' OR announcement_datetime = ''|| _announcement_datetime||'')  ) 
		THEN	
        	raise notice 'announcement for same date and title is already exists';
			sql_query :=  'SELECT json_build_object(''responseCode'',201,''responseMessage'',''announcement for same date and title is already exists.'')::text as data;';
		ELSE
			INSERT INTO public.tbl_web_announcement(
	         announcement_title, announcement_description, announcement_datetime ,latitude, longitude, address, role_id, created_datetime)
	        VALUES ( ?, ?, ?, ?, ?, ?, ?, now());
			sql_query := 'SELECT json_build_object(''responseCode'',200,''responseMessage'',''Announcement created successfully created successfully'')::text as data;';			
	END IF;
		
	ELSEIF (_flag = _UPDATE_FLAG)
	THEN
		IF EXISTS (SELECT user_id FROM public.tbl_user_master WHERE user_id = _user_id) 
		THEN	
			IF EXISTS (SELECT user_id FROM public.tbl_user_master WHERE user_id != _user_id AND (contact_no = ''|| _user_contact_no ||'' OR email_id = ''|| _user_email ||'')) THEN
				sql_query :=  'SELECT json_build_object(''responseCode'',201,''responseMessage'',''User name or email id is already Exists.'')::text as data;';
			ELSE
				UPDATE public.tbl_user_master
				SET user_name = _user_name, 
				--password = _user_password, 
				-- name = _name, 
				contact_no = _user_contact_no, 
				email_id = _user_email, 
				status = _status, 
				role_id = _role_id, 
				--is_delete = false, 
				modified_on=now()
				WHERE user_id = _user_id RETURNING user_id INTO _inserted_user_id;	
				
				UPDATE tbl_ward_assign_master set status = FALSE where fkuserid = _inserted_user_id;
				FOR _ward_json IN SELECT * FROM json_array_elements((userJsonObject ->> 'ward_nos')::json)
					LOOP
						IF _ward_json ->> 'ward_no' IS NOT NULL THEN
							_ward_no := _ward_json ->> 'ward_no';
							
							INSERT INTO tbl_ward_assign_master (fkuserid,wardno,status,created_datetime) 
								values (_inserted_user_id,_ward_no,TRUE,now());

						END IF;
				END LOOP;
				
				
				sql_query := 'SELECT json_build_object(''responseCode'',200,''responseMessage'',''User details updated successfully'')::text as data;';
			END IF;	
			
		ELSE
			sql_query :=  'SELECT json_build_object(''responseCode'',201,''responseMessage'',''User is not available.'')::text as data;';
		END IF;
		
	ELSEIF(_flag = _UPDATE_STATUS_FLAG) --- FOR UPDATE STATUS OF USER select * from tbl_user_master
	THEN
		IF EXISTS (SELECT user_id FROM public.tbl_user_master WHERE user_id = _user_id)
		THEN
			UPDATE public.tbl_user_master
			SET status = _status
			WHERE user_id = _user_id;
			sql_query :=  'SELECT json_build_object(''responseCode'',200,''responseMessage'',''User Status Update successfully.'')::text as data;';
		ELSE
			sql_query :=  'SELECT json_build_object(''responseCode'',201,''responseMessage'',''User is not available.'')::text as data;';
		
	END IF;
	ELSEIF (_flag = _DELETE_FLAG) ---- FOR DELETE USER
	THEN

		IF EXISTS (SELECT user_id FROM public.tbl_user_master WHERE user_id = _user_id) 
		THEN	

			UPDATE public.tbl_user_master
			SET status = _status,
			is_delete = true
			WHERE user_id = _user_id;
			sql_query :=  'SELECT json_build_object(''responseCode'',200,''responseMessage'',''User deleted successfully.'')::text as data;';
		ELSE
			sql_query :=  'SELECT json_build_object(''responseCode'',201,''responseMessage'',''User is not available.'')::text as data;';
		END IF;
	
	ELSEIF (_flag = _FETCH_FLAG) ---- FOR FETCH USER
	THEN
		--_filter := ' AND tum.user_id != ' || _user_id ;
		
		sql_query := 'SELECT json_build_object(''responseCode'',200,''data'',COALESCE(to_json(array_agg(data1)), 
		''[]''),''responseMessage'',''ok'')::text as data
		FROM (
			SELECT  
			tum.user_id,
			tum.user_name,
			tum.name,
			tum.contact_no,
			tum.email_id,
			(SELECT role_name FROM tbl_role_master WHERE role_id = tum.role_id::INTEGER) AS role_name,
			tum.status,
			tum.role_id,
			
			(array_to_json(array( select json_build_object(''ward_no'',wam.wardno)							
				FROM public.tbl_ward_assign_master AS wam
				LEFT JOIN public.tbl_user_master um ON
				wam.fkuserid::integer = tum.user_id::integer
				WHERE um.user_id::integer = wam.fkuserid::integer and wam.status is TRUE
			))) AS ward_data
			 
			-- (array_to_json(array( select json_build_object(''ward_no'',wam.wardno)							
			--	FROM public.tbl_user_master AS tum
			--	LEFT JOIN public.tbl_ward_assign_master AS wam ON
			--	wam.fkuserid::integer = tum.user_id::integer
			--	WHERE wam.fkuserid::integer = tum.user_id::integer and wam.status is TRUE
			--))) AS ward_data
			 
			from tbl_user_master tum  WHERE is_delete is false
			--'||_filter||'
			)data1;';																								   
	END IF;
		
	RETURN QUERY EXECUTE sql_query;

	EXCEPTION WHEN OTHERS 
	THEN
		DECLARE p_errormessage VARCHAR(4000);
		DECLARE p_errorstate VARCHAR(4000);
		DECLARE p_errorline VARCHAR(4000);

		BEGIN									
			p_errormessage:= SQLERRM;
			p_errorstate:= SQLSTATE;
			GET STACKED DIAGNOSTICS p_errorline = PG_EXCEPTION_CONTEXT;
				
			INSERT INTO tbl_error_log(error_name,error_callstack,error_method,created_on)		
			SELECT p_errorline,p_errormessage||':fn_web_crud_surveyor_management',p_errorstate,timezone('Asia/Kolkata'::text, now());
			
			sql_query := 'SELECT json_build_object(''responseCode'',201,''data'',''failed'', ''responseMessage'', '''||p_errormessage||''')::text as data';
	END;
	RETURN QUERY EXECUTE sql_query;
END;
$BODY$;

ALTER FUNCTION public.fn_web_crud_surveyor_management(text)
    OWNER TO postgres;
✔


CREATE OR REPLACE FUNCTION public.fn_web_crud_announcement(
	jsondata text)
    RETURNS TABLE(data text) 
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
    ROWS 1000

AS $BODY$
DECLARE		
		
			-- 03-06-24
		
			-- SELECT public.fn_add_announcements('{"title":"Announcement 1","description":"Announcement description","user_id":1,"latitude":"22.723228", "longitude":"75.875230","address":"Test 123","department_id":1,"announcement_datetime":"2019-12-27 12:12:12"}');
			
			json_data json;
			_title text;
			_description text;
			_user_id integer;
			_latitude double precision;
			_longitude double precision;
			_address text;
			_role_id integer;
			_announcement_datetime timestamp with time zone;		
			sql_query TEXT;
	BEGIN         		
			json_data := cast(jsondata as json) :: json;
			_title := json_data ->> 'announcement_title';
			_description := json_data ->> 'announcement_description';
			_user_id := json_data ->> 'user_id';
			_latitude := json_data ->> 'latitude';
			_longitude := json_data ->> 'longitude';
			_address := json_data ->> 'address';
			_department_id := json_data ->> 'department_id';
			_announcement_datetime := json_data ->> 'announcement_datetime';
			
			INSERT INTO public.tbl_announcement
			(announcement_title, announcement_description, created_datetime, user_id, latitude, longitude, address, department_id, announcement_datetime)
			VALUES
			(_title, _description, now(), _user_id, _latitude, _longitude, _address, _department_id, _announcement_datetime)
			RETURNING announcement_id INTO _id;
			
			IF _id != 0
			THEN
				sql_query := 'SELECT json_build_object(''responseCode'', 200, ''responseMessage'',''Announcement added successfully.'') :: text';
			ELSE
				sql_query := 'SELECT json_build_object(''responseCode'', 204, ''responseMessage'',''Error while data insertion'') :: text';
			END IF;
			RETURN QUERY EXECUTE sql_query;	


------------✨		THEN	
			IF EXISTS (SELECT announcement_id FROM public.tbl_web_announcement WHERE announcement_id = _announcement_id  ))
			THEN
				UPDATE public.tbl_web_announcement
				SET announcement_title  = _announcement_title   	,         
				announcement_description= _announcement_description	,
				created_datetime        = _created_datetime			,		
                latitude                = _latitude					,
                longitude 				= _longitude				,
                address 				= _address					,
                announcement_datetime	= _announcement_datetime	,
                role_id 				= _role_id

				sql_query := 'SELECT json_build_object(''responseCode'',200,''responseMessage'',''announcement updated successfully'')::text as data;';
			ELSE
			sql_query :=  'SELECT json_build_object(''responseCode'',201,''responseMessage'',''announcement is not available.'')::text as data;';
			END IF;	
------------✨	

CREATE OR REPLACE FUNCTION public.fn_web_crud_announcement_management(
	userjson text)
    RETURNS TABLE(data text) 
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
    ROWS 1000

AS $BODY$
DECLARE
	_announcement_title text;
	_announcement_description text;
	_latitude double precision;
	_longitude double precision;
	_address text;
	_role_id integer;
	_announcement_datetime timestamp with time zone;
	_announcement_id int;
			
	sql_query text;
	userJsonObject JSON;
	_flag TEXT;
	_filter TEXT DEFAULT '';
	_CREATE_FLAG TEXT DEFAULT 'create';
	_DELETE_FLAG TEXT DEFAULT 'delete';
	_UPDATE_FLAG TEXT DEFAULT 'update';
	_FETCH_FLAG TEXT DEFAULT 'fetch';

BEGIN
-- 	select * from tbl_web_announcement
	raise notice '%',userjson;
	userJsonObject := cast(userjson AS JSON) :: JSON;
    
	_announcement_title := userJsonObject ->> 'announcement_title';
    RAISE NOTICE 'announcement_title: %', _announcement_title;

    _announcement_description := userJsonObject ->> 'announcement_description';
    RAISE NOTICE 'announcement_description: %', _announcement_description;

    _latitude := userJsonObject ->> 'latitude';
    RAISE NOTICE 'latitude: %', _latitude;

    _longitude := userJsonObject ->> 'longitude';
    RAISE NOTICE 'longitude: %', _longitude;

    _address := userJsonObject ->> 'address';
    RAISE NOTICE 'address: %', _address;

    _role_id := (userJsonObject ->> 'role_id')::INT;
    RAISE NOTICE 'role_id: %', _role_id;

    _announcement_datetime := userJsonObject ->> 'announcement_datetime';
    RAISE NOTICE 'announcement_datetime: %', _announcement_datetime;

    _flag := userJsonObject ->> 'flag';
    RAISE NOTICE 'flag: %', _flag;

    _announcement_id := (userJsonObject ->> 'announcement_id')::INT;
    RAISE NOTICE 'announcement_id: %', _announcement_id;
	
	IF (_flag = _CREATE_FLAG)-- insert
	THEN
	 	IF EXISTS (SELECT announcement_id FROM public.tbl_web_announcement WHERE (announcement_title = ''|| _announcement_title ||'' OR announcement_datetime = ''|| _announcement_datetime||'')  ) 
		THEN	
        	raise notice 'announcement for same date and title is already exists';
			sql_query :=  'SELECT json_build_object(''responseCode'',201,''responseMessage'',''announcement for same date and title is already exists.'')::text as data;';
		ELSE
			INSERT INTO public.tbl_web_announcement(
	         			announcement_title, announcement_description, announcement_datetime , latitude,  longitude,  address,  role_id, created_datetime)
	        VALUES (_announcement_title,   _announcement_description, _announcement_datetime ,_latitude, _longitude, _address, _role_id, now());
			sql_query := 'SELECT json_build_object(''responseCode'',200,''responseMessage'',''Announcement created successfully created successfully'')::text as data;';			
			raise notice 'announcement inserted';
		END IF;
	ELSEIF (_flag = _UPDATE_FLAG)
	THEN	
			IF EXISTS (SELECT announcement_id FROM public.tbl_web_announcement WHERE announcement_id = _announcement_id  )
			THEN
				UPDATE public.tbl_web_announcement
				SET announcement_title  = _announcement_title   	,         
				announcement_description= _announcement_description	,
				created_datetime        = _created_datetime			,		
                latitude                = _latitude					,
                longitude 				= _longitude				,
                address 				= _address					,
                announcement_datetime	= _announcement_datetime	,
                role_id 				= _role_id;

				sql_query := 'SELECT json_build_object(''responseCode'',200,''responseMessage'',''announcement updated successfully'')::text as data;';
				raise notice 'announcement updated';
			ELSE
			sql_query :=  'SELECT json_build_object(''responseCode'',201,''responseMessage'',''announcement is not available.'')::text as data;';
			raise notice 'announcement not updated';
			END IF;
	ELSEIF (_flag = _DELETE_FLAG)--delete
	THEN	
			IF EXISTS (SELECT announcement_id FROM public.tbl_web_announcement WHERE announcement_id = _announcement_id ) THEN
				DELETE FROM public.tbl_web_announcement 
				WHERE announcement_id = _announcement_id;
							sql_query :=  'SELECT json_build_object(''responseCode'',200,''responseMessage'',''announcement deleted successfully.'')::text as data;';
							raise notice 'announcement delete';
			ELSE
							sql_query :=  'SELECT json_build_object(''responseCode'',201,''responseMessage'',''announcement is not available.'')::text as data;';
							raise notice 'announcement noot updated';
			END IF;		
	ELSEIF (_flag = _FETCH_FLAG) ---- FOR FETCH by id
	THEN
		sql_query := 'SELECT json_build_object(''responseCode'',200,''data'',COALESCE(to_json(array_agg(data1)), 
		''[]''),''responseMessage'',''ok'')::text as data
		FROM (
			SELECT  
			    announcement_title,  
				announcement_description,
				created_datetime,        
				latitude ,               
				longitude 	,			
				address ,				
				announcement_datetime	,
				role_id 				
			    from tbl_web_announcement  WHERE announcement_id = _announcement_id
		     )data1;';
		raise notice 'announcement fetch by id';	 
			
	ELSEIF (_flag = _FETCH_FLAG) ---- FOR FETCH all data 
	THEN
		sql_query := 'SELECT json_build_object(''responseCode'',200,''data'',COALESCE(to_json(array_agg(data1)), 
		''[]''),''responseMessage'',''ok'')::text as data
		FROM (SELECT 
			    announcement_title,  
				announcement_description,
				created_datetime,        
				latitude ,               
				longitude 	,			
				address ,				
				announcement_datetime	,
				role_id 				
			    from tbl_web_announcement )data1;';  
		   raise notice 'announcement fetch all';	 
	END IF;
		
	RETURN QUERY EXECUTE sql_query;
		raise notice 'locha hai';
	EXCEPTION WHEN OTHERS 
	THEN
		DECLARE p_errormessage VARCHAR(4000);
		DECLARE p_errorstate VARCHAR(4000);
		DECLARE p_errorline VARCHAR(4000);

		BEGIN									
			p_errormessage:= SQLERRM;
			p_errorstate:= SQLSTATE;
			GET STACKED DIAGNOSTICS p_errorline = PG_EXCEPTION_CONTEXT;
				
			INSERT INTO tbl_error_log(error_name,error_callstack,error_method,created_on)		
			SELECT p_errorline,p_errormessage||':fn_web_crud_announcement_management',p_errorstate,timezone('Asia/Kolkata'::text, now());
			
			sql_query := 'SELECT json_build_object(''responseCode'',201,''data'',''failed'', ''responseMessage'', '''||p_errormessage||''')::text as data';
	END;
	RETURN QUERY EXECUTE sql_query;
END;
$BODY$;

--------------
select fn_web_crud_announcement_management('{
										   "flag":"create",
										   "announcement_title":"meeting", 
										   "announcement_description":"meeting1", 
										   "announcement_datetime":"3-6-2024" , 
										   "latitude":"22.723228",  
										   "longitude":"75.875230",  
										   "address":"test",  
										   "role_id":"2"}')
-- 										   select * from tbl_web_role_master
-- select * from tbl_web_announcement
SELECT * FROM tbl_error_log ORDER BY created_on DESC LIMIT 10


✔ CREATED SP
✔TESTING FOR INSERT


CREATE OR REPLACE FUNCTION public.fn_web_crud_announcement_management(
	userjson text)
    RETURNS TABLE(data text) 
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
    ROWS 1000

AS $BODY$
DECLARE
	_announcement_title text;
	_announcement_description text;
	_latitude double precision;
	_longitude double precision;
	_address text;
	_role_id integer;
	_announcement_datetime timestamp with time zone;
	_announcement_id int;
			
	sql_query text;
	userJsonObject JSON;
	_flag TEXT;
	_filter TEXT DEFAULT '';
	_CREATE_FLAG TEXT DEFAULT 'create';
	_DELETE_FLAG TEXT DEFAULT 'delete';
	_UPDATE_FLAG TEXT DEFAULT 'update';
	_FETCH_FLAG TEXT DEFAULT 'fetch';
	_FETCHID_FLAG TEXT DEFAULT 'fetch_id';

BEGIN
-- 	select * from tbl_web_announcement
--  select fn_web_crud_announcement_management('{"flag":"create","announcement_title":"meeting2","announcement_description":"meeting2","announcement_datetime":"2222-02-02","latitude":"22.723228","longitude":"75.875230","address":"test","role_id":"2"}')
--  select fn_web_crud_announcement_management('{"flag":"update","announcement_id":"1","announcement_title":"meetingupdate","announcement_description":"meetingupd","announcement_datetime":"2222-02-02","latitude":"22.723228","longitude":"75.875230","address":"test","role_id":"2"}')
--  select fn_web_crud_announcement_management('{"flag":"fetch_id","announcement_id":"1"}')
--  select fn_web_crud_announcement_management('{"flag":"fetch"}')
--  select fn_web_crud_announcement_management('{"flag":"delete","announcement_id":"1"}')

	raise notice '%',userjson;
	userJsonObject := cast(userjson AS JSON) ;
    
	_announcement_title := userJsonObject ->> 'announcement_title';
    RAISE NOTICE 'announcement_title: %', _announcement_title;

    _announcement_description := userJsonObject ->> 'announcement_description';
    RAISE NOTICE 'announcement_description: %', _announcement_description;

    _latitude := userJsonObject ->> 'latitude';
    RAISE NOTICE 'latitude: %', _latitude;

    _longitude := userJsonObject ->> 'longitude';
    RAISE NOTICE 'longitude: %', _longitude;

    _address := userJsonObject ->> 'address';
    RAISE NOTICE 'address: %', _address;

    _role_id := (userJsonObject ->> 'role_id')::INT;
    RAISE NOTICE 'role_id: %', _role_id;

    _announcement_datetime :=  to_timestamp(userJsonObject ->> 'announcement_datetime', 'YYYY-MM-DD');
    RAISE NOTICE 'announcement_datetime: %', _announcement_datetime;

    _flag := userJsonObject ->> 'flag';
    RAISE NOTICE 'flag: %', _flag;

    _announcement_id := (userJsonObject ->> 'announcement_id')::INT;
    RAISE NOTICE 'announcement_id: %', _announcement_id;
	
	IF (_flag = _CREATE_FLAG)-- insert
	THEN
	RAISE NOTICE 'ss';
	 	IF EXISTS (SELECT announcement_id FROM public.tbl_web_announcement WHERE (announcement_title = ''|| _announcement_title ||'' AND announcement_datetime = _announcement_datetime)  ) 
		THEN	
        	raise notice 'announcement for same date and title is already exists';
			sql_query :=  'SELECT json_build_object(''responseCode'',201,''responseMessage'',''announcement for same date and title is already exists.'')::text as data;';
		ELSE
		RAISE NOTICE 'ss _>';
			INSERT INTO public.tbl_web_announcement(
	         			announcement_title, announcement_description, announcement_datetime , latitude,  longitude,  address,  role_id, created_datetime)
	        VALUES (_announcement_title,   _announcement_description, _announcement_datetime ,_latitude, _longitude, _address, _role_id, now());
			sql_query := 'SELECT json_build_object(''responseCode'',200,''responseMessage'',''Announcement created successfully created successfully'')::text as data;';			
			raise notice 'announcement inserted';
		END IF;
	ELSEIF (_flag = _UPDATE_FLAG)
	THEN	
			IF EXISTS (SELECT announcement_id FROM public.tbl_web_announcement WHERE announcement_id = _announcement_id  )
			THEN
				UPDATE public.tbl_web_announcement
				SET announcement_title  = _announcement_title   	,         
				announcement_description= _announcement_description	,
                latitude                = _latitude					,
                longitude 				= _longitude				,
                address 				= _address					,
                announcement_datetime	= _announcement_datetime	,
                role_id 				= _role_id;

				sql_query := 'SELECT json_build_object(''responseCode'',200,''responseMessage'',''announcement updated successfully'')::text as data;';
				raise notice 'announcement updated';
			ELSE
			sql_query :=  'SELECT json_build_object(''responseCode'',201,''responseMessage'',''announcement is not available.'')::text as data;';
			raise notice 'announcement not updated';
			END IF;
	ELSEIF (_flag = _DELETE_FLAG)--delete
	THEN	
			IF EXISTS (SELECT announcement_id FROM public.tbl_web_announcement WHERE announcement_id = _announcement_id ) THEN
				DELETE FROM public.tbl_web_announcement 
				WHERE announcement_id = _announcement_id;
							sql_query :=  'SELECT json_build_object(''responseCode'',200,''responseMessage'',''announcement deleted successfully.'')::text as data;';
							raise notice 'announcement delete';
			ELSE
							sql_query :=  'SELECT json_build_object(''responseCode'',201,''responseMessage'',''announcement is not available.'')::text as data;';
							raise notice 'announcement noot updated';
			END IF;		
	ELSEIF (_flag = _FETCHID_FLAG) ---- FOR FETCH by id
	THEN
		sql_query := 'SELECT json_build_object(''responseCode'',200,''data'',COALESCE(to_json(array_agg(data1)), 
		''[]''),''responseMessage'',''ok'')::text as data
		FROM (
			SELECT  
			    announcement_title,  
				announcement_description,
				created_datetime,        
				latitude ,               
				longitude 	,			
				address ,				
				announcement_datetime	,
				role_id 				
			    from tbl_web_announcement  WHERE announcement_id ='''|| _announcement_id||'''
		     )data1;';
		raise notice 'announcement fetch by id';	 
			
	ELSEIF (_flag = _FETCH_FLAG) ---- FOR FETCH all data 
	THEN
		sql_query := 'SELECT json_build_object(''responseCode'',200,''data'',COALESCE(to_json(array_agg(data1)), 
		''[]''),''responseMessage'',''ok'')::text as data
		FROM (SELECT 
			    announcement_title,  
				announcement_description,
				created_datetime,        
				latitude ,               
				longitude 	,			
				address ,				
				announcement_datetime	,
				role_id 				
			    from tbl_web_announcement )data1;';  
		   raise notice 'announcement fetch all';	 
	END IF;
		
	RETURN QUERY EXECUTE sql_query;
		raise notice 'locha hai';
	EXCEPTION WHEN OTHERS 
	THEN
		DECLARE p_errormessage VARCHAR(4000);
		DECLARE p_errorstate VARCHAR(4000);
		DECLARE p_errorline VARCHAR(4000);

		BEGIN									
			p_errormessage:= SQLERRM;
			p_errorstate:= SQLSTATE;
			GET STACKED DIAGNOSTICS p_errorline = PG_EXCEPTION_CONTEXT;
				
			INSERT INTO tbl_error_log(error_name,error_callstack,error_method,created_on)		
			SELECT p_errorline,p_errormessage||':fn_web_crud_announcement_management',p_errorstate,timezone('Asia/Kolkata'::text, now());
			
			sql_query := 'SELECT json_build_object(''responseCode'',201,''data'',''failed'', ''responseMessage'', '''||p_errormessage||''')::text as data';
	END;
	RETURN QUERY EXECUTE sql_query;
END;
$BODY$;


-- 	select * from tbl_web_announcement
--  select fn_web_crud_announcement_management('{"flag":"create","announcement_title":"meeting2","announcement_description":"meeting2","announcement_datetime":"2222-02-02","latitude":"22.723228","longitude":"75.875230","address":"test","role_id":"2"}')
--  select fn_web_crud_announcement_management('{"flag":"update","announcement_id":"1","announcement_title":"meetingupdate","announcement_description":"meetingupd","announcement_datetime":"2222-02-02","latitude":"22.723228","longitude":"75.875230","address":"test","role_id":"2"}')
--  select fn_web_crud_announcement_management('{"flag":"fetch_id","announcement_id":"1"}')
--  select fn_web_crud_announcement_management('{"flag":"fetch"}')
--  select fn_web_crud_announcement_management('{"flag":"delete","announcement_id":"1"}')
✔all test done
	@ApiIgnore
	@RequestMapping(value = "/announcment_management", method = RequestMethod.POST)
	public ResponseEntity<?> getAnnouncementDetails(@RequestBody String json, HttpServletRequest request ) {
		try {
			String result = dashService.getAnnouncementDetails(json);
			return ResponseEntity.ok(result);
		} catch (Exception e) {
			e.printStackTrace();
			return ResponseEntity.ok(CustomMessages.getMessage(CustomMessages.RESPONSE_MESSAGE_500));
		}
------
	@ApiIgnore
	@RequestMapping(value = "/announcment_management", method = RequestMethod.POST)
	public ResponseEntity<?> getAnnouncementDetails(@RequestBody String json, HttpServletRequest request ) {
		try {
			String result = dashService.getAnnouncementDetails(json);
			return ResponseEntity.ok(result);
		} catch (Exception e) {
			e.printStackTrace();
			return ResponseEntity.ok(CustomMessages.getMessage(CustomMessages.RESPONSE_MESSAGE_500));
		}
	
	✔API CREATED 
========================================5-6--24
✔modified fetchid field


CREATE OR REPLACE FUNCTION public.fn_web_crud_announcement_management(
	userjson text)
    RETURNS TABLE(data text) 
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
    ROWS 1000

AS $BODY$
DECLARE
	_announcement_title text;
	_announcement_description text;
	_latitude double precision;
	_longitude double precision;
	_address text;
	_role_id integer;
	_announcement_datetime timestamp with time zone;
	_announcement_id int;
			
	sql_query text;
	userJsonObject JSON;
	_flag TEXT;
	_filter TEXT DEFAULT '';
	_CREATE_FLAG TEXT DEFAULT 'create';
	_DELETE_FLAG TEXT DEFAULT 'delete';
	_UPDATE_FLAG TEXT DEFAULT 'update';
	_FETCH_FLAG TEXT DEFAULT 'fetch';
	_FETCHID_FLAG TEXT DEFAULT 'fetch_id';

BEGIN
-- 	select * from tbl_web_announcement
--  select fn_web_crud_announcement_management('{"flag":"create","announcement_title":"meeting2","announcement_description":"meeting2","announcement_datetime":"2222-02-02","latitude":"22.723228","longitude":"75.875230","address":"test","role_id":"2"}')
--  select fn_web_crud_announcement_management('{"flag":"update","announcement_id":"1","announcement_title":"meetingupdate","announcement_description":"meetingupd","announcement_datetime":"2222-02-02","latitude":"22.723228","longitude":"75.875230","address":"test","role_id":"2"}')
--  select fn_web_crud_announcement_management('{"flag":"fetch_id","announcement_id":"1"}')
--  select fn_web_crud_announcement_management('{"flag":"fetch"}')
--  select fn_web_crud_announcement_management('{"flag":"delete","announcement_id":"1"}')

	raise notice '%',userjson;
	userJsonObject := cast(userjson AS JSON) ;
    
	_announcement_title := userJsonObject ->> 'announcement_title';
    RAISE NOTICE 'announcement_title: %', _announcement_title;

    _announcement_description := userJsonObject ->> 'announcement_description';
    RAISE NOTICE 'announcement_description: %', _announcement_description;

    _latitude := userJsonObject ->> 'latitude';
    RAISE NOTICE 'latitude: %', _latitude;

    _longitude := userJsonObject ->> 'longitude';
    RAISE NOTICE 'longitude: %', _longitude;

    _address := userJsonObject ->> 'address';
    RAISE NOTICE 'address: %', _address;

    _role_id := (userJsonObject ->> 'role_id')::INT;
    RAISE NOTICE 'role_id: %', _role_id;

    _announcement_datetime :=  to_timestamp(userJsonObject ->> 'announcement_datetime', 'YYYY-MM-DD');
    RAISE NOTICE 'announcement_datetime: %', _announcement_datetime;

    _flag := userJsonObject ->> 'flag';
    RAISE NOTICE 'flag: %', _flag;

    _announcement_id := (userJsonObject ->> 'announcement_id')::INT;
    RAISE NOTICE 'announcement_id: %', _announcement_id;
	
	IF (_flag = _CREATE_FLAG)-- insert
	THEN
	RAISE NOTICE 'ss';
	 	IF EXISTS (SELECT announcement_id FROM public.tbl_web_announcement WHERE (announcement_title = ''|| _announcement_title ||'' AND announcement_datetime = _announcement_datetime)  ) 
		THEN	
        	raise notice 'announcement for same date and title is already exists';
			sql_query :=  'SELECT json_build_object(''responseCode'',201,''responseMessage'',''announcement for same date and title is already exists.'')::text as data;';
		ELSE
		RAISE NOTICE 'ss _>';
			INSERT INTO public.tbl_web_announcement(
	         			announcement_title, announcement_description, announcement_datetime , latitude,  longitude,  address,  role_id, created_datetime)
	        VALUES (_announcement_title,   _announcement_description, _announcement_datetime ,_latitude, _longitude, _address, _role_id, now());
			sql_query := 'SELECT json_build_object(''responseCode'',200,''responseMessage'',''Announcement created successfully created successfully'')::text as data;';			
			raise notice 'announcement inserted';
		END IF;
	ELSEIF (_flag = _UPDATE_FLAG)
	THEN	
			IF EXISTS (SELECT announcement_id FROM public.tbl_web_announcement WHERE announcement_id = _announcement_id  )
			THEN
				UPDATE public.tbl_web_announcement
				SET announcement_title  = _announcement_title   	,         
				announcement_description= _announcement_description	,
                latitude                = _latitude					,
                longitude 				= _longitude				,
                address 				= _address					,
                announcement_datetime	= _announcement_datetime	,
                role_id 				= _role_id;

				sql_query := 'SELECT json_build_object(''responseCode'',200,''responseMessage'',''announcement updated successfully'')::text as data;';
				raise notice 'announcement updated';
			ELSE
			sql_query :=  'SELECT json_build_object(''responseCode'',201,''responseMessage'',''announcement is not available.'')::text as data;';
			raise notice 'announcement not updated';
			END IF;
	ELSEIF (_flag = _DELETE_FLAG)--delete
	THEN	
			IF EXISTS (SELECT announcement_id FROM public.tbl_web_announcement WHERE announcement_id = _announcement_id ) THEN
				DELETE FROM public.tbl_web_announcement 
				WHERE announcement_id = _announcement_id;
							sql_query :=  'SELECT json_build_object(''responseCode'',200,''responseMessage'',''announcement deleted successfully.'')::text as data;';
							raise notice 'announcement delete';
			ELSE
							sql_query :=  'SELECT json_build_object(''responseCode'',201,''responseMessage'',''announcement is not available.'')::text as data;';
							raise notice 'announcement noot updated';
			END IF;		
	ELSEIF (_flag = _FETCHID_FLAG) ---- FOR FETCH by id
	THEN
		sql_query := 'SELECT json_build_object(''responseCode'',200,''data'',COALESCE(to_json(array_agg(data1)), 
		''[]''),''responseMessage'',''ok'')::text as data
		FROM (
			SELECT  
			    announcement_title,  
				announcement_description,
				created_datetime,        
				latitude ,               
				longitude 	,			
				address ,				
				announcement_datetime	,
				role_id ,
				(SELECT role_name FROM tbl_web_role_master WHERE tbl_web_role_master.role_id = tbl_web_announcement.role_id) as role_name
			    from tbl_web_announcement  WHERE announcement_id ='''|| _announcement_id||'''
		     )data1;';
		raise notice 'announcement fetch by id';	 
			
	ELSEIF (_flag = _FETCH_FLAG) ---- FOR FETCH all data 
	THEN
		sql_query := 'SELECT json_build_object(''responseCode'',200,''data'',COALESCE(to_json(array_agg(data1)), 
		''[]''),''responseMessage'',''ok'')::text as data
		FROM (SELECT 
				announcement_id	,
			    announcement_title,  
				announcement_description,
				created_datetime,        
				latitude ,               
				longitude 	,			
				address ,				
				announcement_datetime	,
				role_id ,
				(SELECT role_name FROM tbl_web_role_master WHERE tbl_web_role_master.role_id = tbl_web_announcement.role_id) as role_name
			    from tbl_web_announcement )data1;';  
		   raise notice 'announcement fetch all';	 
	END IF;
		
	RETURN QUERY EXECUTE sql_query;
		raise notice 'locha hai';
	EXCEPTION WHEN OTHERS 
	THEN
		DECLARE p_errormessage VARCHAR(4000);
		DECLARE p_errorstate VARCHAR(4000);
		DECLARE p_errorline VARCHAR(4000);

		BEGIN									
			p_errormessage:= SQLERRM;
			p_errorstate:= SQLSTATE;
			GET STACKED DIAGNOSTICS p_errorline = PG_EXCEPTION_CONTEXT;
				
			INSERT INTO tbl_error_log(error_name,error_callstack,error_method,created_on)		
			SELECT p_errorline,p_errormessage||':fn_web_crud_announcement_management',p_errorstate,timezone('Asia/Kolkata'::text, now());
			
			sql_query := 'SELECT json_build_object(''responseCode'',201,''data'',''failed'', ''responseMessage'', '''||p_errormessage||''')::text as data';
	END;
	RETURN QUERY EXECUTE sql_query;
END;
$BODY$;






